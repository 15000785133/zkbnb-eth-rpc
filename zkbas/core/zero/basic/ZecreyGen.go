// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package basic

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StorageBlockHeader is an auto generated low-level Go binding around an user-defined struct.
type StorageBlockHeader struct {
	BlockNumber                  uint32
	PriorityOperations           uint64
	PendingOnchainOperationsHash [32]byte
	AccountRoot                  [32]byte
	Timestamp                    *big.Int
	Commitment                   [32]byte
}

// ZecreyCommitBlockInfo is an auto generated low-level Go binding around an user-defined struct.
type ZecreyCommitBlockInfo struct {
	BlockNumber       uint32
	NewAccountRoot    [32]byte
	Timestamp         *big.Int
	Commitment        [32]byte
	OnchainOpsPubData []byte
	OnchainOpsCount   uint16
}

// ZecreyExecuteBlockInfo is an auto generated low-level Go binding around an user-defined struct.
type ZecreyExecuteBlockInfo struct {
	BlockHeader              StorageBlockHeader
	PendingOnchainOpsPubdata [][]byte
}

// ZecreyABI is the input ABI used to generate the binding from.
const ZecreyABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockVerification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksVerified\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksCommitted\",\"type\":\"uint32\"}],\"name\":\"BlocksRevert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zecreyBlockNumber\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"DepositCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"opType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"DepositOrLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExodusMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zecreyBlockId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"FullExitCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"serialId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enumTxTypes.TxType\",\"name\":\"txType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"name\":\"NewPriorityRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNoticePeriod\",\"type\":\"uint256\"}],\"name\":\"NoticePeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"WithdrawalPending\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxAmount\",\"type\":\"uint128\"}],\"name\":\"_transferERC20\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"blockOnchainOpsPubData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"priorityOperations\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pendingOnchainOperationsHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader\",\"name\":\"_lastCommittedBlockData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"newAccountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"onchainOpsPubData\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"onchainOpsCount\",\"type\":\"uint16\"}],\"internalType\":\"structZecrey.CommitBlockInfo[]\",\"name\":\"_newBlocksData\",\"type\":\"tuple[]\"}],\"name\":\"commitBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_onchainOpsPubData\",\"type\":\"bytes\"}],\"name\":\"computeOnchainOpsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"onchainOpsDataHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cutUpgradeNoticePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_txType\",\"type\":\"uint8\"},{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint104\",\"name\":\"_amount\",\"type\":\"uint104\"},{\"internalType\":\"bytes32\",\"name\":\"_accountName\",\"type\":\"bytes32\"}],\"name\":\"depositOrLockERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_txType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_accountName\",\"type\":\"bytes32\"}],\"name\":\"depositOrLockNativeAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"priorityOperations\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pendingOnchainOperationsHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader\",\"name\":\"blockHeader\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"pendingOnchainOpsPubdata\",\"type\":\"bytes[]\"}],\"internalType\":\"structZecrey.ExecuteBlockInfo[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"}],\"name\":\"executeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstPriorityRequestId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_assetId\",\"type\":\"uint16\"}],\"name\":\"forceWithdrawUnhandledBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNoticePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetAddr\",\"type\":\"address\"}],\"name\":\"getPendingBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializationParameters\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReadyForUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"onchainOpsCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"onchainOpsExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"priorityOperations\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pendingOnchainOperationsHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader[]\",\"name\":\"_blocksToRevert\",\"type\":\"tuple[]\"}],\"name\":\"revertBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"storedBlockHeaderHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksCommitted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksExecuted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksVerified\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOpenPriorityRequests\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unhandledBalances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"unhandledBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"upgradeParameters\",\"type\":\"bytes\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeFinishes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeNoticePeriodStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradePreparationStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"priorityOperations\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pendingOnchainOperationsHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_proofs\",\"type\":\"uint256[]\"}],\"name\":\"verifyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"withdrawPendingBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ZecreyBin is the compiled bytecode used for deploying new contracts.
var ZecreyBin = "0x60806040523480156200001157600080fd5b506200001c62000022565b62000086565b7f8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf480546001909155801562000083576040805162461bcd60e51b815260206004820152600260248201526118a160f11b604482015290519081900360640190fd5b50565b61496b80620000966000396000f3fe6080604052600436106101d85760003560e01c806367708dae11610102578063a7ccec2f11610095578063e1d730d911610064578063e1d730d9146104ee578063eface7e21461051c578063f223548714610549578063faf4d8cb1461055e576101d8565b8063a7ccec2f146104a4578063b269b9ae146103fa578063c57b22be146104b9578063d514da50146104ce576101d8565b80638b4f7de9116100d15780638b4f7de9146104245780638c8ebc52146104445780638ee1a74e146104645780639e71713c14610484576101d8565b806367708dae146103c357806378b91e70146103e5578063871b8ff1146103fa5780638773334c1461040f576101d8565b80632d24006c1161017a578063439fab9111610149578063439fab91146103365780635065ed7d146103565780635aca41f6146103765780635d85bc70146103a3576101d8565b80632d24006c146102ca5780633b154b73146102ec5780633e71e1e7146103015780634167d00214610316576101d8565b80631dd269e3116101b65780631dd269e3146102485780631e15f3e01461026857806325394645146102885780632a3174f4146102a8576101d8565b80630222740e146101dd5780630e536f60146102135780631678b35e14610235575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004613e3a565b610573565b60405161020a9190614389565b60405180910390f35b34801561021f57600080fd5b5061023361022e366004613be8565b610588565b005b610233610243366004614159565b6107e0565b34801561025457600080fd5b50610233610263366004614098565b6108ca565b34801561027457600080fd5b50610233610283366004614184565b610a27565b34801561029457600080fd5b506102336102a3366004613e62565b610e05565b3480156102b457600080fd5b506102bd610e39565b60405161020a9190614394565b3480156102d657600080fd5b506102df610e3e565b60405161020a91906147f1565b3480156102f857600080fd5b50610233610e51565b34801561030d57600080fd5b50610233610e57565b34801561032257600080fd5b506102bd610331366004614105565b611069565b34801561034257600080fd5b50610233610351366004613e62565b61107b565b34801561036257600080fd5b50610233610371366004613c1a565b61129d565b34801561038257600080fd5b50610396610391366004613bb0565b6115d3565b60405161020a9190614798565b3480156103af57600080fd5b506102336103be366004613f5b565b6116a2565b3480156103cf57600080fd5b506103d861186a565b60405161020a9190614819565b3480156103f157600080fd5b50610233611880565b34801561040657600080fd5b506102336118b0565b34801561041b57600080fd5b506101fd6118ba565b34801561043057600080fd5b506101fd61043f366004613e3a565b6118bf565b34801561045057600080fd5b506102bd61045f366004613ece565b6118d4565b34801561047057600080fd5b5061039661047f366004613f00565b6118e1565b34801561049057600080fd5b5061023361049f366004613cd2565b611af2565b3480156104b057600080fd5b506102bd611d1c565b3480156104c557600080fd5b506103d8611d22565b3480156104da57600080fd5b506102336104e9366004613b66565b611d38565b3480156104fa57600080fd5b5061050e6105093660046140d0565b611fe0565b60405161020a9291906147ac565b34801561052857600080fd5b5061053c610537366004614105565b612010565b60405161020a919061439d565b34801561055557600080fd5b506102df6120ab565b34801561056a57600080fd5b506102df6120be565b60106020526000908152604090205460ff1681565b600954604051630e010cab60e11b81526001600160a01b0390911690631c021956906105b89033906004016142ca565b60006040518083038186803b1580156105d057600080fd5b505afa1580156105e4573d6000803e3d6000fd5b5050600d54835163ffffffff80831694506000935061060c92600160401b90041684036120ca565b90506000805b8263ffffffff168163ffffffff16101561071e576000858263ffffffff168151811061063a57fe5b6020026020010151905061064d816120ee565b63ffffffff86166000908152600f6020526040902054146106895760405162461bcd60e51b815260040161068090614495565b60405180910390fd5b600d54815163ffffffff600160401b90920482169116116106bc5760405162461bcd60e51b8152600401610680906145db565b600d54815163ffffffff90811691811684900316146106ed5760405162461bcd60e51b815260040161068090614517565b63ffffffff85166000908152600f602090815260408220919091550151600019909401939190910190600101610612565b50600d805463ffffffff191663ffffffff8581169190911791829055600160201b820481169116101561076d57600d8054600160201b63ffffffff82160267ffffffff00000000199091161790555b600e80546001600160401b038082168490031667ffffffffffffffff19909116179055600d546040517f6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3916107d29163ffffffff600160201b83048116921690614802565b60405180910390a150505050565b60ff821615806107f357508160ff166001145b61080f5760405162461bcd60e51b81526004016106809061463d565b3461082c5760405162461bcd60e51b8152600401610680906144b0565b6108c682600a60009054906101000a90046001600160a01b03166001600160a01b0316637af87d196040518163ffffffff1660e01b815260040160206040518083038186803b15801561087e57600080fd5b505afa158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b691906140b4565b336108c03461211e565b85612161565b5050565b61ffff81166000908152600c60209081526040808320338452825291829020825180840190935280546001600160801b0316808452600190910154918301919091526109285760405162461bcd60e51b815260040161068090614435565b600a60009054906101000a90046001600160a01b03166001600160a01b0316634c1b5afb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561097657600080fd5b505afa15801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae91906140b4565b61ffff166109c982602001514361228690919063ffffffff16565b116109e65760405162461bcd60e51b8152600401610680906144d8565b6109f5823383600001516122ac565b5061ffff166000908152600c60209081526040808320338452909152812080546001600160801b031916815560010155565b6000805160206148f68339815191525460018114610a4457600080fd5b60026000805160206148f68339815191525560ff85161580610a6957508460ff166001145b610a855760405162461bcd60e51b81526004016106809061463d565b6001600160681b038316610aab5760405162461bcd60e51b8152600401610680906144b0565b600954604051639bd7760960e01b81526000916001600160a01b031690639bd7760990610adc9088906004016142ca565b60206040518083038186803b158015610af457600080fd5b505afa158015610b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2c91906140b4565b6009546040516331d8687b60e01b81529192506001600160a01b0316906331d8687b90610b5d9084906004016147c5565b60206040518083038186803b158015610b7557600080fd5b505afa158015610b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bad9190613e1a565b15610bca5760405162461bcd60e51b815260040161068090614560565b6040516370a0823160e01b81526000906001600160a01b038716906370a0823190610bf99030906004016142ca565b60206040518083038186803b158015610c1157600080fd5b505afa158015610c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4991906140ed565b9050610c71863330610c63896001600160681b031661211e565b6001600160801b031661257a565b610c8d5760405162461bcd60e51b8152600401610680906143ff565b6040516370a0823160e01b81526000906001600160a01b038816906370a0823190610cbc9030906004016142ca565b60206040518083038186803b158015610cd457600080fd5b505afa158015610ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c91906140ed565b90506000610d22610d1d8385612286565b61211e565b9050600a60009054906101000a90046001600160a01b03166001600160a01b0316634c34a9826040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7257600080fd5b505afa158015610d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daa919061407c565b6001600160801b0316816001600160801b03161115610ddb5760405162461bcd60e51b8152600401610680906143e4565b610de8898533848a612161565b5050505060016000805160206148f6833981519152555050505050565b6000805160206148f68339815191525460018114610e2257600080fd5b505060016000805160206148f68339815191525550565b600090565b600d54600160201b900463ffffffff1681565b42600355565b6040805160608101825273e9b15a2d396b349abf60e53ec66bcf9af262d449808252602082018190529181019190915260016002600360005b600a60009054906101000a90046001600160a01b03166001600160a01b0316634a51a71f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1691906140ed565b8110156110625733858260038110610f2a57fe5b60200201516001600160a01b0316141561105a57600354610f4a57600080fd5b60008181526004602052604090205460ff1615610f6657600080fd5b6000818152600460205260409020805460ff191660019081179091556005805490910190819055841415610fd457621275006002541115610fcf5762127500600281905560405160008051602061491683398151915291610fc691614394565b60405180910390a15b611055565b8260055414156110105762093a806002541115610fcf5762093a80600281905560405160008051602061491683398151915291610fc691614394565b816005541415611055576203f4806002541115611055576203f48060028190556040516000805160206149168339815191529161104c91614394565b60405180910390a15b611062565b600101610e90565b5050505050565b600f6020526000908152604090205481565b6110836126a6565b600080808080808080806110998a8c018c613ad5565b98509850985098509850985098509850985088600a60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600960006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600860006101000a8154816001600160a01b0302191690836001600160a01b031602179055508260068190555085600d60006101000a81548163ffffffff021916908363ffffffff16021790555085600d60046101000a81548163ffffffff021916908363ffffffff16021790555085600d60086101000a81548163ffffffff021916908363ffffffff16021790555060006040518060c001604052808863ffffffff168152602001876001600160401b031681526020018681526020018581526020018481526020018381525090506111d3816120ee565b63ffffffff88166000908152600f602090815260409182902092909255600a54815163cc375fb760e01b815291516001600160a01b039091169263cc375fb79260048082019391829003018186803b15801561122e57600080fd5b505afa158015611242573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126691906140ed565b60028190556040516000805160206149168339815191529161128791614394565b60405180910390a1505050505050505050505050565b6000805160206148f683398151915254600181146112ba57600080fd5b60026000805160206148f683398151915255600954604051631e8d167560e21b81526001600160a01b0390911690637a3459d4906112fc9033906004016142ca565b60006040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b50505050600083516003026001600160401b038111801561134857600080fd5b50604051908082528060200260200182016040528015611372578160200160208202803683370190505b50905060005b84518161ffff1610156114cd576113aa858261ffff168151811061139857fe5b60200260200101518261ffff166126f7565b60065460001c828260030261ffff16815181106113c357fe5b602002602001018181525050848161ffff16815181106113df57fe5b60200260200101516060015160001c828260030260010161ffff168151811061140457fe5b602002602001018181525050848161ffff168151811061142057fe5b602002602001015160a0015160001c828260030260020161ffff168151811061144557fe5b602002602001018181525050848161ffff168151811061146157fe5b6020026020010151606001516006819055507f0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413858261ffff16815181106114a457fe5b6020026020010151600001516040516114bd91906147f1565b60405180910390a1600101611378565b50600854845160405163c50e826360e01b81526000926001600160a01b03169163c50e826391611504918891879190600401614353565b60206040518083038186803b15801561151c57600080fd5b505afa158015611530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115549190613e1a565b9050806115735760405162461bcd60e51b81526004016106809061467c565b61159a611580865161276f565b600d5463ffffffff600160201b909104811691906127ae16565b600d60046101000a81548163ffffffff021916908363ffffffff160217905550505060016000805160206148f683398151915255505050565b6000806001600160a01b0383161561166857600954604051639bd7760960e01b81526001600160a01b0390911690639bd77609906116159086906004016142ca565b60206040518083038186803b15801561162d57600080fd5b505afa158015611641573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166591906140b4565b90505b600b600061167686846127f6565b6001600160501b03191681526020810191909152604001600020546001600160801b0316949350505050565b6000805160206148f683398151915254600181146116bf57600080fd5b60026000805160206148f683398151915255600954604051635147001960e11b81526001600160a01b039091169063a28e0032906117019033906004016142ca565b60006040518083038186803b15801561171957600080fd5b505afa15801561172d573d6000803e3d6000fd5b5050505061173a836120ee565b600d5463ffffffff166000908152600f60205260409020541461176f5760405162461bcd60e51b8152600401610680906146f4565b60005b82518163ffffffff161015611834576117a484848363ffffffff168151811061179757fe5b6020026020010151612813565b6020810151600e805467ffffffffffffffff1981166001600160401b039182169093011691909117905593506117d9846120ee565b845163ffffffff166000908152600f60205260409081902091909155845190517f81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b626842491611824916147f1565b60405180910390a1600101611772565b505051600d805463ffffffff19811663ffffffff918216909301169190911790555060016000805160206148f683398151915255565b600d54600160601b90046001600160401b031681565b60025460035461188f916128d8565b42101561189b57600080fd5b6000805460ff19166001908117909155429055565b6118b8612917565b565b600190565b60116020526000908152604090205460ff1681565b805160208201205b919050565b60003330146119025760405162461bcd60e51b815260040161068090614661565b6040516370a0823160e01b81526000906001600160a01b038716906370a08231906119319030906004016142ca565b60206040518083038186803b15801561194957600080fd5b505afa15801561195d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198191906140ed565b60405163a9059cbb60e01b81529091506001600160a01b0387169063a9059cbb906119b29088908890600401614331565b602060405180830381600087803b1580156119cc57600080fd5b505af11580156119e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a049190613e1a565b506040516370a0823160e01b81526000906001600160a01b038816906370a0823190611a349030906004016142ca565b60206040518083038186803b158015611a4c57600080fd5b505afa158015611a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8491906140ed565b90506000611a928383612286565b905060008111611ab45760405162461bcd60e51b8152600401610680906145a4565b846001600160801b0316811115611add5760405162461bcd60e51b8152600401610680906144fc565b611ae68161211e565b98975050505050505050565b6000805160206148f68339815191525460018114611b0f57600080fd5b60026000805160206148f683398151915255600954604051630e010cab60e11b81526001600160a01b0390911690631c02195690611b519033906004016142ca565b60006040518083038186803b158015611b6957600080fd5b505afa158015611b7d573d6000803e3d6000fd5b505083516000925061ffff169050815b8163ffffffff168161ffff161015611c4657611bc4858261ffff1681518110611bb257fe5b60200260200101518261ffff16612a85565b848161ffff1681518110611bd457fe5b60200260200101516000015160200151830192507f24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb858261ffff1681518110611c1957fe5b60200260200101516000015160000151604051611c3691906147f1565b60405180910390a1600101611b8d565b50600d8054600e805467ffffffffffffffff1981166001600160401b0391821687900382161790915567ffffffffffffffff60a01b1967ffffffffffffffff60601b198316600160601b9384900483168701831690930292909217918216600160a01b9283900482168690039091169091021790558351611ce490611cca9061276f565b600d5463ffffffff600160401b909104811691906127ae16565b600d60086101000a81548163ffffffff021916908363ffffffff160217905550505060016000805160206148f6833981519152555050565b60065481565b600d54600160a01b90046001600160401b031681565b6000805160206148f68339815191525460018114611d5557600080fd5b60026000805160206148f6833981519152556001600160a01b038316611e8557600a5460408051637af87d1960e01b81529051611dfa926001600160a01b031691637af87d19916004808301926020929190829003018186803b158015611dbb57600080fd5b505afa158015611dcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df391906140b4565b8386612cff565b6000846001600160a01b0316836001600160801b0316604051611e1c90614264565b60006040518083038185875af1925050503d8060008114611e59576040519150601f19603f3d011682016040523d82523d6000602084013e611e5e565b606091505b5050905080611e7f5760405162461bcd60e51b81526004016106809061470f565b50611fc8565b600954604051639bd7760960e01b81526000916001600160a01b031690639bd7760990611eb69087906004016142ca565b60206040518083038186803b158015611ece57600080fd5b505afa158015611ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0691906140b4565b90506000611f1486836127f6565b6001600160501b031981166000908152600b6020526040808220549051634770d3a760e11b81529293506001600160801b0316913090638ee1a74e90611f64908a908c908b9088906004016143b0565b602060405180830381600087803b158015611f7e57600080fd5b505af1158015611f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb6919061407c565b9050611fc384828a612cff565b505050505b60016000805160206148f68339815191525550505050565b600c602090815260009283526040808420909152908252902080546001909101546001600160801b039091169082565b60126020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156120a35780601f10612078576101008083540402835291602001916120a3565b820191906000526020600020905b81548152906001019060200180831161208657829003601f168201915b505050505081565b600d54600160401b900463ffffffff1681565b600d5463ffffffff1681565b60008163ffffffff168363ffffffff16106120e557816120e7565b825b9392505050565b6000816040516020016121019190614745565b604051602081830303815290604052805190602001209050919050565b6000600160801b821061215d576040805162461bcd60e51b8152602060048201526002602482015261189b60f11b604482015290519081900360640190fd5b5090565b6040805160c0810182526002808252600a54835163085e1f4d60e41b815293519198506000936020808501936001600160a01b03909316926385e1f4d0926004808201939291829003018186803b1580156121bb57600080fd5b505afa1580156121cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f3919061413d565b60ff16815261ffff871660208201526001600160a01b03861660408201526001600160801b03851660608201526080018390529050600061223382612da5565b9050612240600182612df0565b7f962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b87878587604051612275949392919061482d565b60405180910390a150505050505050565b60006120e78383604051806040016040528060018152602001603b60f91b815250612fdd565b600a5460408051637af87d1960e01b815290516000926001600160a01b031691637af87d19916004808301926020929190829003018186803b1580156122f157600080fd5b505afa158015612305573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232991906140b4565b61ffff168461ffff161415612354578261234c816001600160801b038516613074565b9150506124dd565b60095460405163dbfc296760e01b81526000916001600160a01b03169063dbfc2967906123859088906004016147c5565b60206040518083038186803b15801561239d57600080fd5b505afa1580156123b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d59190613ab9565b600a546040805163c701f95560e01b815290519293503092638ee1a74e926001600160a01b03169163c701f955916004808301926020929190829003018186803b15801561242257600080fd5b505afa158015612436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245a91906140ed565b838787886040518663ffffffff1660e01b815260040161247d94939291906143b0565b602060405180830381600088803b15801561249757600080fd5b5087f1935050505080156124c8575060408051601f3d908101601f191682019092526124c59181019061407c565b60015b6124d557600091506124db565b50600191505b505b8015612521577ff4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a8079393315484836040516125149291906147d4565b60405180910390a1612574565b600061252d84866127f6565b90506125398184613162565b7fd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688858460405161256a9291906147d4565b60405180910390a1505b50505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094859485948b16939092909182918083835b602083106126005780518252601f1990920191602091820191016125e1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612662576040519150601f19603f3d011682016040523d82523d6000602084013e612667565b606091505b50915091506000815160001480612691575081806020019051602081101561268e57600080fd5b50515b9050828015611ae65750979650505050505050565b6000805160206148f68339815191528054600190915580156126f4576040805162461bcd60e51b815260206004820152600260248201526118a160f11b604482015290519081900360640190fd5b50565b815163ffffffff166000908152600f6020526040902054612717836120ee565b146127345760405162461bcd60e51b815260040161068090614541565b600d548251600160201b90910463ffffffff908116830160010181169116146108c65760405162461bcd60e51b81526004016106809061472a565b6000600160201b821061215d576040805162461bcd60e51b8152602060048201526002602482015261062760f31b604482015290519081900360640190fd5b600082820163ffffffff80851690821610156120e7576040805162461bcd60e51b8152602060048201526002602482015261189960f11b604482015290519081900360640190fd5b60a01b61ffff60a01b166001600160a01b03919091161760501b90565b61281b6138fc565b8251825163ffffffff9081166001909201161461284a5760405162461bcd60e51b8152600401610680906146a3565b8260800151826040015110156128725760405162461bcd60e51b81526004016106809061441a565b60008061287e84613200565b915091506040518060c00160405280856000015163ffffffff168152602001826001600160401b03168152602001838152602001856020015181526020018560400151815260200185606001518152509250505092915050565b6000828201838110156120e7576040805162461bcd60e51b81526020600482015260026024820152610c4d60f21b604482015290519081900360640190fd5b6000805460ff19168155600155600a546040805163cc375fb760e01b815290516001600160a01b039092169163cc375fb791600480820192602092909190829003018186803b15801561296957600080fd5b505afa15801561297d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a191906140ed565b6002819055604051600080516020614916833981519152916129c291614394565b60405180910390a1600060038190555b600a60009054906101000a90046001600160a01b03166001600160a01b0316634a51a71f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a2057600080fd5b505afa158015612a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5891906140ed565b811015612a7d576000818152600460205260409020805460ff191690556001016129d2565b506000600555565b81515163ffffffff166000908152600f60205260409020548251612aa8906120ee565b14612ac55760405162461bcd60e51b815260040161068090614541565b600d5482515163ffffffff600160201b909204821691161115612afa5760405162461bcd60e51b81526004016106809061447a565b600d54825151600160401b90910463ffffffff90811683016001018116911614612b365760405162461bcd60e51b81526004016106809061472a565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060005b8360200151518163ffffffff161015612cd557600084602001518263ffffffff1681518110612b8557fe5b60200260200101519050600081600081518110612b9e57fe5b016020015160f81c6008811115612bb157fe5b90506008816008811115612bc157fe5b1415612ca4576000612bd28361335b565b9050600a60009054906101000a90046001600160a01b03166001600160a01b031663437da02f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c2257600080fd5b505afa158015612c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5a9190614121565b63ffffffff16816040015161ffff161115612c875760405162461bcd60e51b815260040161068090614605565b612c9e816040015182608001518360a001516122ac565b50612cbc565b60405162461bcd60e51b815260040161068090614589565b612cc684836133ff565b93505050806001019050612b5a565b508251604001518114612cfa5760405162461bcd60e51b8152600401610680906146be565b505050565b6000612d0b82856127f6565b6001600160501b031981166000908152600b60205260409020549091506001600160801b0316612d3b818561340e565b6001600160501b031983166000908152600b60205260409081902080546001600160801b0319166001600160801b039390931692909217909155517ff4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a807939331549061256a90879087906147d4565b6060816000015182602001518360400151846060015185608001518660a00151604051602001612dda96959493929190614267565b6040516020818303038152906040529050919050565b600a54604080516371175ff960e01b815290516000926001600160a01b0316916371175ff9916004808301926020929190829003018186803b158015612e3557600080fd5b505afa158015612e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6d91906140ed565b600d5443919091019150600160601b81046001600160401b03908116600160a01b90920416016000612e9e84613435565b90506040518060600160405280826bffffffffffffffffffffffff19168152602001846001600160401b03168152602001866008811115612edb57fe5b90526001600160401b038084166000908152600760209081526040918290208451815492860151909416600160a01b0267ffffffffffffffff60a01b1960609590951c6001600160a01b03199093169290921793909316178083559083015190829060ff60e01b1916600160e01b836008811115612f5557fe5b02179055509050507fd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b683033838787876001600160401b0316604051612f9d9594939291906142de565b60405180910390a15050600d805460016001600160401b03600160a01b808404821692909201160267ffffffffffffffff60a01b19909116179055505050565b6000818484111561306c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613031578181015183820152602001613019565b50505050905090810190601f16801561305e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600080836001600160a01b0316600a60009054906101000a90046001600160a01b03166001600160a01b031663c701f9556040518163ffffffff1660e01b815260040160206040518083038186803b1580156130cf57600080fd5b505afa1580156130e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310791906140ed565b8460405161311490614264565b600060405180830381858888f193505050503d8060008114613152576040519150601f19603f3d011682016040523d82523d6000602084013e613157565b606091505b509095945050505050565b6001600160501b031982166000908152600b6020526040908190205481518083019092526001600160801b0316908061319b8385613443565b6001600160801b03908116825260ff60209283018190526001600160501b03199096166000908152600b835260409020835181549490930151909616600160801b0260ff60801b19929091166001600160801b03199093169290921716179092555050565b6080810151600e54600d547fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470926000929091600160601b90046001600160401b0390811691160182805b8660a0015161ffff168161ffff16101561335257600084838151811061326c57fe5b016020015160f81c600881111561327f57fe5b9050600181600881111561328f57fe5b14806132a6575060028160088111156132a457fe5b145b156132ee5760006132b98685604861348e565b905060006132c68261354a565b90506132d4818988016135e2565b6001909701966132e58560486128d8565b94505050613349565b60088160088111156132fc57fe5b14156133315760006133108685602c61348e565b905061331d84602c6128d8565b935061332988826133ff565b975050613349565b60405162461bcd60e51b8152600401610680906146d9565b5060010161324a565b50505050915091565b6133636138fc565b600161336f8382613688565b60ff166020840152905061338383826136b4565b61ffff166040840152905061339883826136cd565b63ffffffff16606084015290506133af83826136dd565b6001600160a01b0316608084015290506133c983826136ed565b6001600160801b031660a08401529050602c81146133f95760405162461bcd60e51b8152600401610680906145c0565b50919050565b80519181526020909101902090565b60006120e7838360405180604001604052806002815260200161616160f01b8152506136fd565b805160209091012060601b90565b60008282016001600160801b0380851690821610156120e7576040805162461bcd60e51b8152602060048201526002602482015261189960f11b604482015290519081900360640190fd5b6060818301845110156134cc576040805162461bcd60e51b81526020600482015260016024820152602d60f91b604482015290519081900360640190fd5b6000826001600160401b03811180156134e457600080fd5b506040519080825280601f01601f19166020018201604052801561350f576020820181803683370190505b509050821561354257602081018381016020860187015b8183101561353e578051835260209283019201613526565b5050505b949350505050565b6135526138fc565b600161355e8382613688565b60ff166020840152905061357283826136b4565b61ffff166040840152905061358783826136dd565b6001600160a01b0316606084015290506135a183826136ed565b6001600160801b0316608084015290506135bb8382613762565b60a08401529050604881146133f95760405162461bcd60e51b8152600401610680906145c0565b6001600160401b038116600090815260076020526040902054600160e01b900460ff16600181600881111561361357fe5b148061362a5750600281600881111561362857fe5b145b6136465760405162461bcd60e51b81526004016106809061445f565b6001600160401b03821660009081526007602052604090205460601b61366c8482613772565b6125745760405162461bcd60e51b815260040161068090614622565b60008082600101915083838151811061369d57fe5b602001015160f81c60f81b60f81c90509250929050565b6002810160006136c484846137a2565b90509250929050565b6004810160006136c484846137f0565b6014810160006136c48484613833565b6010810160006136c48484613876565b6000836001600160801b0316836001600160801b03161115829061306c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315613031578181015183820152602001613019565b6020810160006136c484846138b9565b60006001600160601b0319821661379061378b85612da5565b613435565b6001600160601b031916149392505050565b60008082600201905080845110156137e5576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b929092015192915050565b60008082600401905080845110156137e5576040805162461bcd60e51b81526020600482015260016024820152602b60f91b604482015290519081900360640190fd5b60008082601401905080845110156137e5576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b60008082601001905080845110156137e5576040805162461bcd60e51b81526020600482015260016024820152605760f81b604482015290519081900360640190fd5b60008082602001905080845110156137e5576040805162461bcd60e51b81526020600482015260016024820152605960f81b604482015290519081900360640190fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600082601f830112613941578081fd5b813560206139566139518361487d565b61485a565b8281528181019085830160c080860288018501891015613974578687fd5b865b8681101561399a576139888a84613a0c565b85529385019391810191600101613976565b509198975050505050505050565b600082601f8301126139b8578081fd5b81356001600160401b038111156139cb57fe5b6139de601f8201601f191660200161485a565b8181528460208386010111156139f2578283fd5b816020850160208301379081016020019190915292915050565b600060c08284031215613a1d578081fd5b60405160c081018181106001600160401b0382111715613a3957fe5b6040529050808235613a4a816148d4565b8152613a5860208401613aa2565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b80356118dc816148c4565b80356118dc816148d4565b80356001600160401b03811681146118dc57600080fd5b600060208284031215613aca578081fd5b81516120e78161489a565b60008060008060008060008060006101208a8c031215613af3578485fd5b8935613afe8161489a565b985060208a0135613b0e8161489a565b975060408a0135613b1e8161489a565b965060608a0135613b2e816148d4565b9550613b3c60808b01613aa2565b989b979a50959894979660a0860135965060c08601359560e0810135955061010001359350915050565b600080600060608486031215613b7a578081fd5b8335613b858161489a565b92506020840135613b958161489a565b91506040840135613ba5816148af565b809150509250925092565b60008060408385031215613bc2578182fd5b8235613bcd8161489a565b91506020830135613bdd8161489a565b809150509250929050565b600060208284031215613bf9578081fd5b81356001600160401b03811115613c0e578182fd5b61354284828501613931565b60008060408385031215613c2c578182fd5b82356001600160401b0380821115613c42578384fd5b613c4e86838701613931565b9350602091508185013581811115613c64578384fd5b85019050601f81018613613c76578283fd5b8035613c846139518261487d565b81815283810190838501858402850186018a1015613ca0578687fd5b8694505b83851015613cc2578035835260019490940193918501918501613ca4565b5080955050505050509250929050565b600060208284031215613ce3578081fd5b6001600160401b038083351115613cf8578182fd5b8235830184601f820112613d0a578283fd5b613d17613951823561487d565b81358152602080820191908301855b8435811015613e0d578135850160e0818b03601f19011215613d46578788fd5b6040518060408201108860408301111715613d5d57fe5b60408101604052613d718b60208401613a0c565b81528760e08301351115613d83578889fd5b60e0820135820191508a603f830112613d9a578889fd5b613daa613951602084013561487d565b6020838101358252810190604084018b5b6020860135811015613dec57613dd78f604084358901016139a8565b84526020938401939190910190600101613dbb565b50506020838101919091529187525094850194929092019150600101613d26565b5090979650505050505050565b600060208284031215613e2b578081fd5b815180151581146120e7578182fd5b600060208284031215613e4b578081fd5b81356001600160601b0319811681146120e7578182fd5b60008060208385031215613e74578182fd5b82356001600160401b0380821115613e8a578384fd5b818501915085601f830112613e9d578384fd5b813581811115613eab578485fd5b866020828501011115613ebc578485fd5b60209290920196919550909350505050565b600060208284031215613edf578081fd5b81356001600160401b03811115613ef4578182fd5b613542848285016139a8565b60008060008060808587031215613f15578182fd5b8435613f208161489a565b93506020850135613f308161489a565b92506040850135613f40816148af565b91506060850135613f50816148af565b939692955090935050565b60008060e08385031215613f6d578182fd5b613f778484613a0c565b915060c08301356001600160401b0380821115613f92578283fd5b818501915085601f830112613fa5578283fd5b81356020613fb56139518361487d565b82815281810190858301875b8581101561406b578135880160c0818e03601f19011215613fe057898afd5b6040805160c081018181108b82111715613ff657fe5b8252614003838901613a97565b815281830135888201526060830135828201526080830135606082015260a0830135915089821115614033578b8cfd5b6140418f89848601016139a8565b608082015261405260c08401613a8c565b60a0820152865250509284019290840190600101613fc1565b50979a909950975050505050505050565b60006020828403121561408d578081fd5b81516120e7816148af565b6000602082840312156140a9578081fd5b81356120e7816148c4565b6000602082840312156140c5578081fd5b81516120e7816148c4565b600080604083850312156140e2578182fd5b8235613bcd816148c4565b6000602082840312156140fe578081fd5b5051919050565b600060208284031215614116578081fd5b81356120e7816148d4565b600060208284031215614132578081fd5b81516120e7816148d4565b60006020828403121561414e578081fd5b81516120e7816148e6565b6000806040838503121561416b578182fd5b8235614176816148e6565b946020939093013593505050565b60008060008060808587031215614199578182fd5b84356141a4816148e6565b935060208501356141b48161489a565b925060408501356001600160681b03811681146141cf578283fd5b9396929550929360600135925050565b6000815180845260208085019450808401835b8381101561420e578151875295820195908201906001016141f2565b509495945050505050565b60008151808452815b8181101561423e57602081850181015186830182015201614222565b8181111561424f5782602083870101525b50601f01601f19169290920160200192915050565b90565b60f896871b6001600160f81b031990811682529590961b909416600186015260f09290921b6001600160f01b031916600285015260601b6001600160601b031916600484015260801b6001600160801b0319166018830152602882015260480190565b6001600160a01b0391909116815260200190565b6001600160a01b03861681526001600160401b038516602082015260006009851061430557fe5b84604083015260a0606083015261431f60a0830185614219565b90508260808301529695505050505050565b6001600160a01b039290921682526001600160801b0316602082015260400190565b60006060825261436660608301866141df565b828103602084015261437881866141df565b915050826040830152949350505050565b901515815260200190565b90815260200190565b6000602082526120e76020830184614219565b6001600160a01b0394851681529290931660208301526001600160801b039081166040830152909116606082015260800190565b6020808252600190820152604360f81b604082015260600190565b6020808252600190820152606360f81b604082015260600190565b6020808252600190820152606760f81b604082015260600190565b60208082526010908201526f6e6f2062616c616e636520666f72207560801b604082015260600190565b6020808252600190820152600960fb1b604082015260600190565b6020808252600190820152606160f81b604082015260600190565b6020808252600190820152603960f91b604082015260600190565b6020808252600e908201526d1a5b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b6020808252600a90820152696e6f742065787069727960b01b604082015260600190565b6020808252600190820152603760f81b604082015260600190565b60208082526010908201526f6e6f74206c617465737420626c6f636b60801b604082015260600190565b602080825260059082015264065786531360dc1b604082015260600190565b6020808252600f908201526e185cdcd95d081a5cc81c185d5cd959608a1b604082015260600190565b6020808252600190820152601b60fa1b604082015260600190565b602080825260029082015261633160f01b604082015260600190565b6020808252600190820152602760f91b604082015260600190565b60208082526010908201526f185b1c9958591e48195e1958dd5d195960821b604082015260600190565b6020808252600390820152626d663160e81b604082015260600190565b6020808252600190820152604960f81b604082015260600190565b6020808252600a90820152690696e76616c6964206f760b41b604082015260600190565b6020808252600190820152603560f81b604082015260600190565b6020808252600d908201526c34b73b30b634b210383937b7b360991b604082015260600190565b6020808252600190820152603360f91b604082015260600190565b6020808252600190820152606d60f81b604082015260600190565b6020808252600190820152602360f91b604082015260600190565b6020808252600190820152606960f81b604082015260600190565b6020808252600190820152601960fa1b604082015260600190565b6020808252600190820152606b60f81b604082015260600190565b600060c08201905063ffffffff83511682526001600160401b03602084015116602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b6001600160801b0391909116815260200190565b6001600160801b03929092168252602082015260400190565b61ffff91909116815260200190565b61ffff9290921682526001600160801b0316602082015260400190565b63ffffffff91909116815260200190565b63ffffffff92831681529116602082015260400190565b6001600160401b0391909116815260200190565b60ff94909416845261ffff92909216602084015260408301526001600160801b0316606082015260800190565b6040518181016001600160401b038111828210171561487557fe5b604052919050565b60006001600160401b0382111561489057fe5b5060209081020190565b6001600160a01b03811681146126f457600080fd5b6001600160801b03811681146126f457600080fd5b61ffff811681146126f457600080fd5b63ffffffff811681146126f457600080fd5b60ff811681146126f457600080fdfe8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4f2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483a2646970667358221220cb6bfaea896b9dc17b2625a5dbcf655061b3bdeee5e218b6af6710b0ddaf05ed64736f6c63430007060033"

// DeployZecrey deploys a new Ethereum zecrey, binding an instance of Zecrey to it.
func DeployZecrey(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Zecrey, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ZecreyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// Zecrey is an auto generated Go binding around an Ethereum zecrey.
type Zecrey struct {
	ZecreyCaller     // Read-only binding to the zecrey
	ZecreyTransactor // Write-only binding to the zecrey
	ZecreyFilterer   // Log filterer for zecrey events
}

// ZecreyCaller is an auto generated read-only Go binding around an Ethereum zecrey.
type ZecreyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyTransactor is an auto generated write-only Go binding around an Ethereum zecrey.
type ZecreyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyFilterer is an auto generated log filtering Go binding around an Ethereum zecrey events.
type ZecreyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreySession is an auto generated Go binding around an Ethereum zecrey,
// with pre-set call and transact options.
type ZecreySession struct {
	Contract     *Zecrey           // Generic zecrey binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyCallerSession is an auto generated read-only Go binding around an Ethereum zecrey,
// with pre-set call options.
type ZecreyCallerSession struct {
	Contract *ZecreyCaller // Generic zecrey caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ZecreyTransactorSession is an auto generated write-only Go binding around an Ethereum zecrey,
// with pre-set transact options.
type ZecreyTransactorSession struct {
	Contract     *ZecreyTransactor // Generic zecrey transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyRaw is an auto generated low-level Go binding around an Ethereum zecrey.
type ZecreyRaw struct {
	Contract *Zecrey // Generic zecrey binding to access the raw methods on
}

// ZecreyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum zecrey.
type ZecreyCallerRaw struct {
	Contract *ZecreyCaller // Generic read-only zecrey binding to access the raw methods on
}

// ZecreyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum zecrey.
type ZecreyTransactorRaw struct {
	Contract *ZecreyTransactor // Generic write-only zecrey binding to access the raw methods on
}

// NewZecrey creates a new instance of Zecrey, bound to a specific deployed zecrey.
func NewZecrey(address common.Address, backend bind.ContractBackend) (*Zecrey, error) {
	contract, err := bindZecrey(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// NewZecreyCaller creates a new read-only instance of Zecrey, bound to a specific deployed zecrey.
func NewZecreyCaller(address common.Address, caller bind.ContractCaller) (*ZecreyCaller, error) {
	contract, err := bindZecrey(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyCaller{contract: contract}, nil
}

// NewZecreyTransactor creates a new write-only instance of Zecrey, bound to a specific deployed zecrey.
func NewZecreyTransactor(address common.Address, transactor bind.ContractTransactor) (*ZecreyTransactor, error) {
	contract, err := bindZecrey(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyTransactor{contract: contract}, nil
}

// NewZecreyFilterer creates a new log filterer instance of Zecrey, bound to a specific deployed zecrey.
func NewZecreyFilterer(address common.Address, filterer bind.ContractFilterer) (*ZecreyFilterer, error) {
	contract, err := bindZecrey(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZecreyFilterer{contract: contract}, nil
}

// bindZecrey binds a generic wrapper to an already deployed zecrey.
func bindZecrey(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) zecrey method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.ZecreyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the zecrey, calling
// its default method if one is available.
func (_Zecrey *ZecreyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) zecrey method with params as input values.
func (_Zecrey *ZecreyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) zecrey method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the zecrey, calling
// its default method if one is available.
func (_Zecrey *ZecreyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) zecrey method with params as input values.
func (_Zecrey *ZecreyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transact(opts, method, params...)
}

// AccountRoot is a free data retrieval call binding the zecrey method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCaller) AccountRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "accountRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccountRoot is a free data retrieval call binding the zecrey method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreySession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// AccountRoot is a free data retrieval call binding the zecrey method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// BlockOnchainOpsPubData is a free data retrieval call binding the zecrey method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreyCaller) BlockOnchainOpsPubData(opts *bind.CallOpts, arg0 uint32) ([]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "blockOnchainOpsPubData", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// BlockOnchainOpsPubData is a free data retrieval call binding the zecrey method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreySession) BlockOnchainOpsPubData(arg0 uint32) ([]byte, error) {
	return _Zecrey.Contract.BlockOnchainOpsPubData(&_Zecrey.CallOpts, arg0)
}

// BlockOnchainOpsPubData is a free data retrieval call binding the zecrey method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreyCallerSession) BlockOnchainOpsPubData(arg0 uint32) ([]byte, error) {
	return _Zecrey.Contract.BlockOnchainOpsPubData(&_Zecrey.CallOpts, arg0)
}

// ComputeOnchainOpsHash is a free data retrieval call binding the zecrey method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreyCaller) ComputeOnchainOpsHash(opts *bind.CallOpts, _onchainOpsPubData []byte) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "computeOnchainOpsHash", _onchainOpsPubData)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeOnchainOpsHash is a free data retrieval call binding the zecrey method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreySession) ComputeOnchainOpsHash(_onchainOpsPubData []byte) ([32]byte, error) {
	return _Zecrey.Contract.ComputeOnchainOpsHash(&_Zecrey.CallOpts, _onchainOpsPubData)
}

// ComputeOnchainOpsHash is a free data retrieval call binding the zecrey method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreyCallerSession) ComputeOnchainOpsHash(_onchainOpsPubData []byte) ([32]byte, error) {
	return _Zecrey.Contract.ComputeOnchainOpsHash(&_Zecrey.CallOpts, _onchainOpsPubData)
}

// FirstPriorityRequestId is a free data retrieval call binding the zecrey method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreyCaller) FirstPriorityRequestId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "firstPriorityRequestId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstPriorityRequestId is a free data retrieval call binding the zecrey method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreySession) FirstPriorityRequestId() (uint64, error) {
	return _Zecrey.Contract.FirstPriorityRequestId(&_Zecrey.CallOpts)
}

// FirstPriorityRequestId is a free data retrieval call binding the zecrey method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreyCallerSession) FirstPriorityRequestId() (uint64, error) {
	return _Zecrey.Contract.FirstPriorityRequestId(&_Zecrey.CallOpts)
}

// GetNoticePeriod is a free data retrieval call binding the zecrey method 0x2a3174f4.
//
// Solidity: function getNoticePeriod() pure returns(uint256)
func (_Zecrey *ZecreyCaller) GetNoticePeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getNoticePeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNoticePeriod is a free data retrieval call binding the zecrey method 0x2a3174f4.
//
// Solidity: function getNoticePeriod() pure returns(uint256)
func (_Zecrey *ZecreySession) GetNoticePeriod() (*big.Int, error) {
	return _Zecrey.Contract.GetNoticePeriod(&_Zecrey.CallOpts)
}

// GetNoticePeriod is a free data retrieval call binding the zecrey method 0x2a3174f4.
//
// Solidity: function getNoticePeriod() pure returns(uint256)
func (_Zecrey *ZecreyCallerSession) GetNoticePeriod() (*big.Int, error) {
	return _Zecrey.Contract.GetNoticePeriod(&_Zecrey.CallOpts)
}

// GetPendingBalance is a free data retrieval call binding the zecrey method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreyCaller) GetPendingBalance(opts *bind.CallOpts, _address common.Address, _assetAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getPendingBalance", _address, _assetAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPendingBalance is a free data retrieval call binding the zecrey method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreySession) GetPendingBalance(_address common.Address, _assetAddr common.Address) (*big.Int, error) {
	return _Zecrey.Contract.GetPendingBalance(&_Zecrey.CallOpts, _address, _assetAddr)
}

// GetPendingBalance is a free data retrieval call binding the zecrey method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreyCallerSession) GetPendingBalance(_address common.Address, _assetAddr common.Address) (*big.Int, error) {
	return _Zecrey.Contract.GetPendingBalance(&_Zecrey.CallOpts, _address, _assetAddr)
}

// IsReadyForUpgrade is a free data retrieval call binding the zecrey method 0x8773334c.
//
// Solidity: function isReadyForUpgrade() view returns(bool)
func (_Zecrey *ZecreyCaller) IsReadyForUpgrade(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "isReadyForUpgrade")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsReadyForUpgrade is a free data retrieval call binding the zecrey method 0x8773334c.
//
// Solidity: function isReadyForUpgrade() view returns(bool)
func (_Zecrey *ZecreySession) IsReadyForUpgrade() (bool, error) {
	return _Zecrey.Contract.IsReadyForUpgrade(&_Zecrey.CallOpts)
}

// IsReadyForUpgrade is a free data retrieval call binding the zecrey method 0x8773334c.
//
// Solidity: function isReadyForUpgrade() view returns(bool)
func (_Zecrey *ZecreyCallerSession) IsReadyForUpgrade() (bool, error) {
	return _Zecrey.Contract.IsReadyForUpgrade(&_Zecrey.CallOpts)
}

// OnchainOpsCheck is a free data retrieval call binding the zecrey method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsCheck(opts *bind.CallOpts, arg0 [20]byte) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOpsCheck", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsCheck is a free data retrieval call binding the zecrey method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsCheck(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsCheck(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsCheck is a free data retrieval call binding the zecrey method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsCheck(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsCheck(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsExecuted is a free data retrieval call binding the zecrey method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsExecuted(opts *bind.CallOpts, arg0 [20]byte) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOpsExecuted", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsExecuted is a free data retrieval call binding the zecrey method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsExecuted(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsExecuted(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsExecuted is a free data retrieval call binding the zecrey method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsExecuted(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsExecuted(&_Zecrey.CallOpts, arg0)
}

// StoredBlockHeaderHashes is a free data retrieval call binding the zecrey method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCaller) StoredBlockHeaderHashes(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "storedBlockHeaderHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StoredBlockHeaderHashes is a free data retrieval call binding the zecrey method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreySession) StoredBlockHeaderHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHeaderHashes(&_Zecrey.CallOpts, arg0)
}

// StoredBlockHeaderHashes is a free data retrieval call binding the zecrey method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) StoredBlockHeaderHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHeaderHashes(&_Zecrey.CallOpts, arg0)
}

// TotalBlocksCommitted is a free data retrieval call binding the zecrey method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksCommitted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksCommitted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksCommitted is a free data retrieval call binding the zecrey method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksCommitted is a free data retrieval call binding the zecrey method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksExecuted is a free data retrieval call binding the zecrey method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksExecuted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksExecuted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksExecuted is a free data retrieval call binding the zecrey method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksExecuted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksExecuted(&_Zecrey.CallOpts)
}

// TotalBlocksExecuted is a free data retrieval call binding the zecrey method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksExecuted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksExecuted(&_Zecrey.CallOpts)
}

// TotalBlocksVerified is a free data retrieval call binding the zecrey method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksVerified(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksVerified")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksVerified is a free data retrieval call binding the zecrey method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksVerified() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksVerified(&_Zecrey.CallOpts)
}

// TotalBlocksVerified is a free data retrieval call binding the zecrey method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksVerified() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksVerified(&_Zecrey.CallOpts)
}

// TotalOpenPriorityRequests is a free data retrieval call binding the zecrey method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreyCaller) TotalOpenPriorityRequests(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalOpenPriorityRequests")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// TotalOpenPriorityRequests is a free data retrieval call binding the zecrey method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreySession) TotalOpenPriorityRequests() (uint64, error) {
	return _Zecrey.Contract.TotalOpenPriorityRequests(&_Zecrey.CallOpts)
}

// TotalOpenPriorityRequests is a free data retrieval call binding the zecrey method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreyCallerSession) TotalOpenPriorityRequests() (uint64, error) {
	return _Zecrey.Contract.TotalOpenPriorityRequests(&_Zecrey.CallOpts)
}

// UnhandledBalances is a free data retrieval call binding the zecrey method 0xe1d730d9.
//
// Solidity: function unhandledBalances(uint16 , address ) view returns(uint128 unhandledBalance, uint256 blockNumber)
func (_Zecrey *ZecreyCaller) UnhandledBalances(opts *bind.CallOpts, arg0 uint16, arg1 common.Address) (struct {
	UnhandledBalance *big.Int
	BlockNumber      *big.Int
}, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "unhandledBalances", arg0, arg1)

	outstruct := new(struct {
		UnhandledBalance *big.Int
		BlockNumber      *big.Int
	})

	outstruct.UnhandledBalance = out[0].(*big.Int)
	outstruct.BlockNumber = out[1].(*big.Int)

	return *outstruct, err

}

// UnhandledBalances is a free data retrieval call binding the zecrey method 0xe1d730d9.
//
// Solidity: function unhandledBalances(uint16 , address ) view returns(uint128 unhandledBalance, uint256 blockNumber)
func (_Zecrey *ZecreySession) UnhandledBalances(arg0 uint16, arg1 common.Address) (struct {
	UnhandledBalance *big.Int
	BlockNumber      *big.Int
}, error) {
	return _Zecrey.Contract.UnhandledBalances(&_Zecrey.CallOpts, arg0, arg1)
}

// UnhandledBalances is a free data retrieval call binding the zecrey method 0xe1d730d9.
//
// Solidity: function unhandledBalances(uint16 , address ) view returns(uint128 unhandledBalance, uint256 blockNumber)
func (_Zecrey *ZecreyCallerSession) UnhandledBalances(arg0 uint16, arg1 common.Address) (struct {
	UnhandledBalance *big.Int
	BlockNumber      *big.Int
}, error) {
	return _Zecrey.Contract.UnhandledBalances(&_Zecrey.CallOpts, arg0, arg1)
}

// TransferERC20 is a paid mutator transaction binding the zecrey method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactor) TransferERC20(opts *bind.TransactOpts, _token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "_transferERC20", _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the zecrey method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreySession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the zecrey method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactorSession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// CommitBlocks is a paid mutator transaction binding the zecrey method 0x5d85bc70.
//
// Solidity: function commitBlocks((uint32,uint64,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,uint256,bytes32,bytes,uint16)[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactor) CommitBlocks(opts *bind.TransactOpts, _lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "commitBlocks", _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the zecrey method 0x5d85bc70.
//
// Solidity: function commitBlocks((uint32,uint64,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,uint256,bytes32,bytes,uint16)[] _newBlocksData) returns()
func (_Zecrey *ZecreySession) CommitBlocks(_lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the zecrey method 0x5d85bc70.
//
// Solidity: function commitBlocks((uint32,uint64,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,uint256,bytes32,bytes,uint16)[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactorSession) CommitBlocks(_lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// CutUpgradeNoticePeriod is a paid mutator transaction binding the zecrey method 0x3e71e1e7.
//
// Solidity: function cutUpgradeNoticePeriod() returns()
func (_Zecrey *ZecreyTransactor) CutUpgradeNoticePeriod(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "cutUpgradeNoticePeriod")
}

// CutUpgradeNoticePeriod is a paid mutator transaction binding the zecrey method 0x3e71e1e7.
//
// Solidity: function cutUpgradeNoticePeriod() returns()
func (_Zecrey *ZecreySession) CutUpgradeNoticePeriod() (*types.Transaction, error) {
	return _Zecrey.Contract.CutUpgradeNoticePeriod(&_Zecrey.TransactOpts)
}

// CutUpgradeNoticePeriod is a paid mutator transaction binding the zecrey method 0x3e71e1e7.
//
// Solidity: function cutUpgradeNoticePeriod() returns()
func (_Zecrey *ZecreyTransactorSession) CutUpgradeNoticePeriod() (*types.Transaction, error) {
	return _Zecrey.Contract.CutUpgradeNoticePeriod(&_Zecrey.TransactOpts)
}

// DepositOrLockERC20 is a paid mutator transaction binding the zecrey method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _txType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreyTransactor) DepositOrLockERC20(opts *bind.TransactOpts, _txType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "depositOrLockERC20", _txType, _token, _amount, _accountName)
}

// DepositOrLockERC20 is a paid mutator transaction binding the zecrey method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _txType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreySession) DepositOrLockERC20(_txType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockERC20(&_Zecrey.TransactOpts, _txType, _token, _amount, _accountName)
}

// DepositOrLockERC20 is a paid mutator transaction binding the zecrey method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _txType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreyTransactorSession) DepositOrLockERC20(_txType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockERC20(&_Zecrey.TransactOpts, _txType, _token, _amount, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the zecrey method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _txType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreyTransactor) DepositOrLockNativeAsset(opts *bind.TransactOpts, _txType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "depositOrLockNativeAsset", _txType, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the zecrey method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _txType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreySession) DepositOrLockNativeAsset(_txType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockNativeAsset(&_Zecrey.TransactOpts, _txType, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the zecrey method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _txType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreyTransactorSession) DepositOrLockNativeAsset(_txType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockNativeAsset(&_Zecrey.TransactOpts, _txType, _accountName)
}

// ExecuteBlocks is a paid mutator transaction binding the zecrey method 0x9e71713c.
//
// Solidity: function executeBlocks(((uint32,uint64,bytes32,bytes32,uint256,bytes32),bytes[])[] _blocks) returns()
func (_Zecrey *ZecreyTransactor) ExecuteBlocks(opts *bind.TransactOpts, _blocks []ZecreyExecuteBlockInfo) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "executeBlocks", _blocks)
}

// ExecuteBlocks is a paid mutator transaction binding the zecrey method 0x9e71713c.
//
// Solidity: function executeBlocks(((uint32,uint64,bytes32,bytes32,uint256,bytes32),bytes[])[] _blocks) returns()
func (_Zecrey *ZecreySession) ExecuteBlocks(_blocks []ZecreyExecuteBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.ExecuteBlocks(&_Zecrey.TransactOpts, _blocks)
}

// ExecuteBlocks is a paid mutator transaction binding the zecrey method 0x9e71713c.
//
// Solidity: function executeBlocks(((uint32,uint64,bytes32,bytes32,uint256,bytes32),bytes[])[] _blocks) returns()
func (_Zecrey *ZecreyTransactorSession) ExecuteBlocks(_blocks []ZecreyExecuteBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.ExecuteBlocks(&_Zecrey.TransactOpts, _blocks)
}

// ForceWithdrawUnhandledBalance is a paid mutator transaction binding the zecrey method 0x1dd269e3.
//
// Solidity: function forceWithdrawUnhandledBalance(uint16 _assetId) returns()
func (_Zecrey *ZecreyTransactor) ForceWithdrawUnhandledBalance(opts *bind.TransactOpts, _assetId uint16) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "forceWithdrawUnhandledBalance", _assetId)
}

// ForceWithdrawUnhandledBalance is a paid mutator transaction binding the zecrey method 0x1dd269e3.
//
// Solidity: function forceWithdrawUnhandledBalance(uint16 _assetId) returns()
func (_Zecrey *ZecreySession) ForceWithdrawUnhandledBalance(_assetId uint16) (*types.Transaction, error) {
	return _Zecrey.Contract.ForceWithdrawUnhandledBalance(&_Zecrey.TransactOpts, _assetId)
}

// ForceWithdrawUnhandledBalance is a paid mutator transaction binding the zecrey method 0x1dd269e3.
//
// Solidity: function forceWithdrawUnhandledBalance(uint16 _assetId) returns()
func (_Zecrey *ZecreyTransactorSession) ForceWithdrawUnhandledBalance(_assetId uint16) (*types.Transaction, error) {
	return _Zecrey.Contract.ForceWithdrawUnhandledBalance(&_Zecrey.TransactOpts, _assetId)
}

// Initialize is a paid mutator transaction binding the zecrey method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreyTransactor) Initialize(opts *bind.TransactOpts, initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "initialize", initializationParameters)
}

// Initialize is a paid mutator transaction binding the zecrey method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreySession) Initialize(initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.Contract.Initialize(&_Zecrey.TransactOpts, initializationParameters)
}

// Initialize is a paid mutator transaction binding the zecrey method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreyTransactorSession) Initialize(initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.Contract.Initialize(&_Zecrey.TransactOpts, initializationParameters)
}

// RevertBlocks is a paid mutator transaction binding the zecrey method 0x0e536f60.
//
// Solidity: function revertBlocks((uint32,uint64,bytes32,bytes32,uint256,bytes32)[] _blocksToRevert) returns()
func (_Zecrey *ZecreyTransactor) RevertBlocks(opts *bind.TransactOpts, _blocksToRevert []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "revertBlocks", _blocksToRevert)
}

// RevertBlocks is a paid mutator transaction binding the zecrey method 0x0e536f60.
//
// Solidity: function revertBlocks((uint32,uint64,bytes32,bytes32,uint256,bytes32)[] _blocksToRevert) returns()
func (_Zecrey *ZecreySession) RevertBlocks(_blocksToRevert []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.RevertBlocks(&_Zecrey.TransactOpts, _blocksToRevert)
}

// RevertBlocks is a paid mutator transaction binding the zecrey method 0x0e536f60.
//
// Solidity: function revertBlocks((uint32,uint64,bytes32,bytes32,uint256,bytes32)[] _blocksToRevert) returns()
func (_Zecrey *ZecreyTransactorSession) RevertBlocks(_blocksToRevert []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.RevertBlocks(&_Zecrey.TransactOpts, _blocksToRevert)
}

// Upgrade is a paid mutator transaction binding the zecrey method 0x25394645.
//
// Solidity: function upgrade(bytes upgradeParameters) returns()
func (_Zecrey *ZecreyTransactor) Upgrade(opts *bind.TransactOpts, upgradeParameters []byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "upgrade", upgradeParameters)
}

// Upgrade is a paid mutator transaction binding the zecrey method 0x25394645.
//
// Solidity: function upgrade(bytes upgradeParameters) returns()
func (_Zecrey *ZecreySession) Upgrade(upgradeParameters []byte) (*types.Transaction, error) {
	return _Zecrey.Contract.Upgrade(&_Zecrey.TransactOpts, upgradeParameters)
}

// Upgrade is a paid mutator transaction binding the zecrey method 0x25394645.
//
// Solidity: function upgrade(bytes upgradeParameters) returns()
func (_Zecrey *ZecreyTransactorSession) Upgrade(upgradeParameters []byte) (*types.Transaction, error) {
	return _Zecrey.Contract.Upgrade(&_Zecrey.TransactOpts, upgradeParameters)
}

// UpgradeCanceled is a paid mutator transaction binding the zecrey method 0x871b8ff1.
//
// Solidity: function upgradeCanceled() returns()
func (_Zecrey *ZecreyTransactor) UpgradeCanceled(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "upgradeCanceled")
}

// UpgradeCanceled is a paid mutator transaction binding the zecrey method 0x871b8ff1.
//
// Solidity: function upgradeCanceled() returns()
func (_Zecrey *ZecreySession) UpgradeCanceled() (*types.Transaction, error) {
	return _Zecrey.Contract.UpgradeCanceled(&_Zecrey.TransactOpts)
}

// UpgradeCanceled is a paid mutator transaction binding the zecrey method 0x871b8ff1.
//
// Solidity: function upgradeCanceled() returns()
func (_Zecrey *ZecreyTransactorSession) UpgradeCanceled() (*types.Transaction, error) {
	return _Zecrey.Contract.UpgradeCanceled(&_Zecrey.TransactOpts)
}

// UpgradeFinishes is a paid mutator transaction binding the zecrey method 0xb269b9ae.
//
// Solidity: function upgradeFinishes() returns()
func (_Zecrey *ZecreyTransactor) UpgradeFinishes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "upgradeFinishes")
}

// UpgradeFinishes is a paid mutator transaction binding the zecrey method 0xb269b9ae.
//
// Solidity: function upgradeFinishes() returns()
func (_Zecrey *ZecreySession) UpgradeFinishes() (*types.Transaction, error) {
	return _Zecrey.Contract.UpgradeFinishes(&_Zecrey.TransactOpts)
}

// UpgradeFinishes is a paid mutator transaction binding the zecrey method 0xb269b9ae.
//
// Solidity: function upgradeFinishes() returns()
func (_Zecrey *ZecreyTransactorSession) UpgradeFinishes() (*types.Transaction, error) {
	return _Zecrey.Contract.UpgradeFinishes(&_Zecrey.TransactOpts)
}

// UpgradeNoticePeriodStarted is a paid mutator transaction binding the zecrey method 0x3b154b73.
//
// Solidity: function upgradeNoticePeriodStarted() returns()
func (_Zecrey *ZecreyTransactor) UpgradeNoticePeriodStarted(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "upgradeNoticePeriodStarted")
}

// UpgradeNoticePeriodStarted is a paid mutator transaction binding the zecrey method 0x3b154b73.
//
// Solidity: function upgradeNoticePeriodStarted() returns()
func (_Zecrey *ZecreySession) UpgradeNoticePeriodStarted() (*types.Transaction, error) {
	return _Zecrey.Contract.UpgradeNoticePeriodStarted(&_Zecrey.TransactOpts)
}

// UpgradeNoticePeriodStarted is a paid mutator transaction binding the zecrey method 0x3b154b73.
//
// Solidity: function upgradeNoticePeriodStarted() returns()
func (_Zecrey *ZecreyTransactorSession) UpgradeNoticePeriodStarted() (*types.Transaction, error) {
	return _Zecrey.Contract.UpgradeNoticePeriodStarted(&_Zecrey.TransactOpts)
}

// UpgradePreparationStarted is a paid mutator transaction binding the zecrey method 0x78b91e70.
//
// Solidity: function upgradePreparationStarted() returns()
func (_Zecrey *ZecreyTransactor) UpgradePreparationStarted(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "upgradePreparationStarted")
}

// UpgradePreparationStarted is a paid mutator transaction binding the zecrey method 0x78b91e70.
//
// Solidity: function upgradePreparationStarted() returns()
func (_Zecrey *ZecreySession) UpgradePreparationStarted() (*types.Transaction, error) {
	return _Zecrey.Contract.UpgradePreparationStarted(&_Zecrey.TransactOpts)
}

// UpgradePreparationStarted is a paid mutator transaction binding the zecrey method 0x78b91e70.
//
// Solidity: function upgradePreparationStarted() returns()
func (_Zecrey *ZecreyTransactorSession) UpgradePreparationStarted() (*types.Transaction, error) {
	return _Zecrey.Contract.UpgradePreparationStarted(&_Zecrey.TransactOpts)
}

// VerifyBlocks is a paid mutator transaction binding the zecrey method 0x5065ed7d.
//
// Solidity: function verifyBlocks((uint32,uint64,bytes32,bytes32,uint256,bytes32)[] _blocks, uint256[] _proofs) returns()
func (_Zecrey *ZecreyTransactor) VerifyBlocks(opts *bind.TransactOpts, _blocks []StorageBlockHeader, _proofs []*big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "verifyBlocks", _blocks, _proofs)
}

// VerifyBlocks is a paid mutator transaction binding the zecrey method 0x5065ed7d.
//
// Solidity: function verifyBlocks((uint32,uint64,bytes32,bytes32,uint256,bytes32)[] _blocks, uint256[] _proofs) returns()
func (_Zecrey *ZecreySession) VerifyBlocks(_blocks []StorageBlockHeader, _proofs []*big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.VerifyBlocks(&_Zecrey.TransactOpts, _blocks, _proofs)
}

// VerifyBlocks is a paid mutator transaction binding the zecrey method 0x5065ed7d.
//
// Solidity: function verifyBlocks((uint32,uint64,bytes32,bytes32,uint256,bytes32)[] _blocks, uint256[] _proofs) returns()
func (_Zecrey *ZecreyTransactorSession) VerifyBlocks(_blocks []StorageBlockHeader, _proofs []*big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.VerifyBlocks(&_Zecrey.TransactOpts, _blocks, _proofs)
}

// WithdrawPendingBalance is a paid mutator transaction binding the zecrey method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreyTransactor) WithdrawPendingBalance(opts *bind.TransactOpts, _owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "withdrawPendingBalance", _owner, _token, _amount)
}

// WithdrawPendingBalance is a paid mutator transaction binding the zecrey method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreySession) WithdrawPendingBalance(_owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.WithdrawPendingBalance(&_Zecrey.TransactOpts, _owner, _token, _amount)
}

// WithdrawPendingBalance is a paid mutator transaction binding the zecrey method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreyTransactorSession) WithdrawPendingBalance(_owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.WithdrawPendingBalance(&_Zecrey.TransactOpts, _owner, _token, _amount)
}

// ZecreyBlockCommitIterator is returned from FilterBlockCommit and is used to iterate over the raw logs and unpacked data for BlockCommit events raised by the Zecrey zecrey.
type ZecreyBlockCommitIterator struct {
	Event *ZecreyBlockCommit // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockCommit represents a BlockCommit event raised by the Zecrey zecrey.
type ZecreyBlockCommit struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockCommit is a free log retrieval operation binding the zecrey event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockCommit(opts *bind.FilterOpts) (*ZecreyBlockCommitIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockCommit")
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockCommitIterator{contract: _Zecrey.contract, event: "BlockCommit", logs: logs, sub: sub}, nil
}

// WatchBlockCommit is a free log subscription operation binding the zecrey event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockCommit(opts *bind.WatchOpts, sink chan<- *ZecreyBlockCommit) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockCommit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockCommit)
				if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockCommit is a log parse operation binding the zecrey event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockCommit(log types.Log) (*ZecreyBlockCommit, error) {
	event := new(ZecreyBlockCommit)
	if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlockExecutionIterator is returned from FilterBlockExecution and is used to iterate over the raw logs and unpacked data for BlockExecution events raised by the Zecrey zecrey.
type ZecreyBlockExecutionIterator struct {
	Event *ZecreyBlockExecution // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockExecutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockExecution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockExecution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockExecutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockExecutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockExecution represents a BlockExecution event raised by the Zecrey zecrey.
type ZecreyBlockExecution struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockExecution is a free log retrieval operation binding the zecrey event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockExecution(opts *bind.FilterOpts) (*ZecreyBlockExecutionIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockExecution")
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockExecutionIterator{contract: _Zecrey.contract, event: "BlockExecution", logs: logs, sub: sub}, nil
}

// WatchBlockExecution is a free log subscription operation binding the zecrey event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockExecution(opts *bind.WatchOpts, sink chan<- *ZecreyBlockExecution) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockExecution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockExecution)
				if err := _Zecrey.contract.UnpackLog(event, "BlockExecution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockExecution is a log parse operation binding the zecrey event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockExecution(log types.Log) (*ZecreyBlockExecution, error) {
	event := new(ZecreyBlockExecution)
	if err := _Zecrey.contract.UnpackLog(event, "BlockExecution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlockVerificationIterator is returned from FilterBlockVerification and is used to iterate over the raw logs and unpacked data for BlockVerification events raised by the Zecrey zecrey.
type ZecreyBlockVerificationIterator struct {
	Event *ZecreyBlockVerification // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockVerificationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockVerification)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockVerification)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockVerificationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockVerificationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockVerification represents a BlockVerification event raised by the Zecrey zecrey.
type ZecreyBlockVerification struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockVerification is a free log retrieval operation binding the zecrey event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockVerification(opts *bind.FilterOpts) (*ZecreyBlockVerificationIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockVerification")
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockVerificationIterator{contract: _Zecrey.contract, event: "BlockVerification", logs: logs, sub: sub}, nil
}

// WatchBlockVerification is a free log subscription operation binding the zecrey event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockVerification(opts *bind.WatchOpts, sink chan<- *ZecreyBlockVerification) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockVerification")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockVerification)
				if err := _Zecrey.contract.UnpackLog(event, "BlockVerification", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockVerification is a log parse operation binding the zecrey event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockVerification(log types.Log) (*ZecreyBlockVerification, error) {
	event := new(ZecreyBlockVerification)
	if err := _Zecrey.contract.UnpackLog(event, "BlockVerification", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlocksRevertIterator is returned from FilterBlocksRevert and is used to iterate over the raw logs and unpacked data for BlocksRevert events raised by the Zecrey zecrey.
type ZecreyBlocksRevertIterator struct {
	Event *ZecreyBlocksRevert // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlocksRevertIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlocksRevert)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlocksRevert)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlocksRevertIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlocksRevertIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlocksRevert represents a BlocksRevert event raised by the Zecrey zecrey.
type ZecreyBlocksRevert struct {
	TotalBlocksVerified  uint32
	TotalBlocksCommitted uint32
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterBlocksRevert is a free log retrieval operation binding the zecrey event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) FilterBlocksRevert(opts *bind.FilterOpts) (*ZecreyBlocksRevertIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlocksRevert")
	if err != nil {
		return nil, err
	}
	return &ZecreyBlocksRevertIterator{contract: _Zecrey.contract, event: "BlocksRevert", logs: logs, sub: sub}, nil
}

// WatchBlocksRevert is a free log subscription operation binding the zecrey event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) WatchBlocksRevert(opts *bind.WatchOpts, sink chan<- *ZecreyBlocksRevert) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlocksRevert")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlocksRevert)
				if err := _Zecrey.contract.UnpackLog(event, "BlocksRevert", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlocksRevert is a log parse operation binding the zecrey event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) ParseBlocksRevert(log types.Log) (*ZecreyBlocksRevert, error) {
	event := new(ZecreyBlocksRevert)
	if err := _Zecrey.contract.UnpackLog(event, "BlocksRevert", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositCommitIterator is returned from FilterDepositCommit and is used to iterate over the raw logs and unpacked data for DepositCommit events raised by the Zecrey zecrey.
type ZecreyDepositCommitIterator struct {
	Event *ZecreyDepositCommit // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDepositCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDepositCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDepositCommit represents a DepositCommit event raised by the Zecrey zecrey.
type ZecreyDepositCommit struct {
	ZecreyBlockNumber uint32
	AccountIndex      uint32
	AccountName       [32]byte
	AssetId           uint16
	Amount            *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterDepositCommit is a free log retrieval operation binding the zecrey event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterDepositCommit(opts *bind.FilterOpts, zecreyBlockNumber []uint32, accountIndex []uint32, assetId []uint16) (*ZecreyDepositCommitIterator, error) {

	var zecreyBlockNumberRule []interface{}
	for _, zecreyBlockNumberItem := range zecreyBlockNumber {
		zecreyBlockNumberRule = append(zecreyBlockNumberRule, zecreyBlockNumberItem)
	}
	var accountIndexRule []interface{}
	for _, accountIndexItem := range accountIndex {
		accountIndexRule = append(accountIndexRule, accountIndexItem)
	}

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "DepositCommit", zecreyBlockNumberRule, accountIndexRule, assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositCommitIterator{contract: _Zecrey.contract, event: "DepositCommit", logs: logs, sub: sub}, nil
}

// WatchDepositCommit is a free log subscription operation binding the zecrey event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchDepositCommit(opts *bind.WatchOpts, sink chan<- *ZecreyDepositCommit, zecreyBlockNumber []uint32, accountIndex []uint32, assetId []uint16) (event.Subscription, error) {

	var zecreyBlockNumberRule []interface{}
	for _, zecreyBlockNumberItem := range zecreyBlockNumber {
		zecreyBlockNumberRule = append(zecreyBlockNumberRule, zecreyBlockNumberItem)
	}
	var accountIndexRule []interface{}
	for _, accountIndexItem := range accountIndex {
		accountIndexRule = append(accountIndexRule, accountIndexItem)
	}

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "DepositCommit", zecreyBlockNumberRule, accountIndexRule, assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDepositCommit)
				if err := _Zecrey.contract.UnpackLog(event, "DepositCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositCommit is a log parse operation binding the zecrey event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseDepositCommit(log types.Log) (*ZecreyDepositCommit, error) {
	event := new(ZecreyDepositCommit)
	if err := _Zecrey.contract.UnpackLog(event, "DepositCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositNFTIterator is returned from FilterDepositNFT and is used to iterate over the raw logs and unpacked data for DepositNFT events raised by the Zecrey zecrey.
type ZecreyDepositNFTIterator struct {
	Event *ZecreyDepositNFT // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositNFTIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDepositNFT)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDepositNFT)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositNFTIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositNFTIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDepositNFT represents a DepositNFT event raised by the Zecrey zecrey.
type ZecreyDepositNFT struct {
	Sender       common.Address
	AccountName  [32]byte
	TokenAddress common.Address
	NftType      uint8
	NftID        *big.Int
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDepositNFT is a free log retrieval operation binding the zecrey event 0x60242986ab05aa5ec46faa7bb5a458f62e9f0b91d838758a0b291084035bf6d5.
//
// Solidity: event DepositNFT(address sender, bytes32 accountName, address tokenAddress, uint8 nftType, uint256 nftID, uint256 amount)
func (_Zecrey *ZecreyFilterer) FilterDepositNFT(opts *bind.FilterOpts) (*ZecreyDepositNFTIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "DepositNFT")
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositNFTIterator{contract: _Zecrey.contract, event: "DepositNFT", logs: logs, sub: sub}, nil
}

// WatchDepositNFT is a free log subscription operation binding the zecrey event 0x60242986ab05aa5ec46faa7bb5a458f62e9f0b91d838758a0b291084035bf6d5.
//
// Solidity: event DepositNFT(address sender, bytes32 accountName, address tokenAddress, uint8 nftType, uint256 nftID, uint256 amount)
func (_Zecrey *ZecreyFilterer) WatchDepositNFT(opts *bind.WatchOpts, sink chan<- *ZecreyDepositNFT) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "DepositNFT")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDepositNFT)
				if err := _Zecrey.contract.UnpackLog(event, "DepositNFT", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositNFT is a log parse operation binding the zecrey event 0x60242986ab05aa5ec46faa7bb5a458f62e9f0b91d838758a0b291084035bf6d5.
//
// Solidity: event DepositNFT(address sender, bytes32 accountName, address tokenAddress, uint8 nftType, uint256 nftID, uint256 amount)
func (_Zecrey *ZecreyFilterer) ParseDepositNFT(log types.Log) (*ZecreyDepositNFT, error) {
	event := new(ZecreyDepositNFT)
	if err := _Zecrey.contract.UnpackLog(event, "DepositNFT", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositOrLockIterator is returned from FilterDepositOrLock and is used to iterate over the raw logs and unpacked data for DepositOrLock events raised by the Zecrey zecrey.
type ZecreyDepositOrLockIterator struct {
	Event *ZecreyDepositOrLock // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositOrLockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDepositOrLock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDepositOrLock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositOrLockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositOrLockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDepositOrLock represents a DepositOrLock event raised by the Zecrey zecrey.
type ZecreyDepositOrLock struct {
	OpType      uint8
	AssetId     uint16
	AccountName [32]byte
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDepositOrLock is a free log retrieval operation binding the zecrey event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterDepositOrLock(opts *bind.FilterOpts) (*ZecreyDepositOrLockIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "DepositOrLock")
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositOrLockIterator{contract: _Zecrey.contract, event: "DepositOrLock", logs: logs, sub: sub}, nil
}

// WatchDepositOrLock is a free log subscription operation binding the zecrey event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchDepositOrLock(opts *bind.WatchOpts, sink chan<- *ZecreyDepositOrLock) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "DepositOrLock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDepositOrLock)
				if err := _Zecrey.contract.UnpackLog(event, "DepositOrLock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositOrLock is a log parse operation binding the zecrey event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseDepositOrLock(log types.Log) (*ZecreyDepositOrLock, error) {
	event := new(ZecreyDepositOrLock)
	if err := _Zecrey.contract.UnpackLog(event, "DepositOrLock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyExodusModeIterator is returned from FilterExodusMode and is used to iterate over the raw logs and unpacked data for ExodusMode events raised by the Zecrey zecrey.
type ZecreyExodusModeIterator struct {
	Event *ZecreyExodusMode // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyExodusModeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyExodusMode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyExodusMode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyExodusModeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyExodusModeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyExodusMode represents a ExodusMode event raised by the Zecrey zecrey.
type ZecreyExodusMode struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterExodusMode is a free log retrieval operation binding the zecrey event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) FilterExodusMode(opts *bind.FilterOpts) (*ZecreyExodusModeIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "ExodusMode")
	if err != nil {
		return nil, err
	}
	return &ZecreyExodusModeIterator{contract: _Zecrey.contract, event: "ExodusMode", logs: logs, sub: sub}, nil
}

// WatchExodusMode is a free log subscription operation binding the zecrey event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) WatchExodusMode(opts *bind.WatchOpts, sink chan<- *ZecreyExodusMode) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "ExodusMode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyExodusMode)
				if err := _Zecrey.contract.UnpackLog(event, "ExodusMode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExodusMode is a log parse operation binding the zecrey event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) ParseExodusMode(log types.Log) (*ZecreyExodusMode, error) {
	event := new(ZecreyExodusMode)
	if err := _Zecrey.contract.UnpackLog(event, "ExodusMode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyFullExitCommitIterator is returned from FilterFullExitCommit and is used to iterate over the raw logs and unpacked data for FullExitCommit events raised by the Zecrey zecrey.
type ZecreyFullExitCommitIterator struct {
	Event *ZecreyFullExitCommit // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyFullExitCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyFullExitCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyFullExitCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyFullExitCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyFullExitCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyFullExitCommit represents a FullExitCommit event raised by the Zecrey zecrey.
type ZecreyFullExitCommit struct {
	ZecreyBlockId uint32
	AccountId     uint32
	Owner         common.Address
	TokenId       uint16
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterFullExitCommit is a free log retrieval operation binding the zecrey event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterFullExitCommit(opts *bind.FilterOpts, zecreyBlockId []uint32, accountId []uint32, tokenId []uint16) (*ZecreyFullExitCommitIterator, error) {

	var zecreyBlockIdRule []interface{}
	for _, zecreyBlockIdItem := range zecreyBlockId {
		zecreyBlockIdRule = append(zecreyBlockIdRule, zecreyBlockIdItem)
	}
	var accountIdRule []interface{}
	for _, accountIdItem := range accountId {
		accountIdRule = append(accountIdRule, accountIdItem)
	}

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "FullExitCommit", zecreyBlockIdRule, accountIdRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyFullExitCommitIterator{contract: _Zecrey.contract, event: "FullExitCommit", logs: logs, sub: sub}, nil
}

// WatchFullExitCommit is a free log subscription operation binding the zecrey event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchFullExitCommit(opts *bind.WatchOpts, sink chan<- *ZecreyFullExitCommit, zecreyBlockId []uint32, accountId []uint32, tokenId []uint16) (event.Subscription, error) {

	var zecreyBlockIdRule []interface{}
	for _, zecreyBlockIdItem := range zecreyBlockId {
		zecreyBlockIdRule = append(zecreyBlockIdRule, zecreyBlockIdItem)
	}
	var accountIdRule []interface{}
	for _, accountIdItem := range accountId {
		accountIdRule = append(accountIdRule, accountIdItem)
	}

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "FullExitCommit", zecreyBlockIdRule, accountIdRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyFullExitCommit)
				if err := _Zecrey.contract.UnpackLog(event, "FullExitCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFullExitCommit is a log parse operation binding the zecrey event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseFullExitCommit(log types.Log) (*ZecreyFullExitCommit, error) {
	event := new(ZecreyFullExitCommit)
	if err := _Zecrey.contract.UnpackLog(event, "FullExitCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyNewPriorityRequestIterator is returned from FilterNewPriorityRequest and is used to iterate over the raw logs and unpacked data for NewPriorityRequest events raised by the Zecrey zecrey.
type ZecreyNewPriorityRequestIterator struct {
	Event *ZecreyNewPriorityRequest // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyNewPriorityRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyNewPriorityRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyNewPriorityRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyNewPriorityRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyNewPriorityRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyNewPriorityRequest represents a NewPriorityRequest event raised by the Zecrey zecrey.
type ZecreyNewPriorityRequest struct {
	Sender          common.Address
	SerialId        uint64
	TxType          uint8
	PubData         []byte
	ExpirationBlock *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNewPriorityRequest is a free log retrieval operation binding the zecrey event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 txType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) FilterNewPriorityRequest(opts *bind.FilterOpts) (*ZecreyNewPriorityRequestIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "NewPriorityRequest")
	if err != nil {
		return nil, err
	}
	return &ZecreyNewPriorityRequestIterator{contract: _Zecrey.contract, event: "NewPriorityRequest", logs: logs, sub: sub}, nil
}

// WatchNewPriorityRequest is a free log subscription operation binding the zecrey event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 txType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) WatchNewPriorityRequest(opts *bind.WatchOpts, sink chan<- *ZecreyNewPriorityRequest) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "NewPriorityRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyNewPriorityRequest)
				if err := _Zecrey.contract.UnpackLog(event, "NewPriorityRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewPriorityRequest is a log parse operation binding the zecrey event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 txType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) ParseNewPriorityRequest(log types.Log) (*ZecreyNewPriorityRequest, error) {
	event := new(ZecreyNewPriorityRequest)
	if err := _Zecrey.contract.UnpackLog(event, "NewPriorityRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyNoticePeriodChangeIterator is returned from FilterNoticePeriodChange and is used to iterate over the raw logs and unpacked data for NoticePeriodChange events raised by the Zecrey zecrey.
type ZecreyNoticePeriodChangeIterator struct {
	Event *ZecreyNoticePeriodChange // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyNoticePeriodChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyNoticePeriodChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyNoticePeriodChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyNoticePeriodChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyNoticePeriodChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyNoticePeriodChange represents a NoticePeriodChange event raised by the Zecrey zecrey.
type ZecreyNoticePeriodChange struct {
	NewNoticePeriod *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNoticePeriodChange is a free log retrieval operation binding the zecrey event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) FilterNoticePeriodChange(opts *bind.FilterOpts) (*ZecreyNoticePeriodChangeIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "NoticePeriodChange")
	if err != nil {
		return nil, err
	}
	return &ZecreyNoticePeriodChangeIterator{contract: _Zecrey.contract, event: "NoticePeriodChange", logs: logs, sub: sub}, nil
}

// WatchNoticePeriodChange is a free log subscription operation binding the zecrey event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) WatchNoticePeriodChange(opts *bind.WatchOpts, sink chan<- *ZecreyNoticePeriodChange) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "NoticePeriodChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyNoticePeriodChange)
				if err := _Zecrey.contract.UnpackLog(event, "NoticePeriodChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNoticePeriodChange is a log parse operation binding the zecrey event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) ParseNoticePeriodChange(log types.Log) (*ZecreyNoticePeriodChange, error) {
	event := new(ZecreyNoticePeriodChange)
	if err := _Zecrey.contract.UnpackLog(event, "NoticePeriodChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawNFTIterator is returned from FilterWithdrawNFT and is used to iterate over the raw logs and unpacked data for WithdrawNFT events raised by the Zecrey zecrey.
type ZecreyWithdrawNFTIterator struct {
	Event *ZecreyWithdrawNFT // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawNFTIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdrawNFT)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdrawNFT)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawNFTIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawNFTIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdrawNFT represents a WithdrawNFT event raised by the Zecrey zecrey.
type ZecreyWithdrawNFT struct {
	Sender       common.Address
	AccountName  [32]byte
	TokenAddress common.Address
	Minter       common.Address
	NftType      uint8
	NftID        *big.Int
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterWithdrawNFT is a free log retrieval operation binding the zecrey event 0x31feee1aa48a97f680156362def88d1878f5ebd09330f134aa1ad40959e2ad64.
//
// Solidity: event WithdrawNFT(address sender, bytes32 accountName, address tokenAddress, address minter, uint8 nftType, uint256 nftID, uint256 amount)
func (_Zecrey *ZecreyFilterer) FilterWithdrawNFT(opts *bind.FilterOpts) (*ZecreyWithdrawNFTIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "WithdrawNFT")
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawNFTIterator{contract: _Zecrey.contract, event: "WithdrawNFT", logs: logs, sub: sub}, nil
}

// WatchWithdrawNFT is a free log subscription operation binding the zecrey event 0x31feee1aa48a97f680156362def88d1878f5ebd09330f134aa1ad40959e2ad64.
//
// Solidity: event WithdrawNFT(address sender, bytes32 accountName, address tokenAddress, address minter, uint8 nftType, uint256 nftID, uint256 amount)
func (_Zecrey *ZecreyFilterer) WatchWithdrawNFT(opts *bind.WatchOpts, sink chan<- *ZecreyWithdrawNFT) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "WithdrawNFT")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdrawNFT)
				if err := _Zecrey.contract.UnpackLog(event, "WithdrawNFT", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawNFT is a log parse operation binding the zecrey event 0x31feee1aa48a97f680156362def88d1878f5ebd09330f134aa1ad40959e2ad64.
//
// Solidity: event WithdrawNFT(address sender, bytes32 accountName, address tokenAddress, address minter, uint8 nftType, uint256 nftID, uint256 amount)
func (_Zecrey *ZecreyFilterer) ParseWithdrawNFT(log types.Log) (*ZecreyWithdrawNFT, error) {
	event := new(ZecreyWithdrawNFT)
	if err := _Zecrey.contract.UnpackLog(event, "WithdrawNFT", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the Zecrey zecrey.
type ZecreyWithdrawalIterator struct {
	Event *ZecreyWithdrawal // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdrawal represents a Withdrawal event raised by the Zecrey zecrey.
type ZecreyWithdrawal struct {
	AssetId uint16
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the zecrey event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterWithdrawal(opts *bind.FilterOpts) (*ZecreyWithdrawalIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Withdrawal")
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawalIterator{contract: _Zecrey.contract, event: "Withdrawal", logs: logs, sub: sub}, nil
}

// WatchWithdrawal is a free log subscription operation binding the zecrey event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *ZecreyWithdrawal) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Withdrawal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdrawal)
				if err := _Zecrey.contract.UnpackLog(event, "Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawal is a log parse operation binding the zecrey event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseWithdrawal(log types.Log) (*ZecreyWithdrawal, error) {
	event := new(ZecreyWithdrawal)
	if err := _Zecrey.contract.UnpackLog(event, "Withdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawalPendingIterator is returned from FilterWithdrawalPending and is used to iterate over the raw logs and unpacked data for WithdrawalPending events raised by the Zecrey zecrey.
type ZecreyWithdrawalPendingIterator struct {
	Event *ZecreyWithdrawalPending // Event containing the zecrey specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawalPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdrawalPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdrawalPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawalPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawalPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdrawalPending represents a WithdrawalPending event raised by the Zecrey zecrey.
type ZecreyWithdrawalPending struct {
	AssetId uint16
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalPending is a free log retrieval operation binding the zecrey event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterWithdrawalPending(opts *bind.FilterOpts) (*ZecreyWithdrawalPendingIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "WithdrawalPending")
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawalPendingIterator{contract: _Zecrey.contract, event: "WithdrawalPending", logs: logs, sub: sub}, nil
}

// WatchWithdrawalPending is a free log subscription operation binding the zecrey event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchWithdrawalPending(opts *bind.WatchOpts, sink chan<- *ZecreyWithdrawalPending) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "WithdrawalPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdrawalPending)
				if err := _Zecrey.contract.UnpackLog(event, "WithdrawalPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalPending is a log parse operation binding the zecrey event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseWithdrawalPending(log types.Log) (*ZecreyWithdrawalPending, error) {
	event := new(ZecreyWithdrawalPending)
	if err := _Zecrey.contract.UnpackLog(event, "WithdrawalPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
