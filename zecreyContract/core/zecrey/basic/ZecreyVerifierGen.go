// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package basic

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// VerifierABI is the input ABI used to generate the binding from.
const VerifierABI = "[{\"inputs\":[],\"name\":\"ScalarField\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"in_proof\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proof_inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"num_proofs\",\"type\":\"uint256\"}],\"name\":\"verifyBatchProofs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"in_proof\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proof_inputs\",\"type\":\"uint256[]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// VerifierBin is the compiled bytecode used for deploying new contracts.
var VerifierBin = "0x608060405234801561001057600080fd5b50611ca4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063721ea4ac14610046578063c50e82631461017d578063daad1e63146102a2575b600080fd5b6101696004803603604081101561005c57600080fd5b810190602081018135600160201b81111561007657600080fd5b82018360208201111561008857600080fd5b803590602001918460208302840111600160201b831117156100a957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156100f857600080fd5b82018360208201111561010a57600080fd5b803590602001918460208302840111600160201b8311171561012b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506102bc945050505050565b604080519115158252519081900360200190f35b6101696004803603606081101561019357600080fd5b810190602081018135600160201b8111156101ad57600080fd5b8201836020820111156101bf57600080fd5b803590602001918460208302840111600160201b831117156101e057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561022f57600080fd5b82018360208201111561024157600080fd5b803590602001918460208302840111600160201b8311171561026257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250610620915050565b6102aa610c6a565b60408051918252519081900360200190f35b6000806102c7610c8e565b905060006102d3610eb0565b90508351600160028351816102e457fe5b0403146102f057600080fd5b84516008146102fe57600080fd5b610306611a0a565b61030e611a28565b600080600290508460008151811061032257fe5b60200260200101518360006004811061033757fe5b602002015284518590600190811061034b57fe5b60200260200101518360016004811061036057fe5b602002015260005b885181101561042e57855160018301928791811061038257fe5b60200260200101518560006003811061039757fe5b602002015285516001830192879181106103ad57fe5b6020026020010151856001600381106103c257fe5b602002015288518990829081106103d557fe5b6020026020010151856002600381106103ea57fe5b602002015260606040850160808760076107d05a03fa92508261040c57600080fd5b60608460c08660066107d05a03fa92508261042657600080fd5b600101610368565b5060006040518061030001604052808b60008151811061044a57fe5b602002602001015181526020018b60018151811061046457fe5b602002602001015181526020018b60028151811061047e57fe5b602002602001015181526020018b60038151811061049857fe5b602002602001015181526020018b6004815181106104b257fe5b602002602001015181526020018b6005815181106104cc57fe5b60200260200101518152602001886000600e81106104e657fe5b6020020151815260200161050a896001600e811061050057fe5b602002015161106a565b815260408981015160208301526060808b0151918301919091526080808b01519183019190915260a0808b01519183019190915286519082015260c001610552866001610500565b815260c0890151602082015260e089015160408201526101008901516060820152608001886009602002015181526020018b60068151811061059057fe5b602002602001015181526020016105ba8c6007815181106105ad57fe5b602002602001015161106a565b81526101408901516020820152610160890151604082015261018089015160608201526101a089015160809091015290506105f3611a46565b6020816103008460086107d05a03fa93508361060e57600080fd5b516001149a9950505050505050505050565b6000816001141561063c5761063584846102bc565b9050610c63565b6000610646610c8e565b90506000610652610eb0565b9050836008028651146106965760405162461bcd60e51b8152600401808060200182810382526021815260200180611b236021913960400191505060405180910390fd5b838551816106a057fe5b06156106dd5760405162461bcd60e51b8152600401808060200182810382526021815260200180611b446021913960400191505060405180910390fd5b838551816106e757fe5b04600160028351816106f557fe5b0403146107335760405162461bcd60e51b815260040180806020018281038252602e815260200180611b65602e913960400191505060405180910390fd5b606080610741888888611094565b909250905060006107538585846116bc565b905060008760060260120167ffffffffffffffff8111801561077457600080fd5b5060405190808252806020026020018201604052801561079e578160200160208202803683370190505b50905060005b888110156108fd578481600202815181106107bb57fe5b60200260200101518282600602815181106107d257fe5b6020026020010181815250508481600202600101815181106107f057fe5b602002602001015182826006026001018151811061080a57fe5b6020026020010181815250508a816008026002018151811061082857fe5b602002602001015182826006026002018151811061084257fe5b6020026020010181815250508a816008026003018151811061086057fe5b602002602001015182826006026003018151811061087a57fe5b6020026020010181815250508a816008026004018151811061089857fe5b60200260200101518282600602600401815181106108b257fe5b6020026020010181815250508a81600802600501815181106108d057fe5b60200260200101518282600602600501815181106108ea57fe5b60209081029190910101526001016107a4565b5081518151829060068b0290811061091157fe5b6020908102919091010152610927826001610500565b81896006026001018151811061093957fe5b6020908102919091010152856002602002015181896006026002018151811061095e57fe5b6020908102919091010152856003602002015181896006026003018151811061098357fe5b602090810291909101015285600460200201518189600602600401815181106109a857fe5b602090810291909101015285600560200201518189600602600501815181106109cd57fe5b602090810291909101015281600260200201518189600602600601815181106109f257fe5b6020908102919091010152610a08826003610500565b818960060260070181518110610a1a57fe5b60209081029190910101528560066020020151818960060260080181518110610a3f57fe5b60209081029190910101528560076020020151818960060260090181518110610a6457fe5b602090810291909101015285600860200201518189600602600a0181518110610a8957fe5b602090810291909101015285600960200201518189600602600b0181518110610aae57fe5b602002602001018181525050838860020281518110610ac957fe5b60200260200101518189600602600c0181518110610ae357fe5b602002602001018181525050610b048489600202600101815181106105ad57fe5b8189600602600d0181518110610b1657fe5b602090810291909101015285600a60200201518189600602600e0181518110610b3b57fe5b602090810291909101015285600b60200201518189600602600f0181518110610b6057fe5b602090810291909101015285600c6020020151818960060260100181518110610b8557fe5b602090810291909101015285600d6020020151818960060260110181518110610baa57fe5b602002602001018181525050600081516020029050610bc7611a46565b60c0820615610c075760405162461bcd60e51b815260040180806020018281038252602d815260200180611b93602d913960400191505060405180910390fd5b602081836020860160086107d05a03fa985088610c555760405162461bcd60e51b8152600401808060200182810382526021815260200180611ac56021913960400191505060405180910390fd5b516001149750505050505050505b9392505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190565b610c96611a64565b7f0e34a102eb3d25aedd16cb384561329fd3b0239692f52c0294c7c81dc79109bc81527f240d5256a079a169d3951bd46e48ee261b0b0cffbe7b592a0f460cbae981077960208201527f1f127e8c228ee7367f742bdeb07f3f80234e5fb58b1fe2e17fb8e6c8193df8d860408201527f0b5da5b3819f3c8cc1662a7d7eacf1c536c3561b6e34164a4a8125e52c7f352a60608201527f1a0e1ed7b0327b478cd6ca40535df5a27dbe52efbf41560b1d6d10be0275470360808201527f086fd62221df20609538e29083b935e2bba4a39877ca892a02d76f8f65d6034d60a08201527f1df38d7d30432938b0cec9fb119989d5e135dc9262a2245628fefa745069160360c08201527f298e013eef81d022bb9b6db8f5736b3508b8d4caf7de15658373a6a865b9ef0f60e08201527f07276819fd4a97720971ddfb22e824b9d30482fb1d2bfea63782bec20be6249d6101008201527f097a9d96d778ba9161b6286b4dcf5c43b41b15912f51a9db0721ef8ab23b7ef86101208201527f24a2ab0920a62c12047b27ddf0b46091ad358449f4ba615a6798c2728f86ccac6101408201527f1e75dddbe53bdd0c444f1ef97294bbb55777c7819a1cd4dd4c4ede89fdaf11976101608201527f07f095f301ee232c15dc7f11a1b9c09c12222e285d569a30d4e678878f1aafa46101808201527f2d0ec444ba2b51a19932dcda0af489eca42e10bd4f9317db1c00bd744ab7c88a6101a082015290565b604080516008808252610120820190925260609160208201610100803683370190505090507f130cdf59948c9785abc33a2cb87716faf7fd83c6647986220f83c169b962860c81600081518110610f0357fe5b6020026020010181815250507f15d5ca4c5023e741ea775a6c32dbd7182a4f74b88d7236d86f909a839c1f92d981600181518110610f3d57fe5b6020026020010181815250507f07825ac441ee5365925acc2d4354b0667eccfb44a9bd7f0eb4527e9d5d6344db81600281518110610f7757fe5b6020026020010181815250507f2d5c40fdb1ca6e86efdeaa69c78549d5d25681891f5a8e228b518ce6ef312d6581600381518110610fb157fe5b6020026020010181815250507f07cc39cc2435a9a16807d45162ae71d2bd4162c9aa946db92934752358cc82f881600481518110610feb57fe5b6020026020010181815250507f0e5399eb29f31c05bfc7edc84e0fdde9e94fd08a74d5a5e382d8b0df31c1e54a8160058151811061102557fe5b60200260200101818152505060008160068151811061104057fe5b60200260200101818152505060008160078151811061105b57fe5b60200260200101818152505090565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790819006900390565b60608060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190506000848651816110c857fe5b04905060008567ffffffffffffffff811180156110e457600080fd5b5060405190808252806020026020018201604052801561110e578160200160208202803683370190505b5090508160010167ffffffffffffffff8111801561112b57600080fd5b50604051908082528060200260200182016040528015611155578160200160208202803683370190505b50935060005b868110156112f5578061118757600182828151811061117657fe5b6020026020010181815250506111ab565b6111928989836118b6565b82828151811061119e57fe5b6020026020010181815250505b8181815181106111b757fe5b602002602001015160001415611214576040805162461bcd60e51b815260206004820152601a60248201527f456e74726f70792073686f756c64206e6f74206265207a65726f000000000000604482015290519081900360640190fd5b838061121c57fe5b848061122457fe5b83838151811061123057fe5b60200260200101516001098660008151811061124857fe5b6020026020010151088560008151811061125e57fe5b60200260200101818152505060005b838110156112ec57848061127d57fe5b858061128557fe5b8a83878602018151811061129557fe5b60200260200101518585815181106112a957fe5b6020026020010151098783600101815181106112c157fe5b6020026020010151088682600101815181106112d957fe5b602090810291909101015260010161126d565b5060010161115b565b506112fe611a0a565b60008760020260020167ffffffffffffffff8111801561131d57600080fd5b50604051908082528060200260200182016040528015611347578160200160208202803683370190505b5096508960008151811061135757fe5b60200260200101518760008151811061136c57fe5b6020026020010181815250508960018151811061138557fe5b60200260200101518760018151811061139a57fe5b602090810291909101015260015b888110156114e1578a81600802815181106113bf57fe5b6020026020010151836000600381106113d457fe5b60200201528a518b90600160088402019081106113ed57fe5b60200260200101518360016003811061140257fe5b6020020152835184908290811061141557fe5b60200260200101518360026003811061142a57fe5b602002015260408360608160076107d05a03fa9150826000602002015188826002028151811061145657fe5b6020908102919091010152826001602002015188826002026001018151811061147b57fe5b602002602001018181525050816114d9576040805162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f2063616c6c206120707265636f6d70696c650000000000604482015290519081900360640190fd5b6001016113a8565b506114ea611a28565b8a6006815181106114f757fe5b60200260200101518160006004811061150c57fe5b60200201528a518b90600790811061152057fe5b60200260200101518160016004811061153557fe5b602002015260015b89811015611669578b816008026006018151811061155757fe5b60200260200101518460006003811061156c57fe5b60200201528b518c906007600884020190811061158557fe5b60200260200101518460016003811061159a57fe5b602002015284518590829081106115ad57fe5b6020026020010151846002600381106115c257fe5b6020020152604082810160608660076107d05a03fa9250826116155760405162461bcd60e51b815260040180806020018281038252603d815260200180611ae6603d913960400191505060405180910390fd5b60408260808460066107d05a03fa9250826116615760405162461bcd60e51b8152600401808060200182810382526037815260200180611bc06037913960400191505060405180910390fd5b60010161153d565b5080518851899060028c0290811061167d57fe5b60209081029190910101528060016020020151888a600202600101815181106116a257fe5b602002602001018181525050505050505050935093915050565b6116c4611a28565b6116cc611a28565b6116d4611a0a565b6000805b8551811015611802578681600202815181106116f057fe5b60200260200101518360006003811061170557fe5b6020020152865187906001600284020190811061171e57fe5b60200260200101518360016003811061173357fe5b6020020152855186908290811061174657fe5b60200260200101518360026003811061175b57fe5b6020020152604084810160608560076107d05a03fa9150816117ae5760405162461bcd60e51b8152600401808060200182810382526047815260200180611c286047913960600191505060405180910390fd5b60408460808660066107d05a03fa9150816117fa5760405162461bcd60e51b8152600401808060200182810382526041815260200180611a846041913960600191505060405180910390fd5b6001016116d8565b50825160408501526020830151606085015261181c611a0a565b87518152602080890151908201528551869060009061183757fe5b60200260200101518160026003811061184c57fe5b602002015260408160608160076107d05a03fa91508161189d5760405162461bcd60e51b8152600401808060200182810382526031815260200180611bf76031913960400191505060405180910390fd5b8051855260209081015190850152509195945050505050565b600060038483600802600001815181106118cc57fe5b60200260200101518584600802600101815181106118e657fe5b602002602001015186856008026002018151811061190057fe5b602002602001015187866008026003018151811061191a57fe5b602002602001015188876008026004018151811061193457fe5b602002602001015189886008026005018151811061194e57fe5b60200260200101518a896008026006018151811061196857fe5b60200260200101518b8a6008026007018151811061198257fe5b60200260200101518b8b8151811061199657fe5b6020026020010151604051602001808a815260200189815260200188815260200187815260200186815260200185815260200184815260200183815260200182815260200199505050505050505050506040516020818303038152906040528051906020012060001c901c90509392505050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b604051806101c00160405280600e90602082028036833750919291505056fe4661696c656420746f2063616c6c206120707265636f6d70696c6520666f72204731206164646974696f6e20666f7220696e70757420616363756d756c61746f724661696c656420746f2063616c6c2070616972696e67732066756e6374696f6e734661696c656420746f2063616c6c206120707265636f6d70696c6520666f72204731206d756c7469706c69636174696f6e20666f722050726f6f662043496e76616c69642070726f6f6673206c656e67746820666f722061206261746368496e76616c696420696e70757473206c656e67746820666f7220612062617463684d69736d61746368696e67206e756d626572206f6620696e7075747320666f7220766572696679696e67206b6579496e70757473206c656e6774682073686f756c64206265206d756c7469706c65206f66203139322062797465734661696c656420746f2063616c6c206120707265636f6d70696c6520666f72204731206164646974696f6e20666f722050726f6f6620434661696c656420746f2063616c6c206120707265636f6d70696c6520666f72204731206d756c7469706c69636174696f6e4661696c656420746f2063616c6c206120707265636f6d70696c6520666f72204731206d756c7469706c69636174696f6e20666f7220696e70757420616363756d756c61746f72a2646970667358221220102d69b3f8c5a7294e889950a1a4ced1444eef492de5817a2b5e202090433d8964736f6c63430007060033"

// DeployVerifier deploys a new Ethereum contract, binding an instance of Verifier to it.
func DeployVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Verifier, error) {
	parsed, err := abi.JSON(strings.NewReader(VerifierABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(VerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// Verifier is an auto generated Go binding around an Ethereum contract.
type Verifier struct {
	VerifierCaller     // Read-only binding to the contract
	VerifierTransactor // Write-only binding to the contract
	VerifierFilterer   // Log filterer for contract events
}

// VerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type VerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VerifierSession struct {
	Contract     *Verifier         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VerifierCallerSession struct {
	Contract *VerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// VerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VerifierTransactorSession struct {
	Contract     *VerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// VerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type VerifierRaw struct {
	Contract *Verifier // Generic contract binding to access the raw methods on
}

// VerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VerifierCallerRaw struct {
	Contract *VerifierCaller // Generic read-only contract binding to access the raw methods on
}

// VerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VerifierTransactorRaw struct {
	Contract *VerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVerifier creates a new instance of Verifier, bound to a specific deployed contract.
func NewVerifier(address common.Address, backend bind.ContractBackend) (*Verifier, error) {
	contract, err := bindVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// NewVerifierCaller creates a new read-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierCaller(address common.Address, caller bind.ContractCaller) (*VerifierCaller, error) {
	contract, err := bindVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierCaller{contract: contract}, nil
}

// NewVerifierTransactor creates a new write-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*VerifierTransactor, error) {
	contract, err := bindVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierTransactor{contract: contract}, nil
}

// NewVerifierFilterer creates a new log filterer instance of Verifier, bound to a specific deployed contract.
func NewVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*VerifierFilterer, error) {
	contract, err := bindVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VerifierFilterer{contract: contract}, nil
}

// bindVerifier binds a generic wrapper to an already deployed contract.
func bindVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VerifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.VerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transact(opts, method, params...)
}

// ScalarField is a free data retrieval call binding the contract method 0xdaad1e63.
//
// Solidity: function ScalarField() pure returns(uint256)
func (_Verifier *VerifierCaller) ScalarField(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "ScalarField")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScalarField is a free data retrieval call binding the contract method 0xdaad1e63.
//
// Solidity: function ScalarField() pure returns(uint256)
func (_Verifier *VerifierSession) ScalarField() (*big.Int, error) {
	return _Verifier.Contract.ScalarField(&_Verifier.CallOpts)
}

// ScalarField is a free data retrieval call binding the contract method 0xdaad1e63.
//
// Solidity: function ScalarField() pure returns(uint256)
func (_Verifier *VerifierCallerSession) ScalarField() (*big.Int, error) {
	return _Verifier.Contract.ScalarField(&_Verifier.CallOpts)
}

// VerifyBatchProofs is a free data retrieval call binding the contract method 0xc50e8263.
//
// Solidity: function verifyBatchProofs(uint256[] in_proof, uint256[] proof_inputs, uint256 num_proofs) view returns(bool success)
func (_Verifier *VerifierCaller) VerifyBatchProofs(opts *bind.CallOpts, in_proof []*big.Int, proof_inputs []*big.Int, num_proofs *big.Int) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "verifyBatchProofs", in_proof, proof_inputs, num_proofs)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyBatchProofs is a free data retrieval call binding the contract method 0xc50e8263.
//
// Solidity: function verifyBatchProofs(uint256[] in_proof, uint256[] proof_inputs, uint256 num_proofs) view returns(bool success)
func (_Verifier *VerifierSession) VerifyBatchProofs(in_proof []*big.Int, proof_inputs []*big.Int, num_proofs *big.Int) (bool, error) {
	return _Verifier.Contract.VerifyBatchProofs(&_Verifier.CallOpts, in_proof, proof_inputs, num_proofs)
}

// VerifyBatchProofs is a free data retrieval call binding the contract method 0xc50e8263.
//
// Solidity: function verifyBatchProofs(uint256[] in_proof, uint256[] proof_inputs, uint256 num_proofs) view returns(bool success)
func (_Verifier *VerifierCallerSession) VerifyBatchProofs(in_proof []*big.Int, proof_inputs []*big.Int, num_proofs *big.Int) (bool, error) {
	return _Verifier.Contract.VerifyBatchProofs(&_Verifier.CallOpts, in_proof, proof_inputs, num_proofs)
}

// VerifyProof is a free data retrieval call binding the contract method 0x721ea4ac.
//
// Solidity: function verifyProof(uint256[] in_proof, uint256[] proof_inputs) view returns(bool)
func (_Verifier *VerifierCaller) VerifyProof(opts *bind.CallOpts, in_proof []*big.Int, proof_inputs []*big.Int) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "verifyProof", in_proof, proof_inputs)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyProof is a free data retrieval call binding the contract method 0x721ea4ac.
//
// Solidity: function verifyProof(uint256[] in_proof, uint256[] proof_inputs) view returns(bool)
func (_Verifier *VerifierSession) VerifyProof(in_proof []*big.Int, proof_inputs []*big.Int) (bool, error) {
	return _Verifier.Contract.VerifyProof(&_Verifier.CallOpts, in_proof, proof_inputs)
}

// VerifyProof is a free data retrieval call binding the contract method 0x721ea4ac.
//
// Solidity: function verifyProof(uint256[] in_proof, uint256[] proof_inputs) view returns(bool)
func (_Verifier *VerifierCallerSession) VerifyProof(in_proof []*big.Int, proof_inputs []*big.Int) (bool, error) {
	return _Verifier.Contract.VerifyProof(&_Verifier.CallOpts, in_proof, proof_inputs)
}
