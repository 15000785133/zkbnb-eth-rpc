// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package basic

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StorageBlockHeader is an auto generated low-level Go binding around an user-defined struct.
type StorageBlockHeader struct {
	BlockNumber    uint32
	OnchainOpsRoot [32]byte
	StateRoot      [32]byte
	Timestamp      *big.Int
	Commitment     [32]byte
}

// ZecreyBlockProof is an auto generated low-level Go binding around an user-defined struct.
type ZecreyBlockProof struct {
	A [2]*big.Int
	B [2][2]*big.Int
	C [2]*big.Int
}

// ZecreyCommitBlockInfo is an auto generated low-level Go binding around an user-defined struct.
type ZecreyCommitBlockInfo struct {
	BlockNumber           uint32
	OnchainOpsRoot        [32]byte
	NewStateRoot          [32]byte
	Timestamp             *big.Int
	Commitment            [32]byte
	OnchainOpsPubData     []byte
	OnchainOpsCount       uint16
	OnchainOpsMerkleProof [5][32]byte
}

// ZecreyVerifyBlockInfo is an auto generated low-level Go binding around an user-defined struct.
type ZecreyVerifyBlockInfo struct {
	BlockHeader StorageBlockHeader
	BlockProof  ZecreyBlockProof
}

// ZecreyMetaData contains all meta data concerning the Zecrey contract.
var ZecreyMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_chainId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_nativeAssetId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_maxPendingBlocks\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockVerification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksVerified\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksCommitted\",\"type\":\"uint32\"}],\"name\":\"BlocksRevert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zecreyBlockNumber\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"DepositCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"opType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"DepositOrLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExodusMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zecreyBlockId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"FullExitCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"serialId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enumOperations.OpType\",\"name\":\"opType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"name\":\"NewPriorityRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNoticePeriod\",\"type\":\"uint256\"}],\"name\":\"NoticePeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"WithdrawalPending\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_onchainOpsMerkleHelper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxAmount\",\"type\":\"uint128\"}],\"name\":\"_transferERC20\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"blockOnchainOpsPubData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader\",\"name\":\"_lastCommittedBlockData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newStateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"onchainOpsPubData\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"onchainOpsCount\",\"type\":\"uint16\"},{\"internalType\":\"bytes32[5]\",\"name\":\"onchainOpsMerkleProof\",\"type\":\"bytes32[5]\"}],\"internalType\":\"structZecrey.CommitBlockInfo[]\",\"name\":\"_newBlocksData\",\"type\":\"tuple[]\"}],\"name\":\"commitBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_onchainOpsPubData\",\"type\":\"bytes\"}],\"name\":\"computeOnchainOpsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"onchainOpsDataHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_opType\",\"type\":\"uint8\"},{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint104\",\"name\":\"_amount\",\"type\":\"uint104\"},{\"internalType\":\"bytes32\",\"name\":\"_accountName\",\"type\":\"bytes32\"}],\"name\":\"depositOrLockERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_opType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_accountName\",\"type\":\"bytes32\"}],\"name\":\"depositOrLockNativeAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"}],\"name\":\"executeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exodusMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstPriorityRequestId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_accountName\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_assetId\",\"type\":\"uint16\"}],\"name\":\"forceWithdrawUnhandledBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetAddr\",\"type\":\"address\"}],\"name\":\"getPendingBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializationParameters\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"onchainOpsCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"onchainOpsExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader[]\",\"name\":\"_blocksToRevert\",\"type\":\"tuple[]\"}],\"name\":\"revertBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"storedBlockHeaderHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksCommitted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksExecuted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksVerified\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOpenPriorityRequests\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"unhandledBalances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"unhandledBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader\",\"name\":\"blockHeader\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"structZecrey.BlockProof\",\"name\":\"blockProof\",\"type\":\"tuple\"}],\"internalType\":\"structZecrey.VerifyBlockInfo[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"}],\"name\":\"verifyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"withdrawPendingBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620042ed380380620042ed83398101604081905262000034916200008a565b600c805460ff191660ff949094169390931762ffff00191661010061ffff938416021764ffff000000191663010000009190921602179055620000d9565b805161ffff811681146200008557600080fd5b919050565b6000806000606084860312156200009f578283fd5b835160ff81168114620000b0578384fd5b9250620000c06020850162000072565b9150620000d06040850162000072565b90509250925092565b61420480620000e96000396000f3fe6080604052600436106101665760003560e01c806386d0c7bf116100d1578063a7ccec2f1161008a578063d514da5011610064578063d514da5014610421578063eface7e214610441578063f22354871461046e578063faf4d8cb1461048357610166565b8063a7ccec2f146103c9578063c57b22be146103de578063ce6f00a8146103f357610166565b806386d0c7bf146103095780638b4f7de9146103295780638c8ebc52146103495780638ee1a74e146103695780639b9e91b614610389578063a0b94d61146103a957610166565b80634167d002116101235780634167d0021461022d578063439fab911461025a5780635aca41f61461027a57806367708dae146102a75780636f950a51146102c957806375329d6b146102e957610166565b80630222740e1461016b5780630d09454e146101a15780631678b35e146101c35780631e15f3e0146101d6578063264c0912146101f65780632d24006c1461020b575b600080fd5b34801561017757600080fd5b5061018b61018636600461378d565b610498565b6040516101989190613c59565b60405180910390f35b3480156101ad57600080fd5b506101c16101bc3660046135e9565b6104ad565b005b6101c16101d1366004613a86565b610631565b3480156101e257600080fd5b506101c16101f1366004613aaf565b61065e565b34801561020257600080fd5b5061018b610975565b34801561021757600080fd5b50610220610985565b6040516101989190614080565b34801561023957600080fd5b5061024d610248366004613a6c565b610998565b6040516101989190613c64565b34801561026657600080fd5b506101c16102753660046137f1565b6109aa565b34801561028657600080fd5b5061029a610295366004613514565b610ab6565b6040516101989190614044565b3480156102b357600080fd5b506102bc610b85565b60405161019891906140a8565b3480156102d557600080fd5b506101c16102e43660046138ea565b610b9b565b3480156102f557600080fd5b506101c161030436600461354c565b610d54565b34801561031557600080fd5b506101c16103243660046137cd565b610f68565b34801561033557600080fd5b5061018b61034436600461378d565b611020565b34801561035557600080fd5b5061024d61036436600461385d565b611035565b34801561037557600080fd5b5061029a61038436600461388f565b61108f565b34801561039557600080fd5b5061018b6103a4366004613a54565b61122e565b3480156103b557600080fd5b506101c16103c436600461354c565b611258565b3480156103d557600080fd5b5061024d6113e6565b3480156103ea57600080fd5b506102bc6113ec565b3480156103ff57600080fd5b5061041361040e3660046137cd565b611402565b604051610198929190614058565b34801561042d57600080fd5b506101c161043c3660046134ca565b611432565b34801561044d57600080fd5b5061046161045c366004613a6c565b61166c565b6040516101989190613c6d565b34801561047a57600080fd5b50610220611707565b34801561048f57600080fd5b5061022061171a565b60086020526000908152604090205460ff1681565b6000805160206141af83398151915254600181146104ca57600080fd5b60026000805160206141af833981519152556104e4611726565b600254604051631e8d167560e21b81526001600160a01b0390911690637a3459d490610514903390600401613bde565b60006040518083038186803b15801561052c57600080fd5b505afa158015610540573d6000803e3d6000fd5b5050505060005b82518161ffff1610156105d357610579838261ffff168151811061056757fe5b60200260200101518261ffff16611752565b828161ffff168151811061058957fe5b6020026020010151600001516000015163ffffffff167f0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd2038441360405160405180910390a2600101610547565b506105fb6105e18351611883565b60055463ffffffff600160201b909104811691906118c616565b600560046101000a81548163ffffffff021916908363ffffffff16021790555060016000805160206141af833981519152555050565b610639611726565b600c5461065a908390610100900461ffff1661065434611915565b84611954565b5050565b6000805160206141af833981519152546001811461067b57600080fd5b60026000805160206141af83398151915255610695611726565b600254604051639bd7760960e01b81526000916001600160a01b031690639bd77609906106c6908890600401613bde565b60206040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107169190613a38565b6002546040516331d8687b60e01b81529192506001600160a01b0316906331d8687b90610747908490600401614071565b60206040518083038186803b15801561075f57600080fd5b505afa158015610773573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107979190613771565b156107bd5760405162461bcd60e51b81526004016107b490613f0f565b60405180910390fd5b6040516370a0823160e01b81526000906001600160a01b038716906370a08231906107ec903090600401613bde565b60206040518083038186803b15801561080457600080fd5b505afa158015610818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083c91906137b5565b905061086a86333061085c896cffffffffffffffffffffffffff16611915565b6001600160801b0316611aa6565b6108865760405162461bcd60e51b81526004016107b490613d0a565b6040516370a0823160e01b81526000906001600160a01b038816906370a08231906108b5903090600401613bde565b60206040518083038186803b1580156108cd57600080fd5b505afa1580156108e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090591906137b5565b9050600061091b6109168385611bd2565b611915565b9050650fffffffffff6001600160801b038216111561094c5760405162461bcd60e51b81526004016107b490613cd4565b61095889858389611954565b5050505060016000805160206141af833981519152555050505050565b600554600160601b900460ff1681565b600554600160201b900463ffffffff1681565b60076020526000908152604090205481565b6109b2611bf8565b6000808080808080806109c7898b018b6133f1565b600180546001600160a01b03808a166001600160a01b03199283161790925560028054928b16929091169190911790556000849055969e50949c50929a509098509650945092509050610a1d600b82600461303f565b506005805463ffffffff191663ffffffff881690811767ffffffff000000001916600160201b8202176bffffffff00000000000000001916600160401b8202179091556040805160a0810182529182526020820187905281018590526060810184905260808101839052610a9081611c49565b63ffffffff90971660009081526007602052604090209690965550505050505050505050565b6000806001600160a01b03831615610b4b57600254604051639bd7760960e01b81526001600160a01b0390911690639bd7760990610af8908690600401613bde565b60206040518083038186803b158015610b1057600080fd5b505afa158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b489190613a38565b90505b60036000610b598684611c79565b6001600160501b03191681526020810191909152604001600020546001600160801b0316949350505050565b600554600160681b90046001600160401b031681565b6000805160206141af8339815191525460018114610bb857600080fd5b60026000805160206141af83398151915255610bd2611726565b600254604051635147001960e11b81526001600160a01b039091169063a28e003290610c02903390600401613bde565b60006040518083038186803b158015610c1a57600080fd5b505afa158015610c2e573d6000803e3d6000fd5b50505050610c3b83611c49565b60055463ffffffff1660009081526007602052604090205414610c705760405162461bcd60e51b81526004016107b490613fb3565b60005b82518163ffffffff161015610d0257610ca584848363ffffffff1681518110610c9857fe5b6020026020010151611c96565b9350610cb084611c49565b845163ffffffff908116600090815260076020526040808220939093558651925192909116917f81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b62684249190a2600101610c73565b50610d23610d108351611883565b60055463ffffffff90811691906118c616565b6005805463ffffffff191663ffffffff92909216919091179055505060016000805160206141af8339815191525550565b610d5c611726565b600254604051630e010cab60e11b81526001600160a01b0390911690631c02195690610d8c903390600401613bde565b60006040518083038186803b158015610da457600080fd5b505afa158015610db8573d6000803e3d6000fd5b5050600554835163ffffffff808316945060009350610de092600160401b9004168403611e01565b905060005b8163ffffffff168163ffffffff161015610ef6576000848263ffffffff1681518110610e0d57fe5b6020908102919091010151600554815191925063ffffffff600160401b9091048116911610610e4e5760405162461bcd60e51b81526004016107b490613e91565b600554815163ffffffff9081169181168490031614610e7f5760405162461bcd60e51b81526004016107b490613e0e565b610e8881611c49565b63ffffffff851660009081526007602052604090205414610ebb5760405162461bcd60e51b81526004016107b490613db4565b63ffffffff84166000908152600760209081526040808320839055600a9091528120610ee6916130cd565b5060001990920191600101610de5565b506005805463ffffffff191663ffffffff84811691821767ffffffff000000001916600160201b9290920291909117918290556040517f6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d392610f5b9216908590614091565b60405180910390a1505050565b600082815260046020908152604080832061ffff808616855290835292819020815180830190925280546001600160801b0316825260010154918101829052600c54909263010000009091041690610fc1904390611bd2565b11610fde5760405162461bcd60e51b81526004016107b490613dcf565b610fed82338360000151611e23565b50600091825260046020908152604080842061ffff9093168452919052812080546001600160801b031916815560010155565b60096020526000908152604090205460ff1681565b60006002826040516110479190613b3f565b602060405180830381855afa158015611064573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061108791906137b5565b90505b919050565b60003330146110b05760405162461bcd60e51b81526004016107b490613f47565b6040516370a0823160e01b81526000906001600160a01b038716906370a08231906110df903090600401613bde565b60206040518083038186803b1580156110f757600080fd5b505afa15801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f91906137b5565b90506111458686866001600160801b031661200e565b6111615760405162461bcd60e51b81526004016107b490613f7d565b6040516370a0823160e01b81526000906001600160a01b038816906370a0823190611190903090600401613bde565b60206040518083038186803b1580156111a857600080fd5b505afa1580156111bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e091906137b5565b905060006111ee8383611bd2565b9050846001600160801b03168111156112195760405162461bcd60e51b81526004016107b490613df3565b61122281611915565b98975050505050505050565b600b816004811061123e57600080fd5b60209182820401919006915054906101000a900460ff1681565b6000805160206141af833981519152546001811461127557600080fd5b60026000805160206141af8339815191525561128f611726565b600254604051636810f99560e11b81526001600160a01b039091169063d021f32a906112bf903390600401613bde565b60006040518083038186803b1580156112d757600080fd5b505afa1580156112eb573d6000803e3d6000fd5b5050835161ffff169150600090505b8163ffffffff168161ffff16101561138757611331848261ffff168151811061131f57fe5b60200260200101518261ffff16612134565b838161ffff168151811061134157fe5b60200260200101516000015163ffffffff167f24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb60405160405180910390a26001016112fa565b506113af6113958451611883565b60055463ffffffff600160401b909104811691906118c616565b600560086101000a81548163ffffffff021916908363ffffffff1602179055505060016000805160206141af833981519152555050565b60005481565b600554600160a81b90046001600160401b031681565b6004602090815260009283526040808420909152908252902080546001909101546001600160801b039091169082565b6000805160206141af833981519152546001811461144f57600080fd5b60026000805160206141af833981519152556001600160a01b03831661151157600c5461148690610100900461ffff168386612374565b6000846001600160a01b0316836001600160801b03166040516114a890613b8a565b60006040518083038185875af1925050503d80600081146114e5576040519150601f19603f3d011682016040523d82523d6000602084013e6114ea565b606091505b505090508061150b5760405162461bcd60e51b81526004016107b490613fce565b50611654565b600254604051639bd7760960e01b81526000916001600160a01b031690639bd7760990611542908790600401613bde565b60206040518083038186803b15801561155a57600080fd5b505afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190613a38565b905060006115a08683611c79565b6001600160501b03198116600090815260036020526040808220549051634770d3a760e11b81529293506001600160801b0316913090638ee1a74e906115f0908a908c908b908890600401613ca0565b602060405180830381600087803b15801561160a57600080fd5b505af115801561161e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116429190613a1c565b905061164f84828a612374565b505050505b60016000805160206141af8339815191525550505050565b600a6020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156116ff5780601f106116d4576101008083540402835291602001916116ff565b820191906000526020600020905b8154815290600101906020018083116116e257829003601f168201915b505050505081565b600554600160401b900463ffffffff1681565b60055463ffffffff1681565b600554600160601b900460ff16156117505760405162461bcd60e51b81526004016107b490613ebb565b565b81515163ffffffff16600090815260076020526040902054825161177590611c49565b146117925760405162461bcd60e51b81526004016107b490613e38565b600554825151600160201b90910463ffffffff908116830160010181169116146117ce5760405162461bcd60e51b81526004016107b490613fe9565b604080518082018252600054815283516080015160208083019190915260015485820151805192810151908501519451637ae4eb4f60e11b815293946001600160a01b039092169363f5c9d69e9361182d939092918790600401613bf2565b60206040518083038186803b15801561184557600080fd5b505afa158015611859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187d9190613771565b50505050565b6000600160201b82106118c2576040805162461bcd60e51b8152602060048201526002602482015261062760f31b604482015290519081900360640190fd5b5090565b600082820163ffffffff808516908216101561190e576040805162461bcd60e51b8152602060048201526002602482015261189960f11b604482015290519081900360640190fd5b9392505050565b6000600160801b82106118c2576040805162461bcd60e51b8152602060048201526002602482015261189b60f11b604482015290519081900360640190fd5b6040805160a08101825260ff8087168252600c5416602082015261ffff8516918101919091526001600160801b038316606082015260808101829052600061199b8261241e565b905060006119a882612463565b6001600160601b031981166000908152600860209081526040808320805460ff191660011790558783526004825280832061ffff8b1684528252918290208251808401909352546001600160801b0316808352439183019190915291925090611a119087612471565b6001600160801b039081168252600086815260046020908152604080832061ffff8c1680855290835292819020855181546001600160801b03191695169490941784559084015160019093019290925590517f962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b90611a94908b9089908b906140bc565b60405180910390a25050505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094859485948b16939092909182918083835b60208310611b2c5780518252601f199092019160209182019101611b0d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b8e576040519150601f19603f3d011682016040523d82523d6000602084013e611b93565b606091505b50915091506000815160001480611bbd5750818060200190516020811015611bba57600080fd5b50515b90508280156112225750979650505050505050565b600061190e8383604051806040016040528060018152602001603b60f91b8152506124bc565b6000805160206141af833981519152805460019091558015611c46576040805162461bcd60e51b815260206004820152600260248201526118a160f11b604482015290519081900360640190fd5b50565b600081604051602001611c5c9190614004565b604051602081830303815290604052805190602001209050919050565b60a01b61ffff60a01b166001600160a01b03919091161760501b90565b611c9e613111565b8251825163ffffffff90811660019092011614611ccd5760405162461bcd60e51b81526004016107b490613f62565b826060015182606001511015611cf55760405162461bcd60e51b81526004016107b490613d25565b60008260600151611d16620151808660600151611bd290919063ffffffff16565b111590506000611d35610384866060015161255390919063ffffffff16565b846060015111159050818015611d485750805b611d645760405162461bcd60e51b81526004016107b490613ef4565b50506000611d758360a00151611035565b60e0840151519091508114611d9c5760405162461bcd60e51b81526004016107b490613f2a565b611dae83602001518460e00151612592565b611db783612718565b6040518060a00160405280846000015163ffffffff168152602001846020015181526020018460400151815260200184606001518152602001846080015181525091505092915050565b60008163ffffffff168363ffffffff1610611e1c578161190e565b5090919050565b6000611e2f8385611c79565b600c5490915060009061ffff868116610100909204161415611e675783611e5f816001600160801b038616612a4d565b915050611f79565b60025460405163dbfc296760e01b81526000916001600160a01b03169063dbfc296790611e98908990600401614071565b60206040518083038186803b158015611eb057600080fd5b505afa158015611ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee891906133d5565b604051634770d3a760e11b81529091503090638ee1a74e90620186a090611f199085908a908a908190600401613ca0565b602060405180830381600088803b158015611f3357600080fd5b5087f193505050508015611f64575060408051601f3d908101601f19168201909252611f6191810190613a1c565b60015b611f715760009150611f77565b50600191505b505b8015611fc0578461ffff167ff4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a8079393315484604051611fb39190614044565b60405180910390a2612007565b611fca8284612ab9565b8461ffff167fd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c168884604051611ffe9190614044565b60405180910390a25b5050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17815292518251600094859485948a16939092909182918083835b6020831061208c5780518252601f19909201916020918201910161206d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146120ee576040519150601f19603f3d011682016040523d82523d6000602084013e6120f3565b606091505b5091509150600081516000148061211d575081806020019051602081101561211a57600080fd5b50515b90508280156121295750805b979650505050505050565b815163ffffffff1660009081526007602052604090205461215483611c49565b146121715760405162461bcd60e51b81526004016107b490613e38565b600554825163ffffffff600160201b9092048216911611156121a55760405162461bcd60e51b81526004016107b490613d99565b6005548251600160401b90910463ffffffff908116830160010181169116146121e05760405162461bcd60e51b81526004016107b490613fe9565b815163ffffffff166000908152600a602090815260408083208054825160026001831615610100026000190190921691909104601f81018590048502820185019093528281529290919083018282801561227b5780601f106122505761010080835404028352916020019161227b565b820191906000526020600020905b81548152906001019060200180831161225e57829003601f168201915b50508351939450602493925061228f915050565b06156122ad5760405162461bcd60e51b81526004016107b490613cef565b80516000906122bd906024612b57565b90506000805b828161ffff16101561236c5760008483815181106122dd57fe5b016020015160f81c60098111156122f057fe5b9050600881600981111561230057fe5b1461231d5760405162461bcd60e51b81526004016107b490613d5d565b600061232b86856024612b7d565b9050600061233882612c39565b9050612351816020015182606001518360800151611e23565b61235c856024612553565b94505050508060010190506122c3565b505050505050565b60006123808285611c79565b6001600160501b031981166000908152600360205260409020549091506001600160801b03166123b08185612cf1565b6001600160501b031983166000908152600360205260409081902080546001600160801b0319166001600160801b0393909316929092179091555161ffff8616907ff4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a8079393315490611ffe908790614044565b60608160000151826020015183604001518460600151856080015160405160200161244d959493929190613b8d565b6040516020818303038152906040529050919050565b805160209091012060601b90565b60008282016001600160801b03808516908216101561190e576040805162461bcd60e51b8152602060048201526002602482015261189960f11b604482015290519081900360640190fd5b6000818484111561254b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156125105781810151838201526020016124f8565b50505050905090810190601f16801561253d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008282018381101561190e576040805162461bcd60e51b81526020600482015260026024820152610c4d60f21b604482015290519081900360640190fd5b805160015b60058163ffffffff1610156126f357600b6001820363ffffffff16600481106125bc57fe5b602081049091015460ff601f9092166101000a90041615612663576002838263ffffffff16600581106125eb57fe5b602002015183604051602001612602929190613b31565b60408051601f198184030181529082905261261c91613b3f565b602060405180830381855afa158015612639573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061265c91906137b5565b91506126eb565b600282848363ffffffff166005811061267857fe5b602002015160405160200161268e929190613b31565b60408051601f19818403018152908290526126a891613b3f565b602060405180830381855afa1580156126c5573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906126e891906137b5565b91505b600101612597565b508083146127135760405162461bcd60e51b81526004016107b490613d40565b505050565b60a081015160006060815b8460c0015161ffff168161ffff161015612a2557600084848151811061274557fe5b016020015160f81c600981111561275857fe5b9050600181600981111561276857fe5b14156128f557600061277c8686601c612b7d565b9050600061278982612463565b6001600160601b0319811660009081526008602052604090205490915060ff1615156001146127ca5760405162461bcd60e51b81526004016107b490613d7b565b6001600160601b0319811660009081526009602052604090205460ff16156128045760405162461bcd60e51b81526004016107b490613e57565b6001600160601b031981166000908152600960205260408120805460ff1916600117905561283183612d18565b608081015160009081526004602090815260408083208185015161ffff168452825291829020825180840190935280546001600160801b0316808452600190910154918301919091526060830151929350909161288e9190612cf1565b6001600160801b039081168252608083015160009081526004602090815260408083208187015161ffff1684528252909120835181546001600160801b03191693169290921782558201516001909101556128ea88601c612553565b975050505050612a1c565b600281600981111561290357fe5b14156129705760006129178686601c612b7d565b9050600061292482612463565b6001600160601b0319811660009081526008602052604090205490915060ff1615156001146129655760405162461bcd60e51b81526004016107b490613ed6565b600061283183612d18565b600881600981111561297e57fe5b14156129cc57600061299286866024612b7d565b905083816040516020016129a7929190613b5b565b60408051601f1981840301815291905293506129c4856024612553565b945050612a1c565b606060098260098111156129dc57fe5b1415612a02576129ee86866024612b7d565b90506129fb856024612553565b9450612a1a565b60405162461bcd60e51b81526004016107b490613f98565b505b50600101612723565b50835163ffffffff166000908152600a6020908152604090912082516120079284019061313f565b600080836001600160a01b0316620186a084604051612a6b90613b8a565b600060405180830381858888f193505050503d8060008114612aa9576040519150601f19603f3d011682016040523d82523d6000602084013e612aae565b606091505b509095945050505050565b6001600160501b03198216600090815260036020526040908190205481518083019092526001600160801b03169080612af28385612471565b6001600160801b03908116825260ff60209283018190526001600160501b031990961660009081526003835260409020835181549490930151909616600160801b0260ff60801b19929091166001600160801b03199093169290921716179092555050565b600061190e8383604051806040016040528060018152602001600f60fb1b815250612d96565b606081830184511015612bbb576040805162461bcd60e51b81526020600482015260016024820152602d60f91b604482015290519081900360640190fd5b6000826001600160401b0381118015612bd357600080fd5b506040519080825280601f01601f191660200182016040528015612bfe576020820181803683370190505b5090508215612c3157602081018381016020860187015b81831015612c2d578051835260209283019201612c15565b5050505b949350505050565b612c416131bb565b6001612c4d8382612dfb565b60ff1683529050612c5e8382612e27565b61ffff1660208401529050612c738382612e40565b63ffffffff1660408401529050612c8a8382612e50565b6001600160a01b031660608401529050612ca48382612e60565b6001600160801b031660808401529050612cbe8382612e40565b63ffffffff1660a0840152905060248114612ceb5760405162461bcd60e51b81526004016107b490613e76565b50919050565b600061190e838360405180604001604052806002815260200161616160f01b815250612e70565b612d20613111565b6001612d2c8382612dfb565b60ff1660208401529050612d408382612e27565b61ffff1660408401529050612d558382612e60565b6001600160801b031660608401529050612d6f8382612ed5565b60808401529050601c8114612ceb5760405162461bcd60e51b81526004016107b490613e76565b60008183612de55760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156125105781810151838201526020016124f8565b506000838581612df157fe5b0495945050505050565b600080826001019150838381518110612e1057fe5b602001015160f81c60f81b60f81c90509250929050565b600281016000612e378484612ee5565b90509250929050565b600481016000612e378484612f33565b601481016000612e378484612f76565b601081016000612e378484612fb9565b6000836001600160801b0316836001600160801b03161115829061254b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156125105781810151838201526020016124f8565b602081016000612e378484612ffc565b6000808260020190508084511015612f28576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b929092015192915050565b6000808260040190508084511015612f28576040805162461bcd60e51b81526020600482015260016024820152602b60f91b604482015290519081900360640190fd5b6000808260140190508084511015612f28576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b6000808260100190508084511015612f28576040805162461bcd60e51b81526020600482015260016024820152605760f81b604482015290519081900360640190fd5b6000808260200190508084511015612f28576040805162461bcd60e51b81526020600482015260016024820152605960f81b604482015290519081900360640190fd5b6001830191839082156130c15791602002820160005b8382111561309257835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302613055565b80156130bf5782816101000a81549060ff0219169055600101602081600001049283019260010302613092565b505b506118c29291506131f0565b50805460018160011615610100020316600290046000825580601f106130f35750611c46565b601f016020900490600052602060002090810190611c4691906131f0565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261317557600085556130c1565b82601f1061318e57805160ff19168380011785556130c1565b828001600101855582156130c1579182015b828111156130c15782518255916020019190600101906131a0565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b5b808211156118c257600081556001016131f1565b600082601f830112613215578081fd5b60405160a081018181106001600160401b038211171561323157fe5b604052808360a08101861015613245578384fd5b835b6005811015613266578135835260209283019290910190600101613247565b509195945050505050565b600082601f830112613281578081fd5b604051604081018181106001600160401b038211171561329d57fe5b80604052508083856040860111156132b3578384fd5b835b60028110156132665781358352602092830192909101906001016132b5565b600082601f8301126132e4578081fd5b81356001600160401b038111156132f757fe5b61330a601f8201601f19166020016140e0565b81815284602083860101111561331e578283fd5b816020850160208301379081016020019190915292915050565b600060a08284031215613349578081fd5b60405160a081018181106001600160401b038211171561336557fe5b604052905080613374836133b0565b8152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b803561108a8161419e565b803563ffffffff8116811461108a57600080fd5b803560ff8116811461108a57600080fd5b6000602082840312156133e6578081fd5b815161190e81614166565b600080600080600080600080610160808a8c03121561340e578485fd5b893561341981614166565b985060208a81013561342a81614166565b985061343860408c016133b0565b975060608b0135965060808b0135955060a08b0135945060c08b013593508b60ff8c0112613464578283fd5b6134766134716004614103565b6140e0565b8060e08d018e858f011115613489578586fd5b8594505b60048510156134b55780356134a18161417b565b83526001949094019391830191830161348d565b50809450505050509295985092959890939650565b6000806000606084860312156134de578081fd5b83356134e981614166565b925060208401356134f981614166565b9150604084013561350981614189565b809150509250925092565b60008060408385031215613526578182fd5b823561353181614166565b9150602083013561354181614166565b809150509250929050565b6000602080838503121561355e578182fd5b82356001600160401b03811115613573578283fd5b8301601f81018513613583578283fd5b80356135916134718261411d565b8181528381019083850160a0808502860187018a10156135af578788fd5b8795505b848610156135db576135c58a83613338565b84526001959095019492860192908101906135b3565b509098975050505050505050565b6000602082840312156135fa578081fd5b6001600160401b03808335111561360f578182fd5b8235830184601f820112613621578283fd5b803561362f6134718261411d565b80828252602082019150602084018860206101a086028701011115613652578687fd5b8694505b83851015613765576101a0818a03121561366e578687fd5b60405160408101818110888211171561368357fe5b6040526136908a83613338565b8152610100828b03609f190112156136a6578788fd5b6040516060810181811089821117156136bb57fe5b6040526136cb8b60a08501613271565b81528a60ff8401126136db578889fd5b6136e86134716002614103565b8060e085018d610160870111156136fd578b8cfd5b8b5b6002811015613729576137128f83613271565b8452602090930192604091909101906001016136ff565b505060208301525061373f8b6101608501613271565b60408201526020828101919091529084526001959095019492909201916101a001613656565b50979650505050505050565b600060208284031215613782578081fd5b815161190e8161417b565b60006020828403121561379e578081fd5b81356001600160601b03198116811461190e578182fd5b6000602082840312156137c6578081fd5b5051919050565b600080604083850312156137df578182fd5b8235915060208301356135418161419e565b60008060208385031215613803578182fd5b82356001600160401b0380821115613819578384fd5b818501915085601f83011261382c578384fd5b81358181111561383a578485fd5b86602082850101111561384b578485fd5b60209290920196919550909350505050565b60006020828403121561386e578081fd5b81356001600160401b03811115613883578182fd5b612c31848285016132d4565b600080600080608085870312156138a4578182fd5b84356138af81614166565b935060208501356138bf81614166565b925060408501356138cf81614189565b915060608501356138df81614189565b939692955090935050565b60008060c083850312156138fc578182fd5b6139068484613338565b915060a08301356001600160401b0380821115613921578283fd5b818501915085601f830112613934578283fd5b813560206139446134718361411d565b82815281810190858301875b85811015613a0b5781358801610180818e03601f1901121561397057898afd5b61397b6101006140e0565b6139868783016133b0565b8152604082013587820152606082013560408201526080820135606082015260a0820135608082015260c0820135898111156139c0578b8cfd5b6139ce8f89838601016132d4565b60a0830152506139e060e083016133a5565b60c08201526139f38e6101008401613205565b60e08201528552509284019290840190600101613950565b50979a909950975050505050505050565b600060208284031215613a2d578081fd5b815161190e81614189565b600060208284031215613a49578081fd5b815161190e8161419e565b600060208284031215613a65578081fd5b5035919050565b600060208284031215613a7d578081fd5b61190e826133b0565b60008060408385031215613a98578182fd5b613aa1836133c4565b946020939093013593505050565b60008060008060808587031215613ac4578182fd5b613acd856133c4565b93506020850135613add81614166565b925060408501356cffffffffffffffffffffffffff81168114613afe578283fd5b9396929550929360600135925050565b8060005b600281101561187d578151845260209384019390910190600101613b12565b918252602082015260400190565b60008251613b5181846020870161413a565b9190910192915050565b60008351613b6d81846020880161413a565b835190830190613b8181836020880161413a565b01949350505050565b90565b60f895861b6001600160f81b031990811682529490951b909316600185015260f09190911b6001600160f01b031916600284015260801b6001600160801b0319166004830152601482015260340190565b6001600160a01b0391909116815260200190565b6101408101613c018287613b0e565b60408083018660005b6002811015613c3157613c1e838351613b0e565b9183019160209190910190600101613c0a565b50505050613c4260c0830185613b0e565b613c50610100830184613b0e565b95945050505050565b901515815260200190565b90815260200190565b6000602082528251806020840152613c8c81604085016020870161413a565b601f01601f19169190910160400192915050565b6001600160a01b0394851681529290931660208301526001600160801b039081166040830152909116606082015260800190565b6020808252600190820152604360f81b604082015260600190565b6020808252600190820152604160f81b604082015260600190565b6020808252600190820152606360f81b604082015260600190565b6020808252600190820152606760f81b604082015260600190565b6020808252600390820152620696d760ec1b604082015260600190565b602080825260049082015263069776f760e41b604082015260600190565b6020808252600490820152631a5bdc1960e21b604082015260600190565b6020808252600190820152606160f81b604082015260600190565b6020808252600190820152603960f91b604082015260600190565b6020808252600a90820152696e6f742065787069727960b01b604082015260600190565b6020808252600190820152603760f81b604082015260600190565b60208082526010908201526f6e6f74206c617465737420626c6f636b60801b604082015260600190565b602080825260059082015264065786531360dc1b604082015260600190565b6020808252600590820152641a595bdc1960da1b604082015260600190565b6020808252600190820152602760f91b604082015260600190565b60208082526010908201526f185b1c9958591e48195e1958dd5d195960821b604082015260600190565b6020808252600190820152601360fa1b604082015260600190565b6020808252600490820152631a5bdc1b60e21b604082015260600190565b6020808252600190820152600d60fb1b604082015260600190565b6020808252600190820152603160f91b604082015260600190565b6020808252600390820152620696f760ec1b604082015260600190565b6020808252600190820152603560f81b604082015260600190565b6020808252600190820152603360f91b604082015260600190565b6020808252600190820152601b60f91b604082015260600190565b6020808252600190820152602360f91b604082015260600190565b6020808252600190820152606960f81b604082015260600190565b6020808252600190820152601960fa1b604082015260600190565b6020808252600190820152606b60f81b604082015260600190565b600060a08201905063ffffffff83511682526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b6001600160801b0391909116815260200190565b6001600160801b03929092168252602082015260400190565b61ffff91909116815260200190565b63ffffffff91909116815260200190565b63ffffffff92831681529116602082015260400190565b6001600160401b0391909116815260200190565b60ff93909316835260208301919091526001600160801b0316604082015260600190565b6040518181016001600160401b03811182821017156140fb57fe5b604052919050565b60006001600160401b0382111561411657fe5b5060200290565b60006001600160401b0382111561413057fe5b5060209081020190565b60005b8381101561415557818101518382015260200161413d565b8381111561187d5750506000910152565b6001600160a01b0381168114611c4657600080fd5b8015158114611c4657600080fd5b6001600160801b0381168114611c4657600080fd5b61ffff81168114611c4657600080fdfe8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4a264697066735822122067dd83a1932eacb36a5109df08345dc16b34c5dcca561e02634f9b2953620ae264736f6c63430007060033",
}

// ZecreyABI is the input ABI used to generate the binding from.
// Deprecated: Use ZecreyMetaData.ABI instead.
var ZecreyABI = ZecreyMetaData.ABI

// ZecreyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ZecreyMetaData.Bin instead.
var ZecreyBin = ZecreyMetaData.Bin

// DeployZecrey deploys a new Ethereum contract, binding an instance of Zecrey to it.
func DeployZecrey(auth *bind.TransactOpts, backend bind.ContractBackend, _chainId uint8, _nativeAssetId uint16, _maxPendingBlocks uint16) (common.Address, *types.Transaction, *Zecrey, error) {
	parsed, err := ZecreyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ZecreyBin), backend, _chainId, _nativeAssetId, _maxPendingBlocks)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// Zecrey is an auto generated Go binding around an Ethereum contract.
type Zecrey struct {
	ZecreyCaller     // Read-only binding to the contract
	ZecreyTransactor // Write-only binding to the contract
	ZecreyFilterer   // Log filterer for contract events
}

// ZecreyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZecreyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZecreyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZecreyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZecreySession struct {
	Contract     *Zecrey           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZecreyCallerSession struct {
	Contract *ZecreyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ZecreyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZecreyTransactorSession struct {
	Contract     *ZecreyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZecreyRaw struct {
	Contract *Zecrey // Generic contract binding to access the raw methods on
}

// ZecreyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZecreyCallerRaw struct {
	Contract *ZecreyCaller // Generic read-only contract binding to access the raw methods on
}

// ZecreyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZecreyTransactorRaw struct {
	Contract *ZecreyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZecrey creates a new instance of Zecrey, bound to a specific deployed contract.
func NewZecrey(address common.Address, backend bind.ContractBackend) (*Zecrey, error) {
	contract, err := bindZecrey(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// NewZecreyCaller creates a new read-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyCaller(address common.Address, caller bind.ContractCaller) (*ZecreyCaller, error) {
	contract, err := bindZecrey(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyCaller{contract: contract}, nil
}

// NewZecreyTransactor creates a new write-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyTransactor(address common.Address, transactor bind.ContractTransactor) (*ZecreyTransactor, error) {
	contract, err := bindZecrey(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyTransactor{contract: contract}, nil
}

// NewZecreyFilterer creates a new log filterer instance of Zecrey, bound to a specific deployed contract.
func NewZecreyFilterer(address common.Address, filterer bind.ContractFilterer) (*ZecreyFilterer, error) {
	contract, err := bindZecrey(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZecreyFilterer{contract: contract}, nil
}

// bindZecrey binds a generic wrapper to an already deployed contract.
func bindZecrey(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.ZecreyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transact(opts, method, params...)
}

// OnchainOpsMerkleHelper is a free data retrieval call binding the contract method 0x9b9e91b6.
//
// Solidity: function _onchainOpsMerkleHelper(uint256 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsMerkleHelper(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "_onchainOpsMerkleHelper", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsMerkleHelper is a free data retrieval call binding the contract method 0x9b9e91b6.
//
// Solidity: function _onchainOpsMerkleHelper(uint256 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsMerkleHelper(arg0 *big.Int) (bool, error) {
	return _Zecrey.Contract.OnchainOpsMerkleHelper(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsMerkleHelper is a free data retrieval call binding the contract method 0x9b9e91b6.
//
// Solidity: function _onchainOpsMerkleHelper(uint256 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsMerkleHelper(arg0 *big.Int) (bool, error) {
	return _Zecrey.Contract.OnchainOpsMerkleHelper(&_Zecrey.CallOpts, arg0)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCaller) AccountRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "accountRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreySession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// BlockOnchainOpsPubData is a free data retrieval call binding the contract method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreyCaller) BlockOnchainOpsPubData(opts *bind.CallOpts, arg0 uint32) ([]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "blockOnchainOpsPubData", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// BlockOnchainOpsPubData is a free data retrieval call binding the contract method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreySession) BlockOnchainOpsPubData(arg0 uint32) ([]byte, error) {
	return _Zecrey.Contract.BlockOnchainOpsPubData(&_Zecrey.CallOpts, arg0)
}

// BlockOnchainOpsPubData is a free data retrieval call binding the contract method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreyCallerSession) BlockOnchainOpsPubData(arg0 uint32) ([]byte, error) {
	return _Zecrey.Contract.BlockOnchainOpsPubData(&_Zecrey.CallOpts, arg0)
}

// ComputeOnchainOpsHash is a free data retrieval call binding the contract method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreyCaller) ComputeOnchainOpsHash(opts *bind.CallOpts, _onchainOpsPubData []byte) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "computeOnchainOpsHash", _onchainOpsPubData)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeOnchainOpsHash is a free data retrieval call binding the contract method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreySession) ComputeOnchainOpsHash(_onchainOpsPubData []byte) ([32]byte, error) {
	return _Zecrey.Contract.ComputeOnchainOpsHash(&_Zecrey.CallOpts, _onchainOpsPubData)
}

// ComputeOnchainOpsHash is a free data retrieval call binding the contract method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreyCallerSession) ComputeOnchainOpsHash(_onchainOpsPubData []byte) ([32]byte, error) {
	return _Zecrey.Contract.ComputeOnchainOpsHash(&_Zecrey.CallOpts, _onchainOpsPubData)
}

// ExodusMode is a free data retrieval call binding the contract method 0x264c0912.
//
// Solidity: function exodusMode() view returns(bool)
func (_Zecrey *ZecreyCaller) ExodusMode(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "exodusMode")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ExodusMode is a free data retrieval call binding the contract method 0x264c0912.
//
// Solidity: function exodusMode() view returns(bool)
func (_Zecrey *ZecreySession) ExodusMode() (bool, error) {
	return _Zecrey.Contract.ExodusMode(&_Zecrey.CallOpts)
}

// ExodusMode is a free data retrieval call binding the contract method 0x264c0912.
//
// Solidity: function exodusMode() view returns(bool)
func (_Zecrey *ZecreyCallerSession) ExodusMode() (bool, error) {
	return _Zecrey.Contract.ExodusMode(&_Zecrey.CallOpts)
}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreyCaller) FirstPriorityRequestId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "firstPriorityRequestId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreySession) FirstPriorityRequestId() (uint64, error) {
	return _Zecrey.Contract.FirstPriorityRequestId(&_Zecrey.CallOpts)
}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreyCallerSession) FirstPriorityRequestId() (uint64, error) {
	return _Zecrey.Contract.FirstPriorityRequestId(&_Zecrey.CallOpts)
}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreyCaller) GetPendingBalance(opts *bind.CallOpts, _address common.Address, _assetAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getPendingBalance", _address, _assetAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreySession) GetPendingBalance(_address common.Address, _assetAddr common.Address) (*big.Int, error) {
	return _Zecrey.Contract.GetPendingBalance(&_Zecrey.CallOpts, _address, _assetAddr)
}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreyCallerSession) GetPendingBalance(_address common.Address, _assetAddr common.Address) (*big.Int, error) {
	return _Zecrey.Contract.GetPendingBalance(&_Zecrey.CallOpts, _address, _assetAddr)
}

// OnchainOpsCheck is a free data retrieval call binding the contract method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsCheck(opts *bind.CallOpts, arg0 [20]byte) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOpsCheck", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsCheck is a free data retrieval call binding the contract method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsCheck(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsCheck(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsCheck is a free data retrieval call binding the contract method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsCheck(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsCheck(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsExecuted is a free data retrieval call binding the contract method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsExecuted(opts *bind.CallOpts, arg0 [20]byte) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOpsExecuted", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsExecuted is a free data retrieval call binding the contract method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsExecuted(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsExecuted(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsExecuted is a free data retrieval call binding the contract method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsExecuted(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsExecuted(&_Zecrey.CallOpts, arg0)
}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCaller) StoredBlockHeaderHashes(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "storedBlockHeaderHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreySession) StoredBlockHeaderHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHeaderHashes(&_Zecrey.CallOpts, arg0)
}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) StoredBlockHeaderHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHeaderHashes(&_Zecrey.CallOpts, arg0)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksCommitted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksCommitted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksExecuted is a free data retrieval call binding the contract method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksExecuted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksExecuted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksExecuted is a free data retrieval call binding the contract method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksExecuted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksExecuted(&_Zecrey.CallOpts)
}

// TotalBlocksExecuted is a free data retrieval call binding the contract method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksExecuted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksExecuted(&_Zecrey.CallOpts)
}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksVerified(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksVerified")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksVerified() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksVerified(&_Zecrey.CallOpts)
}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksVerified() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksVerified(&_Zecrey.CallOpts)
}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreyCaller) TotalOpenPriorityRequests(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalOpenPriorityRequests")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreySession) TotalOpenPriorityRequests() (uint64, error) {
	return _Zecrey.Contract.TotalOpenPriorityRequests(&_Zecrey.CallOpts)
}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreyCallerSession) TotalOpenPriorityRequests() (uint64, error) {
	return _Zecrey.Contract.TotalOpenPriorityRequests(&_Zecrey.CallOpts)
}

// UnhandledBalances is a free data retrieval call binding the contract method 0xce6f00a8.
//
// Solidity: function unhandledBalances(bytes32 , uint16 ) view returns(uint128 unhandledBalance, uint256 blockNumber)
func (_Zecrey *ZecreyCaller) UnhandledBalances(opts *bind.CallOpts, arg0 [32]byte, arg1 uint16) (struct {
	UnhandledBalance *big.Int
	BlockNumber      *big.Int
}, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "unhandledBalances", arg0, arg1)

	outstruct := new(struct {
		UnhandledBalance *big.Int
		BlockNumber      *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.UnhandledBalance = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UnhandledBalances is a free data retrieval call binding the contract method 0xce6f00a8.
//
// Solidity: function unhandledBalances(bytes32 , uint16 ) view returns(uint128 unhandledBalance, uint256 blockNumber)
func (_Zecrey *ZecreySession) UnhandledBalances(arg0 [32]byte, arg1 uint16) (struct {
	UnhandledBalance *big.Int
	BlockNumber      *big.Int
}, error) {
	return _Zecrey.Contract.UnhandledBalances(&_Zecrey.CallOpts, arg0, arg1)
}

// UnhandledBalances is a free data retrieval call binding the contract method 0xce6f00a8.
//
// Solidity: function unhandledBalances(bytes32 , uint16 ) view returns(uint128 unhandledBalance, uint256 blockNumber)
func (_Zecrey *ZecreyCallerSession) UnhandledBalances(arg0 [32]byte, arg1 uint16) (struct {
	UnhandledBalance *big.Int
	BlockNumber      *big.Int
}, error) {
	return _Zecrey.Contract.UnhandledBalances(&_Zecrey.CallOpts, arg0, arg1)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactor) TransferERC20(opts *bind.TransactOpts, _token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "_transferERC20", _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreySession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactorSession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x6f950a51.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[5])[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactor) CommitBlocks(opts *bind.TransactOpts, _lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "commitBlocks", _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x6f950a51.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[5])[] _newBlocksData) returns()
func (_Zecrey *ZecreySession) CommitBlocks(_lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x6f950a51.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[5])[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactorSession) CommitBlocks(_lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// DepositOrLockERC20 is a paid mutator transaction binding the contract method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _opType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreyTransactor) DepositOrLockERC20(opts *bind.TransactOpts, _opType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "depositOrLockERC20", _opType, _token, _amount, _accountName)
}

// DepositOrLockERC20 is a paid mutator transaction binding the contract method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _opType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreySession) DepositOrLockERC20(_opType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockERC20(&_Zecrey.TransactOpts, _opType, _token, _amount, _accountName)
}

// DepositOrLockERC20 is a paid mutator transaction binding the contract method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _opType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreyTransactorSession) DepositOrLockERC20(_opType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockERC20(&_Zecrey.TransactOpts, _opType, _token, _amount, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the contract method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _opType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreyTransactor) DepositOrLockNativeAsset(opts *bind.TransactOpts, _opType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "depositOrLockNativeAsset", _opType, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the contract method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _opType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreySession) DepositOrLockNativeAsset(_opType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockNativeAsset(&_Zecrey.TransactOpts, _opType, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the contract method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _opType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreyTransactorSession) DepositOrLockNativeAsset(_opType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockNativeAsset(&_Zecrey.TransactOpts, _opType, _accountName)
}

// ExecuteBlocks is a paid mutator transaction binding the contract method 0xa0b94d61.
//
// Solidity: function executeBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks) returns()
func (_Zecrey *ZecreyTransactor) ExecuteBlocks(opts *bind.TransactOpts, _blocks []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "executeBlocks", _blocks)
}

// ExecuteBlocks is a paid mutator transaction binding the contract method 0xa0b94d61.
//
// Solidity: function executeBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks) returns()
func (_Zecrey *ZecreySession) ExecuteBlocks(_blocks []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.ExecuteBlocks(&_Zecrey.TransactOpts, _blocks)
}

// ExecuteBlocks is a paid mutator transaction binding the contract method 0xa0b94d61.
//
// Solidity: function executeBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks) returns()
func (_Zecrey *ZecreyTransactorSession) ExecuteBlocks(_blocks []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.ExecuteBlocks(&_Zecrey.TransactOpts, _blocks)
}

// ForceWithdrawUnhandledBalance is a paid mutator transaction binding the contract method 0x86d0c7bf.
//
// Solidity: function forceWithdrawUnhandledBalance(bytes32 _accountName, uint16 _assetId) returns()
func (_Zecrey *ZecreyTransactor) ForceWithdrawUnhandledBalance(opts *bind.TransactOpts, _accountName [32]byte, _assetId uint16) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "forceWithdrawUnhandledBalance", _accountName, _assetId)
}

// ForceWithdrawUnhandledBalance is a paid mutator transaction binding the contract method 0x86d0c7bf.
//
// Solidity: function forceWithdrawUnhandledBalance(bytes32 _accountName, uint16 _assetId) returns()
func (_Zecrey *ZecreySession) ForceWithdrawUnhandledBalance(_accountName [32]byte, _assetId uint16) (*types.Transaction, error) {
	return _Zecrey.Contract.ForceWithdrawUnhandledBalance(&_Zecrey.TransactOpts, _accountName, _assetId)
}

// ForceWithdrawUnhandledBalance is a paid mutator transaction binding the contract method 0x86d0c7bf.
//
// Solidity: function forceWithdrawUnhandledBalance(bytes32 _accountName, uint16 _assetId) returns()
func (_Zecrey *ZecreyTransactorSession) ForceWithdrawUnhandledBalance(_accountName [32]byte, _assetId uint16) (*types.Transaction, error) {
	return _Zecrey.Contract.ForceWithdrawUnhandledBalance(&_Zecrey.TransactOpts, _accountName, _assetId)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreyTransactor) Initialize(opts *bind.TransactOpts, initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "initialize", initializationParameters)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreySession) Initialize(initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.Contract.Initialize(&_Zecrey.TransactOpts, initializationParameters)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreyTransactorSession) Initialize(initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.Contract.Initialize(&_Zecrey.TransactOpts, initializationParameters)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x75329d6b.
//
// Solidity: function revertBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocksToRevert) returns()
func (_Zecrey *ZecreyTransactor) RevertBlocks(opts *bind.TransactOpts, _blocksToRevert []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "revertBlocks", _blocksToRevert)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x75329d6b.
//
// Solidity: function revertBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocksToRevert) returns()
func (_Zecrey *ZecreySession) RevertBlocks(_blocksToRevert []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.RevertBlocks(&_Zecrey.TransactOpts, _blocksToRevert)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x75329d6b.
//
// Solidity: function revertBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocksToRevert) returns()
func (_Zecrey *ZecreyTransactorSession) RevertBlocks(_blocksToRevert []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.RevertBlocks(&_Zecrey.TransactOpts, _blocksToRevert)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0x0d09454e.
//
// Solidity: function verifyBlocks(((uint32,bytes32,bytes32,uint256,bytes32),(uint256[2],uint256[2][2],uint256[2]))[] _blocks) returns()
func (_Zecrey *ZecreyTransactor) VerifyBlocks(opts *bind.TransactOpts, _blocks []ZecreyVerifyBlockInfo) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "verifyBlocks", _blocks)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0x0d09454e.
//
// Solidity: function verifyBlocks(((uint32,bytes32,bytes32,uint256,bytes32),(uint256[2],uint256[2][2],uint256[2]))[] _blocks) returns()
func (_Zecrey *ZecreySession) VerifyBlocks(_blocks []ZecreyVerifyBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.VerifyBlocks(&_Zecrey.TransactOpts, _blocks)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0x0d09454e.
//
// Solidity: function verifyBlocks(((uint32,bytes32,bytes32,uint256,bytes32),(uint256[2],uint256[2][2],uint256[2]))[] _blocks) returns()
func (_Zecrey *ZecreyTransactorSession) VerifyBlocks(_blocks []ZecreyVerifyBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.VerifyBlocks(&_Zecrey.TransactOpts, _blocks)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreyTransactor) WithdrawPendingBalance(opts *bind.TransactOpts, _owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "withdrawPendingBalance", _owner, _token, _amount)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreySession) WithdrawPendingBalance(_owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.WithdrawPendingBalance(&_Zecrey.TransactOpts, _owner, _token, _amount)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreyTransactorSession) WithdrawPendingBalance(_owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.WithdrawPendingBalance(&_Zecrey.TransactOpts, _owner, _token, _amount)
}

// ZecreyBlockCommitIterator is returned from FilterBlockCommit and is used to iterate over the raw logs and unpacked data for BlockCommit events raised by the Zecrey contract.
type ZecreyBlockCommitIterator struct {
	Event *ZecreyBlockCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockCommit represents a BlockCommit event raised by the Zecrey contract.
type ZecreyBlockCommit struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockCommit is a free log retrieval operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockCommit(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockCommitIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockCommit", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockCommitIterator{contract: _Zecrey.contract, event: "BlockCommit", logs: logs, sub: sub}, nil
}

// WatchBlockCommit is a free log subscription operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockCommit(opts *bind.WatchOpts, sink chan<- *ZecreyBlockCommit, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockCommit", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockCommit)
				if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockCommit is a log parse operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockCommit(log types.Log) (*ZecreyBlockCommit, error) {
	event := new(ZecreyBlockCommit)
	if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlockExecutionIterator is returned from FilterBlockExecution and is used to iterate over the raw logs and unpacked data for BlockExecution events raised by the Zecrey contract.
type ZecreyBlockExecutionIterator struct {
	Event *ZecreyBlockExecution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockExecutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockExecution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockExecution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockExecutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockExecutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockExecution represents a BlockExecution event raised by the Zecrey contract.
type ZecreyBlockExecution struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockExecution is a free log retrieval operation binding the contract event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockExecution(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockExecutionIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockExecution", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockExecutionIterator{contract: _Zecrey.contract, event: "BlockExecution", logs: logs, sub: sub}, nil
}

// WatchBlockExecution is a free log subscription operation binding the contract event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockExecution(opts *bind.WatchOpts, sink chan<- *ZecreyBlockExecution, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockExecution", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockExecution)
				if err := _Zecrey.contract.UnpackLog(event, "BlockExecution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockExecution is a log parse operation binding the contract event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockExecution(log types.Log) (*ZecreyBlockExecution, error) {
	event := new(ZecreyBlockExecution)
	if err := _Zecrey.contract.UnpackLog(event, "BlockExecution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlockVerificationIterator is returned from FilterBlockVerification and is used to iterate over the raw logs and unpacked data for BlockVerification events raised by the Zecrey contract.
type ZecreyBlockVerificationIterator struct {
	Event *ZecreyBlockVerification // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockVerificationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockVerification)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockVerification)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockVerificationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockVerificationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockVerification represents a BlockVerification event raised by the Zecrey contract.
type ZecreyBlockVerification struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockVerification is a free log retrieval operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockVerification(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockVerificationIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockVerification", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockVerificationIterator{contract: _Zecrey.contract, event: "BlockVerification", logs: logs, sub: sub}, nil
}

// WatchBlockVerification is a free log subscription operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockVerification(opts *bind.WatchOpts, sink chan<- *ZecreyBlockVerification, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockVerification", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockVerification)
				if err := _Zecrey.contract.UnpackLog(event, "BlockVerification", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockVerification is a log parse operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockVerification(log types.Log) (*ZecreyBlockVerification, error) {
	event := new(ZecreyBlockVerification)
	if err := _Zecrey.contract.UnpackLog(event, "BlockVerification", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlocksRevertIterator is returned from FilterBlocksRevert and is used to iterate over the raw logs and unpacked data for BlocksRevert events raised by the Zecrey contract.
type ZecreyBlocksRevertIterator struct {
	Event *ZecreyBlocksRevert // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlocksRevertIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlocksRevert)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlocksRevert)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlocksRevertIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlocksRevertIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlocksRevert represents a BlocksRevert event raised by the Zecrey contract.
type ZecreyBlocksRevert struct {
	TotalBlocksVerified  uint32
	TotalBlocksCommitted uint32
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterBlocksRevert is a free log retrieval operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) FilterBlocksRevert(opts *bind.FilterOpts) (*ZecreyBlocksRevertIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlocksRevert")
	if err != nil {
		return nil, err
	}
	return &ZecreyBlocksRevertIterator{contract: _Zecrey.contract, event: "BlocksRevert", logs: logs, sub: sub}, nil
}

// WatchBlocksRevert is a free log subscription operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) WatchBlocksRevert(opts *bind.WatchOpts, sink chan<- *ZecreyBlocksRevert) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlocksRevert")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlocksRevert)
				if err := _Zecrey.contract.UnpackLog(event, "BlocksRevert", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlocksRevert is a log parse operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) ParseBlocksRevert(log types.Log) (*ZecreyBlocksRevert, error) {
	event := new(ZecreyBlocksRevert)
	if err := _Zecrey.contract.UnpackLog(event, "BlocksRevert", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositCommitIterator is returned from FilterDepositCommit and is used to iterate over the raw logs and unpacked data for DepositCommit events raised by the Zecrey contract.
type ZecreyDepositCommitIterator struct {
	Event *ZecreyDepositCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDepositCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDepositCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDepositCommit represents a DepositCommit event raised by the Zecrey contract.
type ZecreyDepositCommit struct {
	ZecreyBlockNumber uint32
	AccountIndex      uint32
	AccountName       [32]byte
	AssetId           uint16
	Amount            *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterDepositCommit is a free log retrieval operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterDepositCommit(opts *bind.FilterOpts, zecreyBlockNumber []uint32, accountIndex []uint32, assetId []uint16) (*ZecreyDepositCommitIterator, error) {

	var zecreyBlockNumberRule []interface{}
	for _, zecreyBlockNumberItem := range zecreyBlockNumber {
		zecreyBlockNumberRule = append(zecreyBlockNumberRule, zecreyBlockNumberItem)
	}
	var accountIndexRule []interface{}
	for _, accountIndexItem := range accountIndex {
		accountIndexRule = append(accountIndexRule, accountIndexItem)
	}

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "DepositCommit", zecreyBlockNumberRule, accountIndexRule, assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositCommitIterator{contract: _Zecrey.contract, event: "DepositCommit", logs: logs, sub: sub}, nil
}

// WatchDepositCommit is a free log subscription operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchDepositCommit(opts *bind.WatchOpts, sink chan<- *ZecreyDepositCommit, zecreyBlockNumber []uint32, accountIndex []uint32, assetId []uint16) (event.Subscription, error) {

	var zecreyBlockNumberRule []interface{}
	for _, zecreyBlockNumberItem := range zecreyBlockNumber {
		zecreyBlockNumberRule = append(zecreyBlockNumberRule, zecreyBlockNumberItem)
	}
	var accountIndexRule []interface{}
	for _, accountIndexItem := range accountIndex {
		accountIndexRule = append(accountIndexRule, accountIndexItem)
	}

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "DepositCommit", zecreyBlockNumberRule, accountIndexRule, assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDepositCommit)
				if err := _Zecrey.contract.UnpackLog(event, "DepositCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositCommit is a log parse operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseDepositCommit(log types.Log) (*ZecreyDepositCommit, error) {
	event := new(ZecreyDepositCommit)
	if err := _Zecrey.contract.UnpackLog(event, "DepositCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositOrLockIterator is returned from FilterDepositOrLock and is used to iterate over the raw logs and unpacked data for DepositOrLock events raised by the Zecrey contract.
type ZecreyDepositOrLockIterator struct {
	Event *ZecreyDepositOrLock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositOrLockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDepositOrLock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDepositOrLock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositOrLockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositOrLockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDepositOrLock represents a DepositOrLock event raised by the Zecrey contract.
type ZecreyDepositOrLock struct {
	OpType      uint8
	AssetId     uint16
	AccountName [32]byte
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDepositOrLock is a free log retrieval operation binding the contract event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 indexed assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterDepositOrLock(opts *bind.FilterOpts, assetId []uint16) (*ZecreyDepositOrLockIterator, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "DepositOrLock", assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositOrLockIterator{contract: _Zecrey.contract, event: "DepositOrLock", logs: logs, sub: sub}, nil
}

// WatchDepositOrLock is a free log subscription operation binding the contract event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 indexed assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchDepositOrLock(opts *bind.WatchOpts, sink chan<- *ZecreyDepositOrLock, assetId []uint16) (event.Subscription, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "DepositOrLock", assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDepositOrLock)
				if err := _Zecrey.contract.UnpackLog(event, "DepositOrLock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositOrLock is a log parse operation binding the contract event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 indexed assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseDepositOrLock(log types.Log) (*ZecreyDepositOrLock, error) {
	event := new(ZecreyDepositOrLock)
	if err := _Zecrey.contract.UnpackLog(event, "DepositOrLock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyExodusModeIterator is returned from FilterExodusMode and is used to iterate over the raw logs and unpacked data for ExodusMode events raised by the Zecrey contract.
type ZecreyExodusModeIterator struct {
	Event *ZecreyExodusMode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyExodusModeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyExodusMode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyExodusMode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyExodusModeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyExodusModeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyExodusMode represents a ExodusMode event raised by the Zecrey contract.
type ZecreyExodusMode struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterExodusMode is a free log retrieval operation binding the contract event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) FilterExodusMode(opts *bind.FilterOpts) (*ZecreyExodusModeIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "ExodusMode")
	if err != nil {
		return nil, err
	}
	return &ZecreyExodusModeIterator{contract: _Zecrey.contract, event: "ExodusMode", logs: logs, sub: sub}, nil
}

// WatchExodusMode is a free log subscription operation binding the contract event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) WatchExodusMode(opts *bind.WatchOpts, sink chan<- *ZecreyExodusMode) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "ExodusMode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyExodusMode)
				if err := _Zecrey.contract.UnpackLog(event, "ExodusMode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExodusMode is a log parse operation binding the contract event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) ParseExodusMode(log types.Log) (*ZecreyExodusMode, error) {
	event := new(ZecreyExodusMode)
	if err := _Zecrey.contract.UnpackLog(event, "ExodusMode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyFullExitCommitIterator is returned from FilterFullExitCommit and is used to iterate over the raw logs and unpacked data for FullExitCommit events raised by the Zecrey contract.
type ZecreyFullExitCommitIterator struct {
	Event *ZecreyFullExitCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyFullExitCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyFullExitCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyFullExitCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyFullExitCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyFullExitCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyFullExitCommit represents a FullExitCommit event raised by the Zecrey contract.
type ZecreyFullExitCommit struct {
	ZecreyBlockId uint32
	AccountId     uint32
	Owner         common.Address
	TokenId       uint16
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterFullExitCommit is a free log retrieval operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterFullExitCommit(opts *bind.FilterOpts, zecreyBlockId []uint32, accountId []uint32, tokenId []uint16) (*ZecreyFullExitCommitIterator, error) {

	var zecreyBlockIdRule []interface{}
	for _, zecreyBlockIdItem := range zecreyBlockId {
		zecreyBlockIdRule = append(zecreyBlockIdRule, zecreyBlockIdItem)
	}
	var accountIdRule []interface{}
	for _, accountIdItem := range accountId {
		accountIdRule = append(accountIdRule, accountIdItem)
	}

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "FullExitCommit", zecreyBlockIdRule, accountIdRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyFullExitCommitIterator{contract: _Zecrey.contract, event: "FullExitCommit", logs: logs, sub: sub}, nil
}

// WatchFullExitCommit is a free log subscription operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchFullExitCommit(opts *bind.WatchOpts, sink chan<- *ZecreyFullExitCommit, zecreyBlockId []uint32, accountId []uint32, tokenId []uint16) (event.Subscription, error) {

	var zecreyBlockIdRule []interface{}
	for _, zecreyBlockIdItem := range zecreyBlockId {
		zecreyBlockIdRule = append(zecreyBlockIdRule, zecreyBlockIdItem)
	}
	var accountIdRule []interface{}
	for _, accountIdItem := range accountId {
		accountIdRule = append(accountIdRule, accountIdItem)
	}

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "FullExitCommit", zecreyBlockIdRule, accountIdRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyFullExitCommit)
				if err := _Zecrey.contract.UnpackLog(event, "FullExitCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFullExitCommit is a log parse operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseFullExitCommit(log types.Log) (*ZecreyFullExitCommit, error) {
	event := new(ZecreyFullExitCommit)
	if err := _Zecrey.contract.UnpackLog(event, "FullExitCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyNewPriorityRequestIterator is returned from FilterNewPriorityRequest and is used to iterate over the raw logs and unpacked data for NewPriorityRequest events raised by the Zecrey contract.
type ZecreyNewPriorityRequestIterator struct {
	Event *ZecreyNewPriorityRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyNewPriorityRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyNewPriorityRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyNewPriorityRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyNewPriorityRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyNewPriorityRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyNewPriorityRequest represents a NewPriorityRequest event raised by the Zecrey contract.
type ZecreyNewPriorityRequest struct {
	Sender          common.Address
	SerialId        uint64
	OpType          uint8
	PubData         []byte
	ExpirationBlock *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNewPriorityRequest is a free log retrieval operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 opType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) FilterNewPriorityRequest(opts *bind.FilterOpts) (*ZecreyNewPriorityRequestIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "NewPriorityRequest")
	if err != nil {
		return nil, err
	}
	return &ZecreyNewPriorityRequestIterator{contract: _Zecrey.contract, event: "NewPriorityRequest", logs: logs, sub: sub}, nil
}

// WatchNewPriorityRequest is a free log subscription operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 opType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) WatchNewPriorityRequest(opts *bind.WatchOpts, sink chan<- *ZecreyNewPriorityRequest) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "NewPriorityRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyNewPriorityRequest)
				if err := _Zecrey.contract.UnpackLog(event, "NewPriorityRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewPriorityRequest is a log parse operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 opType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) ParseNewPriorityRequest(log types.Log) (*ZecreyNewPriorityRequest, error) {
	event := new(ZecreyNewPriorityRequest)
	if err := _Zecrey.contract.UnpackLog(event, "NewPriorityRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyNoticePeriodChangeIterator is returned from FilterNoticePeriodChange and is used to iterate over the raw logs and unpacked data for NoticePeriodChange events raised by the Zecrey contract.
type ZecreyNoticePeriodChangeIterator struct {
	Event *ZecreyNoticePeriodChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyNoticePeriodChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyNoticePeriodChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyNoticePeriodChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyNoticePeriodChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyNoticePeriodChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyNoticePeriodChange represents a NoticePeriodChange event raised by the Zecrey contract.
type ZecreyNoticePeriodChange struct {
	NewNoticePeriod *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNoticePeriodChange is a free log retrieval operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) FilterNoticePeriodChange(opts *bind.FilterOpts) (*ZecreyNoticePeriodChangeIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "NoticePeriodChange")
	if err != nil {
		return nil, err
	}
	return &ZecreyNoticePeriodChangeIterator{contract: _Zecrey.contract, event: "NoticePeriodChange", logs: logs, sub: sub}, nil
}

// WatchNoticePeriodChange is a free log subscription operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) WatchNoticePeriodChange(opts *bind.WatchOpts, sink chan<- *ZecreyNoticePeriodChange) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "NoticePeriodChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyNoticePeriodChange)
				if err := _Zecrey.contract.UnpackLog(event, "NoticePeriodChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNoticePeriodChange is a log parse operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) ParseNoticePeriodChange(log types.Log) (*ZecreyNoticePeriodChange, error) {
	event := new(ZecreyNoticePeriodChange)
	if err := _Zecrey.contract.UnpackLog(event, "NoticePeriodChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the Zecrey contract.
type ZecreyWithdrawalIterator struct {
	Event *ZecreyWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdrawal represents a Withdrawal event raised by the Zecrey contract.
type ZecreyWithdrawal struct {
	AssetId uint16
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterWithdrawal(opts *bind.FilterOpts, assetId []uint16) (*ZecreyWithdrawalIterator, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Withdrawal", assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawalIterator{contract: _Zecrey.contract, event: "Withdrawal", logs: logs, sub: sub}, nil
}

// WatchWithdrawal is a free log subscription operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *ZecreyWithdrawal, assetId []uint16) (event.Subscription, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Withdrawal", assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdrawal)
				if err := _Zecrey.contract.UnpackLog(event, "Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawal is a log parse operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseWithdrawal(log types.Log) (*ZecreyWithdrawal, error) {
	event := new(ZecreyWithdrawal)
	if err := _Zecrey.contract.UnpackLog(event, "Withdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawalPendingIterator is returned from FilterWithdrawalPending and is used to iterate over the raw logs and unpacked data for WithdrawalPending events raised by the Zecrey contract.
type ZecreyWithdrawalPendingIterator struct {
	Event *ZecreyWithdrawalPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawalPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdrawalPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdrawalPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawalPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawalPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdrawalPending represents a WithdrawalPending event raised by the Zecrey contract.
type ZecreyWithdrawalPending struct {
	AssetId uint16
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalPending is a free log retrieval operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterWithdrawalPending(opts *bind.FilterOpts, assetId []uint16) (*ZecreyWithdrawalPendingIterator, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "WithdrawalPending", assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawalPendingIterator{contract: _Zecrey.contract, event: "WithdrawalPending", logs: logs, sub: sub}, nil
}

// WatchWithdrawalPending is a free log subscription operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchWithdrawalPending(opts *bind.WatchOpts, sink chan<- *ZecreyWithdrawalPending, assetId []uint16) (event.Subscription, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "WithdrawalPending", assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdrawalPending)
				if err := _Zecrey.contract.UnpackLog(event, "WithdrawalPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalPending is a log parse operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseWithdrawalPending(log types.Log) (*ZecreyWithdrawalPending, error) {
	event := new(ZecreyWithdrawalPending)
	if err := _Zecrey.contract.UnpackLog(event, "WithdrawalPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
