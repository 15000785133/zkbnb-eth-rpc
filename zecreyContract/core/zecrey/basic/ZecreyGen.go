// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package basic

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StorageBlockHeader is an auto generated low-level Go binding around an user-defined struct.
type StorageBlockHeader struct {
	BlockNumber    uint32
	OnchainOpsRoot [32]byte
	StateRoot      [32]byte
	Timestamp      *big.Int
	Commitment     [32]byte
}

// ZecreyBlockProof is an auto generated low-level Go binding around an user-defined struct.
type ZecreyBlockProof struct {
	A [2]*big.Int
	B [2][2]*big.Int
	C [2]*big.Int
}

// ZecreyCommitBlockInfo is an auto generated low-level Go binding around an user-defined struct.
type ZecreyCommitBlockInfo struct {
	BlockNumber           uint32
	OnchainOpsRoot        [32]byte
	NewStateRoot          [32]byte
	Timestamp             *big.Int
	Commitment            [32]byte
	OnchainOpsPubData     []byte
	OnchainOpsCount       uint16
	OnchainOpsMerkleProof [5][32]byte
}

// ZecreyVerifyBlockInfo is an auto generated low-level Go binding around an user-defined struct.
type ZecreyVerifyBlockInfo struct {
	BlockHeader StorageBlockHeader
	BlockProof  ZecreyBlockProof
}

// ZecreyABI is the input ABI used to generate the binding from.
const ZecreyABI = "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_chainId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_nativeAssetId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_maxPendingBlocks\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockVerification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksVerified\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksCommitted\",\"type\":\"uint32\"}],\"name\":\"BlocksRevert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zecreyBlockNumber\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"DepositCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"opType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"DepositOrLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExodusMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zecreyBlockId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"FullExitCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"serialId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enumOperations.OpType\",\"name\":\"opType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"name\":\"NewPriorityRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNoticePeriod\",\"type\":\"uint256\"}],\"name\":\"NoticePeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"WithdrawalPending\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_onchainOpsMerkleHelper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxAmount\",\"type\":\"uint128\"}],\"name\":\"_transferERC20\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"blockOnchainOpsPubData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader\",\"name\":\"_lastCommittedBlockData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newStateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"onchainOpsPubData\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"onchainOpsCount\",\"type\":\"uint16\"},{\"internalType\":\"bytes32[5]\",\"name\":\"onchainOpsMerkleProof\",\"type\":\"bytes32[5]\"}],\"internalType\":\"structZecrey.CommitBlockInfo[]\",\"name\":\"_newBlocksData\",\"type\":\"tuple[]\"}],\"name\":\"commitBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_onchainOpsPubData\",\"type\":\"bytes\"}],\"name\":\"computeOnchainOpsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"onchainOpsDataHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_opType\",\"type\":\"uint8\"},{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint104\",\"name\":\"_amount\",\"type\":\"uint104\"},{\"internalType\":\"bytes32\",\"name\":\"_accountName\",\"type\":\"bytes32\"}],\"name\":\"depositOrLockERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_opType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_accountName\",\"type\":\"bytes32\"}],\"name\":\"depositOrLockNativeAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"}],\"name\":\"executeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exodusMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstPriorityRequestId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetAddr\",\"type\":\"address\"}],\"name\":\"getPendingBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializationParameters\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"onchainOpsCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"onchainOpsExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader[]\",\"name\":\"_blocksToRevert\",\"type\":\"tuple[]\"}],\"name\":\"revertBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"storedBlockHeaderHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksCommitted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksExecuted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksVerified\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOpenPriorityRequests\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader\",\"name\":\"blockHeader\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"structZecrey.BlockProof\",\"name\":\"blockProof\",\"type\":\"tuple\"}],\"internalType\":\"structZecrey.VerifyBlockInfo[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"}],\"name\":\"verifyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"withdrawPendingBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ZecreyBin is the compiled bytecode used for deploying new contracts.
var ZecreyBin = "0x60806040523480156200001157600080fd5b5060405162003f4338038062003f4383398101604081905262000034916200008a565b600b805460ff191660ff949094169390931762ffff00191661010061ffff938416021764ffff000000191663010000009190921602179055620000d9565b805161ffff811681146200008557600080fd5b919050565b6000806000606084860312156200009f578283fd5b835160ff81168114620000b0578384fd5b9250620000c06020850162000072565b9150620000d06040850162000072565b90509250925092565b613e5a80620000e96000396000f3fe6080604052600436106101405760003560e01c806375329d6b116100b6578063a7ccec2f1161006f578063a7ccec2f14610383578063c57b22be14610398578063d514da50146103ad578063eface7e2146103cd578063f2235487146103fa578063faf4d8cb1461040f57610140565b806375329d6b146102c35780638b4f7de9146102e35780638c8ebc52146103035780638ee1a74e146103235780639b9e91b614610343578063a0b94d611461036357610140565b80632d24006c116101085780632d24006c146101e55780634167d00214610207578063439fab91146102345780635aca41f61461025457806367708dae146102815780636f950a51146102a357610140565b80630222740e146101455780630d09454e1461017b5780631678b35e1461019d5780631e15f3e0146101b0578063264c0912146101d0575b600080fd5b34801561015157600080fd5b50610165610160366004613444565b610424565b60405161017291906138ec565b60405180910390f35b34801561018757600080fd5b5061019b6101963660046132a0565b610439565b005b61019b6101ab366004613719565b6105bc565b3480156101bc57600080fd5b5061019b6101cb366004613742565b6105e9565b3480156101dc57600080fd5b50610165610900565b3480156101f157600080fd5b506101fa610910565b6040516101729190613cd6565b34801561021357600080fd5b506102276102223660046136ff565b610923565b60405161017291906138f7565b34801561024057600080fd5b5061019b61024f366004613484565b610935565b34801561026057600080fd5b5061027461026f3660046131cb565b610a41565b6040516101729190613cb3565b34801561028d57600080fd5b50610296610b10565b6040516101729190613cfe565b3480156102af57600080fd5b5061019b6102be36600461357d565b610b26565b3480156102cf57600080fd5b5061019b6102de366004613203565b610cdf565b3480156102ef57600080fd5b506101656102fe366004613444565b610ef3565b34801561030f57600080fd5b5061022761031e3660046134f0565b610f08565b34801561032f57600080fd5b5061027461033e366004613522565b610f62565b34801561034f57600080fd5b5061016561035e3660046136e7565b611101565b34801561036f57600080fd5b5061019b61037e366004613203565b61112b565b34801561038f57600080fd5b506102276112b9565b3480156103a457600080fd5b506102966112bf565b3480156103b957600080fd5b5061019b6103c8366004613181565b6112d5565b3480156103d957600080fd5b506103ed6103e83660046136ff565b61150f565b6040516101729190613900565b34801561040657600080fd5b506101fa6115aa565b34801561041b57600080fd5b506101fa6115bd565b60076020526000908152604090205460ff1681565b600080516020613e05833981519152546001811461045657600080fd5b6002600080516020613e05833981519152556104706115c9565b600254604051631e8d167560e21b81526001600160a01b0390911690637a3459d4906104a0903390600401613871565b60006040518083038186803b1580156104b857600080fd5b505afa1580156104cc573d6000803e3d6000fd5b5050505060005b82518161ffff16101561055f57610505838261ffff16815181106104f357fe5b60200260200101518261ffff166115f5565b828161ffff168151811061051557fe5b6020026020010151600001516000015163ffffffff167f0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd2038441360405160405180910390a26001016104d3565b5061058761056d8351611726565b60045463ffffffff600160201b9091048116919061176916565b6004806101000a81548163ffffffff021916908363ffffffff1602179055506001600080516020613e05833981519152555050565b6105c46115c9565b600b546105e5908390610100900461ffff166105df346117b8565b846117f7565b5050565b600080516020613e05833981519152546001811461060657600080fd5b6002600080516020613e05833981519152556106206115c9565b600254604051639bd7760960e01b81526000916001600160a01b031690639bd7760990610651908890600401613871565b60206040518083038186803b15801561066957600080fd5b505afa15801561067d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a191906136cb565b6002546040516331d8687b60e01b81529192506001600160a01b0316906331d8687b906106d2908490600401613cc7565b60206040518083038186803b1580156106ea57600080fd5b505afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107229190613428565b156107485760405162461bcd60e51b815260040161073f90613b7e565b60405180910390fd5b6040516370a0823160e01b81526000906001600160a01b038716906370a0823190610777903090600401613871565b60206040518083038186803b15801561078f57600080fd5b505afa1580156107a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c7919061346c565b90506107f58633306107e7896cffffffffffffffffffffffffff166117b8565b6001600160801b03166118bd565b6108115760405162461bcd60e51b815260040161073f9061399d565b6040516370a0823160e01b81526000906001600160a01b038816906370a0823190610840903090600401613871565b60206040518083038186803b15801561085857600080fd5b505afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610890919061346c565b905060006108a66108a183856119e9565b6117b8565b9050650fffffffffff6001600160801b03821611156108d75760405162461bcd60e51b815260040161073f90613967565b6108e3898583896117f7565b505050506001600080516020613e05833981519152555050505050565b600454600160601b900460ff1681565b600454600160201b900463ffffffff1681565b60066020526000908152604090205481565b61093d611a0f565b600080808080808080610952898b018b6130a8565b600180546001600160a01b03808a166001600160a01b03199283161790925560028054928b16929091169190911790556000849055969e50949c50929a5090985096509450925090506109a8600a826004612cf6565b506004805463ffffffff191663ffffffff881690811767ffffffff000000001916600160201b8202176bffffffff00000000000000001916600160401b8202179091556040805160a0810182529182526020820187905281018590526060810184905260808101839052610a1b81611a60565b63ffffffff90971660009081526006602052604090209690965550505050505050505050565b6000806001600160a01b03831615610ad657600254604051639bd7760960e01b81526001600160a01b0390911690639bd7760990610a83908690600401613871565b60206040518083038186803b158015610a9b57600080fd5b505afa158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad391906136cb565b90505b60036000610ae48684611a90565b6001600160501b03191681526020810191909152604001600020546001600160801b0316949350505050565b600454600160681b90046001600160401b031681565b600080516020613e058339815191525460018114610b4357600080fd5b6002600080516020613e0583398151915255610b5d6115c9565b600254604051635147001960e11b81526001600160a01b039091169063a28e003290610b8d903390600401613871565b60006040518083038186803b158015610ba557600080fd5b505afa158015610bb9573d6000803e3d6000fd5b50505050610bc683611a60565b60045463ffffffff1660009081526006602052604090205414610bfb5760405162461bcd60e51b815260040161073f90613c22565b60005b82518163ffffffff161015610c8d57610c3084848363ffffffff1681518110610c2357fe5b6020026020010151611aad565b9350610c3b84611a60565b845163ffffffff908116600090815260066020526040808220939093558651925192909116917f81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b62684249190a2600101610bfe565b50610cae610c9b8351611726565b60045463ffffffff908116919061176916565b6004805463ffffffff191663ffffffff9290921691909117905550506001600080516020613e058339815191525550565b610ce76115c9565b600254604051630e010cab60e11b81526001600160a01b0390911690631c02195690610d17903390600401613871565b60006040518083038186803b158015610d2f57600080fd5b505afa158015610d43573d6000803e3d6000fd5b5050600454835163ffffffff808316945060009350610d6b92600160401b9004168403611c18565b905060005b8163ffffffff168163ffffffff161015610e81576000848263ffffffff1681518110610d9857fe5b6020908102919091010151600454815191925063ffffffff600160401b9091048116911610610dd95760405162461bcd60e51b815260040161073f90613b00565b600454815163ffffffff9081169181168490031614610e0a5760405162461bcd60e51b815260040161073f90613a7d565b610e1381611a60565b63ffffffff851660009081526006602052604090205414610e465760405162461bcd60e51b815260040161073f90613a47565b63ffffffff8416600090815260066020908152604080832083905560099091528120610e7191612d84565b5060001990920191600101610d70565b506004805463ffffffff191663ffffffff84811691821767ffffffff000000001916600160201b9290920291909117918290556040517f6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d392610ee69216908590613ce7565b60405180910390a1505050565b60086020526000908152604090205460ff1681565b6000600282604051610f1a91906137d2565b602060405180830381855afa158015610f37573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610f5a919061346c565b90505b919050565b6000333014610f835760405162461bcd60e51b815260040161073f90613bb6565b6040516370a0823160e01b81526000906001600160a01b038716906370a0823190610fb2903090600401613871565b60206040518083038186803b158015610fca57600080fd5b505afa158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611002919061346c565b90506110188686866001600160801b0316611c3a565b6110345760405162461bcd60e51b815260040161073f90613bec565b6040516370a0823160e01b81526000906001600160a01b038816906370a0823190611063903090600401613871565b60206040518083038186803b15801561107b57600080fd5b505afa15801561108f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b3919061346c565b905060006110c183836119e9565b9050846001600160801b03168111156110ec5760405162461bcd60e51b815260040161073f90613a62565b6110f5816117b8565b98975050505050505050565b600a816004811061111157600080fd5b60209182820401919006915054906101000a900460ff1681565b600080516020613e05833981519152546001811461114857600080fd5b6002600080516020613e05833981519152556111626115c9565b600254604051636810f99560e11b81526001600160a01b039091169063d021f32a90611192903390600401613871565b60006040518083038186803b1580156111aa57600080fd5b505afa1580156111be573d6000803e3d6000fd5b5050835161ffff169150600090505b8163ffffffff168161ffff16101561125a57611204848261ffff16815181106111f257fe5b60200260200101518261ffff16611d60565b838161ffff168151811061121457fe5b60200260200101516000015163ffffffff167f24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb60405160405180910390a26001016111cd565b506112826112688451611726565b60045463ffffffff600160401b9091048116919061176916565b600460086101000a81548163ffffffff021916908363ffffffff160217905550506001600080516020613e05833981519152555050565b60005481565b600454600160a81b90046001600160401b031681565b600080516020613e0583398151915254600181146112f257600080fd5b6002600080516020613e05833981519152556001600160a01b0383166113b457600b5461132990610100900461ffff168386611fa0565b6000846001600160a01b0316836001600160801b031660405161134b9061381d565b60006040518083038185875af1925050503d8060008114611388576040519150601f19603f3d011682016040523d82523d6000602084013e61138d565b606091505b50509050806113ae5760405162461bcd60e51b815260040161073f90613c3d565b506114f7565b600254604051639bd7760960e01b81526000916001600160a01b031690639bd77609906113e5908790600401613871565b60206040518083038186803b1580156113fd57600080fd5b505afa158015611411573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143591906136cb565b905060006114438683611a90565b6001600160501b03198116600090815260036020526040808220549051634770d3a760e11b81529293506001600160801b0316913090638ee1a74e90611493908a908c908b908890600401613933565b602060405180830381600087803b1580156114ad57600080fd5b505af11580156114c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e591906136af565b90506114f284828a611fa0565b505050505b6001600080516020613e058339815191525550505050565b60096020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156115a25780601f10611577576101008083540402835291602001916115a2565b820191906000526020600020905b81548152906001019060200180831161158557829003601f168201915b505050505081565b600454600160401b900463ffffffff1681565b60045463ffffffff1681565b600454600160601b900460ff16156115f35760405162461bcd60e51b815260040161073f90613b2a565b565b81515163ffffffff16600090815260066020526040902054825161161890611a60565b146116355760405162461bcd60e51b815260040161073f90613aa7565b600454825151600160201b90910463ffffffff908116830160010181169116146116715760405162461bcd60e51b815260040161073f90613c58565b604080518082018252600054815283516080015160208083019190915260015485820151805192810151908501519451637ae4eb4f60e11b815293946001600160a01b039092169363f5c9d69e936116d0939092918790600401613885565b60206040518083038186803b1580156116e857600080fd5b505afa1580156116fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117209190613428565b50505050565b6000600160201b8210611765576040805162461bcd60e51b8152602060048201526002602482015261062760f31b604482015290519081900360640190fd5b5090565b600082820163ffffffff80851690821610156117b1576040805162461bcd60e51b8152602060048201526002602482015261189960f11b604482015290519081900360640190fd5b9392505050565b6000600160801b8210611765576040805162461bcd60e51b8152602060048201526002602482015261189b60f11b604482015290519081900360640190fd5b6040805160a08101825260ff8087168252600b5416602082015261ffff8516918101919091526001600160801b038316606082015260808101829052600061183e82612059565b9050600061184b8261209e565b6001600160601b0319811660009081526007602052604090819020805460ff191660011790555190915061ffff8716907f962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b906118ac908a9088908a90613d12565b60405180910390a250505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094859485948b16939092909182918083835b602083106119435780518252601f199092019160209182019101611924565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146119a5576040519150601f19603f3d011682016040523d82523d6000602084013e6119aa565b606091505b509150915060008151600014806119d457508180602001905160208110156119d157600080fd5b50515b90508280156110f55750979650505050505050565b60006117b18383604051806040016040528060018152602001603b60f91b8152506120ac565b600080516020613e05833981519152805460019091558015611a5d576040805162461bcd60e51b815260206004820152600260248201526118a160f11b604482015290519081900360640190fd5b50565b600081604051602001611a739190613c73565b604051602081830303815290604052805190602001209050919050565b60a01b61ffff60a01b166001600160a01b03919091161760501b90565b611ab5612dc8565b8251825163ffffffff90811660019092011614611ae45760405162461bcd60e51b815260040161073f90613bd1565b826060015182606001511015611b0c5760405162461bcd60e51b815260040161073f906139b8565b60008260600151611b2d6201518086606001516119e990919063ffffffff16565b111590506000611b4c610384866060015161214390919063ffffffff16565b846060015111159050818015611b5f5750805b611b7b5760405162461bcd60e51b815260040161073f90613b63565b50506000611b8c8360a00151610f08565b60e0840151519091508114611bb35760405162461bcd60e51b815260040161073f90613b99565b611bc583602001518460e00151612182565b611bce83612308565b6040518060a00160405280846000015163ffffffff168152602001846020015181526020018460400151815260200184606001518152602001846080015181525091505092915050565b60008163ffffffff168363ffffffff1610611c3357816117b1565b5090919050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17815292518251600094859485948a16939092909182918083835b60208310611cb85780518252601f199092019160209182019101611c99565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d1a576040519150601f19603f3d011682016040523d82523d6000602084013e611d1f565b606091505b50915091506000815160001480611d495750818060200190516020811015611d4657600080fd5b50515b9050828015611d555750805b979650505050505050565b815163ffffffff16600090815260066020526040902054611d8083611a60565b14611d9d5760405162461bcd60e51b815260040161073f90613aa7565b600454825163ffffffff600160201b909204821691161115611dd15760405162461bcd60e51b815260040161073f90613a2c565b6004548251600160401b90910463ffffffff90811683016001018116911614611e0c5760405162461bcd60e51b815260040161073f90613c58565b815163ffffffff1660009081526009602090815260408083208054825160026001831615610100026000190190921691909104601f810185900485028201850190935282815292909190830182828015611ea75780601f10611e7c57610100808354040283529160200191611ea7565b820191906000526020600020905b815481529060010190602001808311611e8a57829003601f168201915b505083519394506064939250611ebb915050565b0615611ed95760405162461bcd60e51b815260040161073f90613982565b8051600090611ee99060646125af565b90506000805b828161ffff161015611f98576000848381518110611f0957fe5b016020015160f81c6009811115611f1c57fe5b90506008816009811115611f2c57fe5b14611f495760405162461bcd60e51b815260040161073f906139f0565b6000611f57868560646125d5565b90506000611f6482612691565b9050611f7d816020015182606001518360800151612749565b611f88856064612143565b9450505050806001019050611eef565b505050505050565b6000611fac8285611a90565b6001600160501b031981166000908152600360205260409020549091506001600160801b0316611fdc8185612924565b6001600160501b031983166000908152600360205260409081902080546001600160801b0319166001600160801b0393909316929092179091555161ffff8616907ff4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a807939331549061204a908790613cb3565b60405180910390a25050505050565b606081600001518260200151836040015184606001518560800151604051602001612088959493929190613820565b6040516020818303038152906040529050919050565b805160209091012060601b90565b6000818484111561213b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121005781810151838201526020016120e8565b50505050905090810190601f16801561212d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156117b1576040805162461bcd60e51b81526020600482015260026024820152610c4d60f21b604482015290519081900360640190fd5b805160015b60058163ffffffff1610156122e357600a6001820363ffffffff16600481106121ac57fe5b602081049091015460ff601f9092166101000a90041615612253576002838263ffffffff16600581106121db57fe5b6020020151836040516020016121f29291906137c4565b60408051601f198184030181529082905261220c916137d2565b602060405180830381855afa158015612229573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061224c919061346c565b91506122db565b600282848363ffffffff166005811061226857fe5b602002015160405160200161227e9291906137c4565b60408051601f1981840301815290829052612298916137d2565b602060405180830381855afa1580156122b5573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906122d8919061346c565b91505b600101612187565b508083146123035760405162461bcd60e51b815260040161073f906139d3565b505050565b60a08101518051600a9006156123305760405162461bcd60e51b815260040161073f90613982565b6000606060005b8460c0015161ffff168161ffff16101561258057600084848151811061235957fe5b016020015160f81c600981111561236c57fe5b9050600181600981111561237c57fe5b14156124505760006123908686603c6125d5565b9050600061239d8261209e565b6001600160601b0319811660009081526007602052604090205490915060ff1615156001146123de5760405162461bcd60e51b815260040161073f90613a0e565b6001600160601b0319811660009081526008602052604090205460ff16156124185760405162461bcd60e51b815260040161073f90613ac6565b6001600160601b031981166000908152600860205260409020805460ff1916600117905561244786603c612143565b95505050612577565b600281600981111561245e57fe5b14156124cb576000612472868660326125d5565b9050600061247f8261209e565b6001600160601b0319811660009081526007602052604090205490915060ff1615156001146124c05760405162461bcd60e51b815260040161073f90613b45565b612447866032612143565b60088160098111156124d957fe5b14156125275760006124ed868660646125d5565b905083816040516020016125029291906137ee565b60408051601f19818403018152919052935061251f856064612143565b945050612577565b6060600982600981111561253757fe5b141561255d576125498686606e6125d5565b905061255685606e612143565b9450612575565b60405162461bcd60e51b815260040161073f90613c07565b505b50600101612337565b50835163ffffffff16600090815260096020908152604090912082516125a892840190612df6565b5050505050565b60006117b18383604051806040016040528060018152602001600f60fb1b81525061294b565b606081830184511015612613576040805162461bcd60e51b81526020600482015260016024820152602d60f91b604482015290519081900360640190fd5b6000826001600160401b038111801561262b57600080fd5b506040519080825280601f01601f191660200182016040528015612656576020820181803683370190505b509050821561268957602081018381016020860187015b8183101561268557805183526020928301920161266d565b5050505b949350505050565b612699612e72565b60016126a583826129b0565b60ff16835290506126b683826129dc565b61ffff16602084015290506126cb83826129f5565b63ffffffff16604084015290506126e28382612a05565b6001600160a01b0316606084015290506126fc8382612a15565b6001600160801b03166080840152905061271683826129f5565b63ffffffff1660a08401529050602481146127435760405162461bcd60e51b815260040161073f90613ae5565b50919050565b60006127558385611a90565b600b5490915060009061ffff86811661010090920416141561278d5783612785816001600160801b038616612a25565b91505061289f565b60025460405163dbfc296760e01b81526000916001600160a01b03169063dbfc2967906127be908990600401613cc7565b60206040518083038186803b1580156127d657600080fd5b505afa1580156127ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280e919061308c565b604051634770d3a760e11b81529091503090638ee1a74e90620186a09061283f9085908a908a908190600401613933565b602060405180830381600088803b15801561285957600080fd5b5087f19350505050801561288a575060408051601f3d908101601f19168201909252612887918101906136af565b60015b612897576000915061289d565b50600191505b505b80156128e6578461ffff167ff4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154846040516128d99190613cb3565b60405180910390a26125a8565b6128f08284612a91565b8461ffff167fd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c16888460405161204a9190613cb3565b60006117b1838360405180604001604052806002815260200161616160f01b815250612b2f565b6000818361299a5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156121005781810151838201526020016120e8565b5060008385816129a657fe5b0495945050505050565b6000808260010191508383815181106129c557fe5b602001015160f81c60f81b60f81c90509250929050565b6002810160006129ec8484612b94565b90509250929050565b6004810160006129ec8484612be2565b6014810160006129ec8484612c25565b6010810160006129ec8484612c68565b600080836001600160a01b0316620186a084604051612a439061381d565b600060405180830381858888f193505050503d8060008114612a81576040519150601f19603f3d011682016040523d82523d6000602084013e612a86565b606091505b509095945050505050565b6001600160501b03198216600090815260036020526040908190205481518083019092526001600160801b03169080612aca8385612cab565b6001600160801b03908116825260ff60209283018190526001600160501b031990961660009081526003835260409020835181549490930151909616600160801b0260ff60801b19929091166001600160801b03199093169290921716179092555050565b6000836001600160801b0316836001600160801b03161115829061213b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156121005781810151838201526020016120e8565b6000808260020190508084511015612bd7576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b929092015192915050565b6000808260040190508084511015612bd7576040805162461bcd60e51b81526020600482015260016024820152602b60f91b604482015290519081900360640190fd5b6000808260140190508084511015612bd7576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b6000808260100190508084511015612bd7576040805162461bcd60e51b81526020600482015260016024820152605760f81b604482015290519081900360640190fd5b60008282016001600160801b0380851690821610156117b1576040805162461bcd60e51b8152602060048201526002602482015261189960f11b604482015290519081900360640190fd5b600183019183908215612d785791602002820160005b83821115612d4957835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302612d0c565b8015612d765782816101000a81549060ff0219169055600101602081600001049283019260010302612d49565b505b50611765929150612ea7565b50805460018160011615610100020316600290046000825580601f10612daa5750611a5d565b601f016020900490600052602060002090810190611a5d9190612ea7565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282612e2c5760008555612d78565b82601f10612e4557805160ff1916838001178555612d78565b82800160010185558215612d78579182015b82811115612d78578251825591602001919060010190612e57565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b5b808211156117655760008155600101612ea8565b600082601f830112612ecc578081fd5b60405160a081018181106001600160401b0382111715612ee857fe5b604052808360a08101861015612efc578384fd5b835b6005811015612f1d578135835260209283019290910190600101612efe565b509195945050505050565b600082601f830112612f38578081fd5b604051604081018181106001600160401b0382111715612f5457fe5b8060405250808385604086011115612f6a578384fd5b835b6002811015612f1d578135835260209283019290910190600101612f6c565b600082601f830112612f9b578081fd5b81356001600160401b03811115612fae57fe5b612fc1601f8201601f1916602001613d36565b818152846020838601011115612fd5578283fd5b816020850160208301379081016020019190915292915050565b600060a08284031215613000578081fd5b60405160a081018181106001600160401b038211171561301c57fe5b60405290508061302b83613067565b8152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b8035610f5d81613df4565b803563ffffffff81168114610f5d57600080fd5b803560ff81168114610f5d57600080fd5b60006020828403121561309d578081fd5b81516117b181613dbc565b600080600080600080600080610160808a8c0312156130c5578485fd5b89356130d081613dbc565b985060208a8101356130e181613dbc565b98506130ef60408c01613067565b975060608b0135965060808b0135955060a08b0135945060c08b013593508b60ff8c011261311b578283fd5b61312d6131286004613d59565b613d36565b8060e08d018e858f011115613140578586fd5b8594505b600485101561316c57803561315881613dd1565b835260019490940193918301918301613144565b50809450505050509295985092959890939650565b600080600060608486031215613195578081fd5b83356131a081613dbc565b925060208401356131b081613dbc565b915060408401356131c081613ddf565b809150509250925092565b600080604083850312156131dd578182fd5b82356131e881613dbc565b915060208301356131f881613dbc565b809150509250929050565b60006020808385031215613215578182fd5b82356001600160401b0381111561322a578283fd5b8301601f8101851361323a578283fd5b803561324861312882613d73565b8181528381019083850160a0808502860187018a1015613266578788fd5b8795505b848610156132925761327c8a83612fef565b845260019590950194928601929081019061326a565b509098975050505050505050565b6000602082840312156132b1578081fd5b6001600160401b0380833511156132c6578182fd5b8235830184601f8201126132d8578283fd5b80356132e661312882613d73565b80828252602082019150602084018860206101a086028701011115613309578687fd5b8694505b8385101561341c576101a0818a031215613325578687fd5b60405160408101818110888211171561333a57fe5b6040526133478a83612fef565b8152610100828b03609f1901121561335d578788fd5b60405160608101818110898211171561337257fe5b6040526133828b60a08501612f28565b81528a60ff840112613392578889fd5b61339f6131286002613d59565b8060e085018d610160870111156133b4578b8cfd5b8b5b60028110156133e0576133c98f83612f28565b8452602090930192604091909101906001016133b6565b50506020830152506133f68b6101608501612f28565b60408201526020828101919091529084526001959095019492909201916101a00161330d565b50979650505050505050565b600060208284031215613439578081fd5b81516117b181613dd1565b600060208284031215613455578081fd5b81356001600160601b0319811681146117b1578182fd5b60006020828403121561347d578081fd5b5051919050565b60008060208385031215613496578182fd5b82356001600160401b03808211156134ac578384fd5b818501915085601f8301126134bf578384fd5b8135818111156134cd578485fd5b8660208285010111156134de578485fd5b60209290920196919550909350505050565b600060208284031215613501578081fd5b81356001600160401b03811115613516578182fd5b61268984828501612f8b565b60008060008060808587031215613537578182fd5b843561354281613dbc565b9350602085013561355281613dbc565b9250604085013561356281613ddf565b9150606085013561357281613ddf565b939692955090935050565b60008060c0838503121561358f578182fd5b6135998484612fef565b915060a08301356001600160401b03808211156135b4578283fd5b818501915085601f8301126135c7578283fd5b813560206135d761312883613d73565b82815281810190858301875b8581101561369e5781358801610180818e03601f1901121561360357898afd5b61360e610100613d36565b613619878301613067565b8152604082013587820152606082013560408201526080820135606082015260a0820135608082015260c082013589811115613653578b8cfd5b6136618f8983860101612f8b565b60a08301525061367360e0830161305c565b60c08201526136868e6101008401612ebc565b60e082015285525092840192908401906001016135e3565b50979a909950975050505050505050565b6000602082840312156136c0578081fd5b81516117b181613ddf565b6000602082840312156136dc578081fd5b81516117b181613df4565b6000602082840312156136f8578081fd5b5035919050565b600060208284031215613710578081fd5b6117b182613067565b6000806040838503121561372b578182fd5b6137348361307b565b946020939093013593505050565b60008060008060808587031215613757578182fd5b6137608561307b565b9350602085013561377081613dbc565b925060408501356cffffffffffffffffffffffffff81168114613791578283fd5b9396929550929360600135925050565b8060005b60028110156117205781518452602093840193909101906001016137a5565b918252602082015260400190565b600082516137e4818460208701613d90565b9190910192915050565b60008351613800818460208801613d90565b835190830190613814818360208801613d90565b01949350505050565b90565b60f895861b6001600160f81b031990811682529490951b909316600185015260e09190911b6001600160e01b031916600284015260801b6001600160801b0319166006830152601682015260360190565b6001600160a01b0391909116815260200190565b610140810161389482876137a1565b60408083018660005b60028110156138c4576138b18383516137a1565b918301916020919091019060010161389d565b505050506138d560c08301856137a1565b6138e36101008301846137a1565b95945050505050565b901515815260200190565b90815260200190565b600060208252825180602084015261391f816040850160208701613d90565b601f01601f19169190910160400192915050565b6001600160a01b0394851681529290931660208301526001600160801b039081166040830152909116606082015260800190565b6020808252600190820152604360f81b604082015260600190565b6020808252600190820152604160f81b604082015260600190565b6020808252600190820152606360f81b604082015260600190565b6020808252600190820152606760f81b604082015260600190565b6020808252600390820152620696d760ec1b604082015260600190565b602080825260049082015263069776f760e41b604082015260600190565b6020808252600490820152631a5bdc1960e21b604082015260600190565b6020808252600190820152606160f81b604082015260600190565b6020808252600190820152603960f91b604082015260600190565b6020808252600190820152603760f81b604082015260600190565b60208082526010908201526f6e6f74206c617465737420626c6f636b60801b604082015260600190565b602080825260059082015264065786531360dc1b604082015260600190565b6020808252600590820152641a595bdc1960da1b604082015260600190565b6020808252600190820152602760f91b604082015260600190565b60208082526010908201526f185b1c9958591e48195e1958dd5d195960821b604082015260600190565b6020808252600190820152601360fa1b604082015260600190565b6020808252600490820152631a5bdc1b60e21b604082015260600190565b6020808252600190820152600d60fb1b604082015260600190565b6020808252600190820152603160f91b604082015260600190565b6020808252600390820152620696f760ec1b604082015260600190565b6020808252600190820152603560f81b604082015260600190565b6020808252600190820152603360f91b604082015260600190565b6020808252600190820152601b60f91b604082015260600190565b6020808252600190820152602360f91b604082015260600190565b6020808252600190820152606960f81b604082015260600190565b6020808252600190820152601960fa1b604082015260600190565b6020808252600190820152606b60f81b604082015260600190565b600060a08201905063ffffffff83511682526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b6001600160801b0391909116815260200190565b61ffff91909116815260200190565b63ffffffff91909116815260200190565b63ffffffff92831681529116602082015260400190565b6001600160401b0391909116815260200190565b60ff93909316835260208301919091526001600160801b0316604082015260600190565b6040518181016001600160401b0381118282101715613d5157fe5b604052919050565b60006001600160401b03821115613d6c57fe5b5060200290565b60006001600160401b03821115613d8657fe5b5060209081020190565b60005b83811015613dab578181015183820152602001613d93565b838111156117205750506000910152565b6001600160a01b0381168114611a5d57600080fd5b8015158114611a5d57600080fd5b6001600160801b0381168114611a5d57600080fd5b61ffff81168114611a5d57600080fdfe8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4a264697066735822122022239c59f6e9b8b423c7ce9189e9079ddea6c596f85bd257d79408de17587ebd64736f6c63430007060033"

// DeployZecrey deploys a new Ethereum contract, binding an instance of Zecrey to it.
func DeployZecrey(auth *bind.TransactOpts, backend bind.ContractBackend, _chainId uint8, _nativeAssetId uint16, _maxPendingBlocks uint16) (common.Address, *types.Transaction, *Zecrey, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ZecreyBin), backend, _chainId, _nativeAssetId, _maxPendingBlocks)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// Zecrey is an auto generated Go binding around an Ethereum contract.
type Zecrey struct {
	ZecreyCaller     // Read-only binding to the contract
	ZecreyTransactor // Write-only binding to the contract
	ZecreyFilterer   // Log filterer for contract events
}

// ZecreyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZecreyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZecreyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZecreyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZecreySession struct {
	Contract     *Zecrey           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZecreyCallerSession struct {
	Contract *ZecreyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ZecreyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZecreyTransactorSession struct {
	Contract     *ZecreyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZecreyRaw struct {
	Contract *Zecrey // Generic contract binding to access the raw methods on
}

// ZecreyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZecreyCallerRaw struct {
	Contract *ZecreyCaller // Generic read-only contract binding to access the raw methods on
}

// ZecreyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZecreyTransactorRaw struct {
	Contract *ZecreyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZecrey creates a new instance of Zecrey, bound to a specific deployed contract.
func NewZecrey(address common.Address, backend bind.ContractBackend) (*Zecrey, error) {
	contract, err := bindZecrey(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// NewZecreyCaller creates a new read-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyCaller(address common.Address, caller bind.ContractCaller) (*ZecreyCaller, error) {
	contract, err := bindZecrey(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyCaller{contract: contract}, nil
}

// NewZecreyTransactor creates a new write-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyTransactor(address common.Address, transactor bind.ContractTransactor) (*ZecreyTransactor, error) {
	contract, err := bindZecrey(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyTransactor{contract: contract}, nil
}

// NewZecreyFilterer creates a new log filterer instance of Zecrey, bound to a specific deployed contract.
func NewZecreyFilterer(address common.Address, filterer bind.ContractFilterer) (*ZecreyFilterer, error) {
	contract, err := bindZecrey(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZecreyFilterer{contract: contract}, nil
}

// bindZecrey binds a generic wrapper to an already deployed contract.
func bindZecrey(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.ZecreyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transact(opts, method, params...)
}

// OnchainOpsMerkleHelper is a free data retrieval call binding the contract method 0x9b9e91b6.
//
// Solidity: function _onchainOpsMerkleHelper(uint256 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsMerkleHelper(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "_onchainOpsMerkleHelper", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsMerkleHelper is a free data retrieval call binding the contract method 0x9b9e91b6.
//
// Solidity: function _onchainOpsMerkleHelper(uint256 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsMerkleHelper(arg0 *big.Int) (bool, error) {
	return _Zecrey.Contract.OnchainOpsMerkleHelper(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsMerkleHelper is a free data retrieval call binding the contract method 0x9b9e91b6.
//
// Solidity: function _onchainOpsMerkleHelper(uint256 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsMerkleHelper(arg0 *big.Int) (bool, error) {
	return _Zecrey.Contract.OnchainOpsMerkleHelper(&_Zecrey.CallOpts, arg0)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCaller) AccountRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "accountRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreySession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// BlockOnchainOpsPubData is a free data retrieval call binding the contract method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreyCaller) BlockOnchainOpsPubData(opts *bind.CallOpts, arg0 uint32) ([]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "blockOnchainOpsPubData", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// BlockOnchainOpsPubData is a free data retrieval call binding the contract method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreySession) BlockOnchainOpsPubData(arg0 uint32) ([]byte, error) {
	return _Zecrey.Contract.BlockOnchainOpsPubData(&_Zecrey.CallOpts, arg0)
}

// BlockOnchainOpsPubData is a free data retrieval call binding the contract method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreyCallerSession) BlockOnchainOpsPubData(arg0 uint32) ([]byte, error) {
	return _Zecrey.Contract.BlockOnchainOpsPubData(&_Zecrey.CallOpts, arg0)
}

// ComputeOnchainOpsHash is a free data retrieval call binding the contract method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreyCaller) ComputeOnchainOpsHash(opts *bind.CallOpts, _onchainOpsPubData []byte) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "computeOnchainOpsHash", _onchainOpsPubData)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeOnchainOpsHash is a free data retrieval call binding the contract method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreySession) ComputeOnchainOpsHash(_onchainOpsPubData []byte) ([32]byte, error) {
	return _Zecrey.Contract.ComputeOnchainOpsHash(&_Zecrey.CallOpts, _onchainOpsPubData)
}

// ComputeOnchainOpsHash is a free data retrieval call binding the contract method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreyCallerSession) ComputeOnchainOpsHash(_onchainOpsPubData []byte) ([32]byte, error) {
	return _Zecrey.Contract.ComputeOnchainOpsHash(&_Zecrey.CallOpts, _onchainOpsPubData)
}

// ExodusMode is a free data retrieval call binding the contract method 0x264c0912.
//
// Solidity: function exodusMode() view returns(bool)
func (_Zecrey *ZecreyCaller) ExodusMode(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "exodusMode")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ExodusMode is a free data retrieval call binding the contract method 0x264c0912.
//
// Solidity: function exodusMode() view returns(bool)
func (_Zecrey *ZecreySession) ExodusMode() (bool, error) {
	return _Zecrey.Contract.ExodusMode(&_Zecrey.CallOpts)
}

// ExodusMode is a free data retrieval call binding the contract method 0x264c0912.
//
// Solidity: function exodusMode() view returns(bool)
func (_Zecrey *ZecreyCallerSession) ExodusMode() (bool, error) {
	return _Zecrey.Contract.ExodusMode(&_Zecrey.CallOpts)
}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreyCaller) FirstPriorityRequestId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "firstPriorityRequestId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreySession) FirstPriorityRequestId() (uint64, error) {
	return _Zecrey.Contract.FirstPriorityRequestId(&_Zecrey.CallOpts)
}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreyCallerSession) FirstPriorityRequestId() (uint64, error) {
	return _Zecrey.Contract.FirstPriorityRequestId(&_Zecrey.CallOpts)
}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreyCaller) GetPendingBalance(opts *bind.CallOpts, _address common.Address, _assetAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getPendingBalance", _address, _assetAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreySession) GetPendingBalance(_address common.Address, _assetAddr common.Address) (*big.Int, error) {
	return _Zecrey.Contract.GetPendingBalance(&_Zecrey.CallOpts, _address, _assetAddr)
}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreyCallerSession) GetPendingBalance(_address common.Address, _assetAddr common.Address) (*big.Int, error) {
	return _Zecrey.Contract.GetPendingBalance(&_Zecrey.CallOpts, _address, _assetAddr)
}

// OnchainOpsCheck is a free data retrieval call binding the contract method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsCheck(opts *bind.CallOpts, arg0 [20]byte) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOpsCheck", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsCheck is a free data retrieval call binding the contract method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsCheck(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsCheck(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsCheck is a free data retrieval call binding the contract method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsCheck(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsCheck(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsExecuted is a free data retrieval call binding the contract method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsExecuted(opts *bind.CallOpts, arg0 [20]byte) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOpsExecuted", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsExecuted is a free data retrieval call binding the contract method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsExecuted(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsExecuted(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsExecuted is a free data retrieval call binding the contract method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsExecuted(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsExecuted(&_Zecrey.CallOpts, arg0)
}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCaller) StoredBlockHeaderHashes(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "storedBlockHeaderHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreySession) StoredBlockHeaderHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHeaderHashes(&_Zecrey.CallOpts, arg0)
}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) StoredBlockHeaderHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHeaderHashes(&_Zecrey.CallOpts, arg0)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksCommitted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksCommitted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksExecuted is a free data retrieval call binding the contract method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksExecuted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksExecuted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksExecuted is a free data retrieval call binding the contract method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksExecuted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksExecuted(&_Zecrey.CallOpts)
}

// TotalBlocksExecuted is a free data retrieval call binding the contract method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksExecuted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksExecuted(&_Zecrey.CallOpts)
}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksVerified(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksVerified")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksVerified() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksVerified(&_Zecrey.CallOpts)
}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksVerified() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksVerified(&_Zecrey.CallOpts)
}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreyCaller) TotalOpenPriorityRequests(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalOpenPriorityRequests")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreySession) TotalOpenPriorityRequests() (uint64, error) {
	return _Zecrey.Contract.TotalOpenPriorityRequests(&_Zecrey.CallOpts)
}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreyCallerSession) TotalOpenPriorityRequests() (uint64, error) {
	return _Zecrey.Contract.TotalOpenPriorityRequests(&_Zecrey.CallOpts)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactor) TransferERC20(opts *bind.TransactOpts, _token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "_transferERC20", _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreySession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactorSession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x6f950a51.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[5])[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactor) CommitBlocks(opts *bind.TransactOpts, _lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "commitBlocks", _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x6f950a51.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[5])[] _newBlocksData) returns()
func (_Zecrey *ZecreySession) CommitBlocks(_lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x6f950a51.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[5])[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactorSession) CommitBlocks(_lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// DepositOrLockERC20 is a paid mutator transaction binding the contract method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _opType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreyTransactor) DepositOrLockERC20(opts *bind.TransactOpts, _opType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "depositOrLockERC20", _opType, _token, _amount, _accountName)
}

// DepositOrLockERC20 is a paid mutator transaction binding the contract method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _opType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreySession) DepositOrLockERC20(_opType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockERC20(&_Zecrey.TransactOpts, _opType, _token, _amount, _accountName)
}

// DepositOrLockERC20 is a paid mutator transaction binding the contract method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _opType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreyTransactorSession) DepositOrLockERC20(_opType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockERC20(&_Zecrey.TransactOpts, _opType, _token, _amount, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the contract method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _opType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreyTransactor) DepositOrLockNativeAsset(opts *bind.TransactOpts, _opType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "depositOrLockNativeAsset", _opType, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the contract method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _opType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreySession) DepositOrLockNativeAsset(_opType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockNativeAsset(&_Zecrey.TransactOpts, _opType, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the contract method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _opType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreyTransactorSession) DepositOrLockNativeAsset(_opType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockNativeAsset(&_Zecrey.TransactOpts, _opType, _accountName)
}

// ExecuteBlocks is a paid mutator transaction binding the contract method 0xa0b94d61.
//
// Solidity: function executeBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks) returns()
func (_Zecrey *ZecreyTransactor) ExecuteBlocks(opts *bind.TransactOpts, _blocks []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "executeBlocks", _blocks)
}

// ExecuteBlocks is a paid mutator transaction binding the contract method 0xa0b94d61.
//
// Solidity: function executeBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks) returns()
func (_Zecrey *ZecreySession) ExecuteBlocks(_blocks []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.ExecuteBlocks(&_Zecrey.TransactOpts, _blocks)
}

// ExecuteBlocks is a paid mutator transaction binding the contract method 0xa0b94d61.
//
// Solidity: function executeBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks) returns()
func (_Zecrey *ZecreyTransactorSession) ExecuteBlocks(_blocks []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.ExecuteBlocks(&_Zecrey.TransactOpts, _blocks)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreyTransactor) Initialize(opts *bind.TransactOpts, initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "initialize", initializationParameters)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreySession) Initialize(initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.Contract.Initialize(&_Zecrey.TransactOpts, initializationParameters)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreyTransactorSession) Initialize(initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.Contract.Initialize(&_Zecrey.TransactOpts, initializationParameters)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x75329d6b.
//
// Solidity: function revertBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocksToRevert) returns()
func (_Zecrey *ZecreyTransactor) RevertBlocks(opts *bind.TransactOpts, _blocksToRevert []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "revertBlocks", _blocksToRevert)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x75329d6b.
//
// Solidity: function revertBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocksToRevert) returns()
func (_Zecrey *ZecreySession) RevertBlocks(_blocksToRevert []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.RevertBlocks(&_Zecrey.TransactOpts, _blocksToRevert)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x75329d6b.
//
// Solidity: function revertBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocksToRevert) returns()
func (_Zecrey *ZecreyTransactorSession) RevertBlocks(_blocksToRevert []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.RevertBlocks(&_Zecrey.TransactOpts, _blocksToRevert)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0x0d09454e.
//
// Solidity: function verifyBlocks(((uint32,bytes32,bytes32,uint256,bytes32),(uint256[2],uint256[2][2],uint256[2]))[] _blocks) returns()
func (_Zecrey *ZecreyTransactor) VerifyBlocks(opts *bind.TransactOpts, _blocks []ZecreyVerifyBlockInfo) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "verifyBlocks", _blocks)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0x0d09454e.
//
// Solidity: function verifyBlocks(((uint32,bytes32,bytes32,uint256,bytes32),(uint256[2],uint256[2][2],uint256[2]))[] _blocks) returns()
func (_Zecrey *ZecreySession) VerifyBlocks(_blocks []ZecreyVerifyBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.VerifyBlocks(&_Zecrey.TransactOpts, _blocks)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0x0d09454e.
//
// Solidity: function verifyBlocks(((uint32,bytes32,bytes32,uint256,bytes32),(uint256[2],uint256[2][2],uint256[2]))[] _blocks) returns()
func (_Zecrey *ZecreyTransactorSession) VerifyBlocks(_blocks []ZecreyVerifyBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.VerifyBlocks(&_Zecrey.TransactOpts, _blocks)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreyTransactor) WithdrawPendingBalance(opts *bind.TransactOpts, _owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "withdrawPendingBalance", _owner, _token, _amount)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreySession) WithdrawPendingBalance(_owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.WithdrawPendingBalance(&_Zecrey.TransactOpts, _owner, _token, _amount)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreyTransactorSession) WithdrawPendingBalance(_owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.WithdrawPendingBalance(&_Zecrey.TransactOpts, _owner, _token, _amount)
}

// ZecreyBlockCommitIterator is returned from FilterBlockCommit and is used to iterate over the raw logs and unpacked data for BlockCommit events raised by the Zecrey contract.
type ZecreyBlockCommitIterator struct {
	Event *ZecreyBlockCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockCommit represents a BlockCommit event raised by the Zecrey contract.
type ZecreyBlockCommit struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockCommit is a free log retrieval operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockCommit(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockCommitIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockCommit", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockCommitIterator{contract: _Zecrey.contract, event: "BlockCommit", logs: logs, sub: sub}, nil
}

// WatchBlockCommit is a free log subscription operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockCommit(opts *bind.WatchOpts, sink chan<- *ZecreyBlockCommit, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockCommit", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockCommit)
				if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockCommit is a log parse operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockCommit(log types.Log) (*ZecreyBlockCommit, error) {
	event := new(ZecreyBlockCommit)
	if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlockExecutionIterator is returned from FilterBlockExecution and is used to iterate over the raw logs and unpacked data for BlockExecution events raised by the Zecrey contract.
type ZecreyBlockExecutionIterator struct {
	Event *ZecreyBlockExecution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockExecutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockExecution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockExecution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockExecutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockExecutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockExecution represents a BlockExecution event raised by the Zecrey contract.
type ZecreyBlockExecution struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockExecution is a free log retrieval operation binding the contract event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockExecution(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockExecutionIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockExecution", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockExecutionIterator{contract: _Zecrey.contract, event: "BlockExecution", logs: logs, sub: sub}, nil
}

// WatchBlockExecution is a free log subscription operation binding the contract event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockExecution(opts *bind.WatchOpts, sink chan<- *ZecreyBlockExecution, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockExecution", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockExecution)
				if err := _Zecrey.contract.UnpackLog(event, "BlockExecution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockExecution is a log parse operation binding the contract event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockExecution(log types.Log) (*ZecreyBlockExecution, error) {
	event := new(ZecreyBlockExecution)
	if err := _Zecrey.contract.UnpackLog(event, "BlockExecution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlockVerificationIterator is returned from FilterBlockVerification and is used to iterate over the raw logs and unpacked data for BlockVerification events raised by the Zecrey contract.
type ZecreyBlockVerificationIterator struct {
	Event *ZecreyBlockVerification // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockVerificationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockVerification)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockVerification)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockVerificationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockVerificationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockVerification represents a BlockVerification event raised by the Zecrey contract.
type ZecreyBlockVerification struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockVerification is a free log retrieval operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockVerification(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockVerificationIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockVerification", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockVerificationIterator{contract: _Zecrey.contract, event: "BlockVerification", logs: logs, sub: sub}, nil
}

// WatchBlockVerification is a free log subscription operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockVerification(opts *bind.WatchOpts, sink chan<- *ZecreyBlockVerification, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockVerification", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockVerification)
				if err := _Zecrey.contract.UnpackLog(event, "BlockVerification", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockVerification is a log parse operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockVerification(log types.Log) (*ZecreyBlockVerification, error) {
	event := new(ZecreyBlockVerification)
	if err := _Zecrey.contract.UnpackLog(event, "BlockVerification", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlocksRevertIterator is returned from FilterBlocksRevert and is used to iterate over the raw logs and unpacked data for BlocksRevert events raised by the Zecrey contract.
type ZecreyBlocksRevertIterator struct {
	Event *ZecreyBlocksRevert // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlocksRevertIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlocksRevert)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlocksRevert)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlocksRevertIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlocksRevertIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlocksRevert represents a BlocksRevert event raised by the Zecrey contract.
type ZecreyBlocksRevert struct {
	TotalBlocksVerified  uint32
	TotalBlocksCommitted uint32
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterBlocksRevert is a free log retrieval operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) FilterBlocksRevert(opts *bind.FilterOpts) (*ZecreyBlocksRevertIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlocksRevert")
	if err != nil {
		return nil, err
	}
	return &ZecreyBlocksRevertIterator{contract: _Zecrey.contract, event: "BlocksRevert", logs: logs, sub: sub}, nil
}

// WatchBlocksRevert is a free log subscription operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) WatchBlocksRevert(opts *bind.WatchOpts, sink chan<- *ZecreyBlocksRevert) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlocksRevert")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlocksRevert)
				if err := _Zecrey.contract.UnpackLog(event, "BlocksRevert", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlocksRevert is a log parse operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) ParseBlocksRevert(log types.Log) (*ZecreyBlocksRevert, error) {
	event := new(ZecreyBlocksRevert)
	if err := _Zecrey.contract.UnpackLog(event, "BlocksRevert", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositCommitIterator is returned from FilterDepositCommit and is used to iterate over the raw logs and unpacked data for DepositCommit events raised by the Zecrey contract.
type ZecreyDepositCommitIterator struct {
	Event *ZecreyDepositCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDepositCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDepositCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDepositCommit represents a DepositCommit event raised by the Zecrey contract.
type ZecreyDepositCommit struct {
	ZecreyBlockNumber uint32
	AccountIndex      uint32
	AccountName       [32]byte
	AssetId           uint16
	Amount            *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterDepositCommit is a free log retrieval operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterDepositCommit(opts *bind.FilterOpts, zecreyBlockNumber []uint32, accountIndex []uint32, assetId []uint16) (*ZecreyDepositCommitIterator, error) {

	var zecreyBlockNumberRule []interface{}
	for _, zecreyBlockNumberItem := range zecreyBlockNumber {
		zecreyBlockNumberRule = append(zecreyBlockNumberRule, zecreyBlockNumberItem)
	}
	var accountIndexRule []interface{}
	for _, accountIndexItem := range accountIndex {
		accountIndexRule = append(accountIndexRule, accountIndexItem)
	}

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "DepositCommit", zecreyBlockNumberRule, accountIndexRule, assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositCommitIterator{contract: _Zecrey.contract, event: "DepositCommit", logs: logs, sub: sub}, nil
}

// WatchDepositCommit is a free log subscription operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchDepositCommit(opts *bind.WatchOpts, sink chan<- *ZecreyDepositCommit, zecreyBlockNumber []uint32, accountIndex []uint32, assetId []uint16) (event.Subscription, error) {

	var zecreyBlockNumberRule []interface{}
	for _, zecreyBlockNumberItem := range zecreyBlockNumber {
		zecreyBlockNumberRule = append(zecreyBlockNumberRule, zecreyBlockNumberItem)
	}
	var accountIndexRule []interface{}
	for _, accountIndexItem := range accountIndex {
		accountIndexRule = append(accountIndexRule, accountIndexItem)
	}

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "DepositCommit", zecreyBlockNumberRule, accountIndexRule, assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDepositCommit)
				if err := _Zecrey.contract.UnpackLog(event, "DepositCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositCommit is a log parse operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseDepositCommit(log types.Log) (*ZecreyDepositCommit, error) {
	event := new(ZecreyDepositCommit)
	if err := _Zecrey.contract.UnpackLog(event, "DepositCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositOrLockIterator is returned from FilterDepositOrLock and is used to iterate over the raw logs and unpacked data for DepositOrLock events raised by the Zecrey contract.
type ZecreyDepositOrLockIterator struct {
	Event *ZecreyDepositOrLock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositOrLockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDepositOrLock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDepositOrLock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositOrLockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositOrLockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDepositOrLock represents a DepositOrLock event raised by the Zecrey contract.
type ZecreyDepositOrLock struct {
	OpType      uint8
	AssetId     uint16
	AccountName [32]byte
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDepositOrLock is a free log retrieval operation binding the contract event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 indexed assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterDepositOrLock(opts *bind.FilterOpts, assetId []uint16) (*ZecreyDepositOrLockIterator, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "DepositOrLock", assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositOrLockIterator{contract: _Zecrey.contract, event: "DepositOrLock", logs: logs, sub: sub}, nil
}

// WatchDepositOrLock is a free log subscription operation binding the contract event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 indexed assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchDepositOrLock(opts *bind.WatchOpts, sink chan<- *ZecreyDepositOrLock, assetId []uint16) (event.Subscription, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "DepositOrLock", assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDepositOrLock)
				if err := _Zecrey.contract.UnpackLog(event, "DepositOrLock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositOrLock is a log parse operation binding the contract event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 indexed assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseDepositOrLock(log types.Log) (*ZecreyDepositOrLock, error) {
	event := new(ZecreyDepositOrLock)
	if err := _Zecrey.contract.UnpackLog(event, "DepositOrLock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyExodusModeIterator is returned from FilterExodusMode and is used to iterate over the raw logs and unpacked data for ExodusMode events raised by the Zecrey contract.
type ZecreyExodusModeIterator struct {
	Event *ZecreyExodusMode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyExodusModeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyExodusMode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyExodusMode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyExodusModeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyExodusModeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyExodusMode represents a ExodusMode event raised by the Zecrey contract.
type ZecreyExodusMode struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterExodusMode is a free log retrieval operation binding the contract event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) FilterExodusMode(opts *bind.FilterOpts) (*ZecreyExodusModeIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "ExodusMode")
	if err != nil {
		return nil, err
	}
	return &ZecreyExodusModeIterator{contract: _Zecrey.contract, event: "ExodusMode", logs: logs, sub: sub}, nil
}

// WatchExodusMode is a free log subscription operation binding the contract event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) WatchExodusMode(opts *bind.WatchOpts, sink chan<- *ZecreyExodusMode) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "ExodusMode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyExodusMode)
				if err := _Zecrey.contract.UnpackLog(event, "ExodusMode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExodusMode is a log parse operation binding the contract event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) ParseExodusMode(log types.Log) (*ZecreyExodusMode, error) {
	event := new(ZecreyExodusMode)
	if err := _Zecrey.contract.UnpackLog(event, "ExodusMode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyFullExitCommitIterator is returned from FilterFullExitCommit and is used to iterate over the raw logs and unpacked data for FullExitCommit events raised by the Zecrey contract.
type ZecreyFullExitCommitIterator struct {
	Event *ZecreyFullExitCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyFullExitCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyFullExitCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyFullExitCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyFullExitCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyFullExitCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyFullExitCommit represents a FullExitCommit event raised by the Zecrey contract.
type ZecreyFullExitCommit struct {
	ZecreyBlockId uint32
	AccountId     uint32
	Owner         common.Address
	TokenId       uint16
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterFullExitCommit is a free log retrieval operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterFullExitCommit(opts *bind.FilterOpts, zecreyBlockId []uint32, accountId []uint32, tokenId []uint16) (*ZecreyFullExitCommitIterator, error) {

	var zecreyBlockIdRule []interface{}
	for _, zecreyBlockIdItem := range zecreyBlockId {
		zecreyBlockIdRule = append(zecreyBlockIdRule, zecreyBlockIdItem)
	}
	var accountIdRule []interface{}
	for _, accountIdItem := range accountId {
		accountIdRule = append(accountIdRule, accountIdItem)
	}

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "FullExitCommit", zecreyBlockIdRule, accountIdRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyFullExitCommitIterator{contract: _Zecrey.contract, event: "FullExitCommit", logs: logs, sub: sub}, nil
}

// WatchFullExitCommit is a free log subscription operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchFullExitCommit(opts *bind.WatchOpts, sink chan<- *ZecreyFullExitCommit, zecreyBlockId []uint32, accountId []uint32, tokenId []uint16) (event.Subscription, error) {

	var zecreyBlockIdRule []interface{}
	for _, zecreyBlockIdItem := range zecreyBlockId {
		zecreyBlockIdRule = append(zecreyBlockIdRule, zecreyBlockIdItem)
	}
	var accountIdRule []interface{}
	for _, accountIdItem := range accountId {
		accountIdRule = append(accountIdRule, accountIdItem)
	}

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "FullExitCommit", zecreyBlockIdRule, accountIdRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyFullExitCommit)
				if err := _Zecrey.contract.UnpackLog(event, "FullExitCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFullExitCommit is a log parse operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseFullExitCommit(log types.Log) (*ZecreyFullExitCommit, error) {
	event := new(ZecreyFullExitCommit)
	if err := _Zecrey.contract.UnpackLog(event, "FullExitCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyNewPriorityRequestIterator is returned from FilterNewPriorityRequest and is used to iterate over the raw logs and unpacked data for NewPriorityRequest events raised by the Zecrey contract.
type ZecreyNewPriorityRequestIterator struct {
	Event *ZecreyNewPriorityRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyNewPriorityRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyNewPriorityRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyNewPriorityRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyNewPriorityRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyNewPriorityRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyNewPriorityRequest represents a NewPriorityRequest event raised by the Zecrey contract.
type ZecreyNewPriorityRequest struct {
	Sender          common.Address
	SerialId        uint64
	OpType          uint8
	PubData         []byte
	ExpirationBlock *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNewPriorityRequest is a free log retrieval operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 opType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) FilterNewPriorityRequest(opts *bind.FilterOpts) (*ZecreyNewPriorityRequestIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "NewPriorityRequest")
	if err != nil {
		return nil, err
	}
	return &ZecreyNewPriorityRequestIterator{contract: _Zecrey.contract, event: "NewPriorityRequest", logs: logs, sub: sub}, nil
}

// WatchNewPriorityRequest is a free log subscription operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 opType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) WatchNewPriorityRequest(opts *bind.WatchOpts, sink chan<- *ZecreyNewPriorityRequest) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "NewPriorityRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyNewPriorityRequest)
				if err := _Zecrey.contract.UnpackLog(event, "NewPriorityRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewPriorityRequest is a log parse operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 opType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) ParseNewPriorityRequest(log types.Log) (*ZecreyNewPriorityRequest, error) {
	event := new(ZecreyNewPriorityRequest)
	if err := _Zecrey.contract.UnpackLog(event, "NewPriorityRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyNoticePeriodChangeIterator is returned from FilterNoticePeriodChange and is used to iterate over the raw logs and unpacked data for NoticePeriodChange events raised by the Zecrey contract.
type ZecreyNoticePeriodChangeIterator struct {
	Event *ZecreyNoticePeriodChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyNoticePeriodChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyNoticePeriodChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyNoticePeriodChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyNoticePeriodChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyNoticePeriodChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyNoticePeriodChange represents a NoticePeriodChange event raised by the Zecrey contract.
type ZecreyNoticePeriodChange struct {
	NewNoticePeriod *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNoticePeriodChange is a free log retrieval operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) FilterNoticePeriodChange(opts *bind.FilterOpts) (*ZecreyNoticePeriodChangeIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "NoticePeriodChange")
	if err != nil {
		return nil, err
	}
	return &ZecreyNoticePeriodChangeIterator{contract: _Zecrey.contract, event: "NoticePeriodChange", logs: logs, sub: sub}, nil
}

// WatchNoticePeriodChange is a free log subscription operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) WatchNoticePeriodChange(opts *bind.WatchOpts, sink chan<- *ZecreyNoticePeriodChange) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "NoticePeriodChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyNoticePeriodChange)
				if err := _Zecrey.contract.UnpackLog(event, "NoticePeriodChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNoticePeriodChange is a log parse operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) ParseNoticePeriodChange(log types.Log) (*ZecreyNoticePeriodChange, error) {
	event := new(ZecreyNoticePeriodChange)
	if err := _Zecrey.contract.UnpackLog(event, "NoticePeriodChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the Zecrey contract.
type ZecreyWithdrawalIterator struct {
	Event *ZecreyWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdrawal represents a Withdrawal event raised by the Zecrey contract.
type ZecreyWithdrawal struct {
	AssetId uint16
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterWithdrawal(opts *bind.FilterOpts, assetId []uint16) (*ZecreyWithdrawalIterator, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Withdrawal", assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawalIterator{contract: _Zecrey.contract, event: "Withdrawal", logs: logs, sub: sub}, nil
}

// WatchWithdrawal is a free log subscription operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *ZecreyWithdrawal, assetId []uint16) (event.Subscription, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Withdrawal", assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdrawal)
				if err := _Zecrey.contract.UnpackLog(event, "Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawal is a log parse operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseWithdrawal(log types.Log) (*ZecreyWithdrawal, error) {
	event := new(ZecreyWithdrawal)
	if err := _Zecrey.contract.UnpackLog(event, "Withdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawalPendingIterator is returned from FilterWithdrawalPending and is used to iterate over the raw logs and unpacked data for WithdrawalPending events raised by the Zecrey contract.
type ZecreyWithdrawalPendingIterator struct {
	Event *ZecreyWithdrawalPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawalPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdrawalPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdrawalPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawalPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawalPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdrawalPending represents a WithdrawalPending event raised by the Zecrey contract.
type ZecreyWithdrawalPending struct {
	AssetId uint16
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalPending is a free log retrieval operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterWithdrawalPending(opts *bind.FilterOpts, assetId []uint16) (*ZecreyWithdrawalPendingIterator, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "WithdrawalPending", assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawalPendingIterator{contract: _Zecrey.contract, event: "WithdrawalPending", logs: logs, sub: sub}, nil
}

// WatchWithdrawalPending is a free log subscription operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchWithdrawalPending(opts *bind.WatchOpts, sink chan<- *ZecreyWithdrawalPending, assetId []uint16) (event.Subscription, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "WithdrawalPending", assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdrawalPending)
				if err := _Zecrey.contract.UnpackLog(event, "WithdrawalPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalPending is a log parse operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseWithdrawalPending(log types.Log) (*ZecreyWithdrawalPending, error) {
	event := new(ZecreyWithdrawalPending)
	if err := _Zecrey.contract.UnpackLog(event, "WithdrawalPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
