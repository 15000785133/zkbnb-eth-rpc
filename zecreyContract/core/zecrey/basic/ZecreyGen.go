// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package basic

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StorageBlockHeader is an auto generated low-level Go binding around an user-defined struct.
type StorageBlockHeader struct {
	BlockNumber    uint32
	OnchainOpsRoot [32]byte
	AccountRoot    [32]byte
	Timestamp      *big.Int
	Commitment     [32]byte
}

// ZecreyCommitBlockInfo is an auto generated low-level Go binding around an user-defined struct.
type ZecreyCommitBlockInfo struct {
	BlockNumber           uint32
	OnchainOpsRoot        [32]byte
	NewStateRoot          [32]byte
	Timestamp             *big.Int
	Commitment            [32]byte
	OnchainOpsPubData     []byte
	OnchainOpsCount       uint16
	OnchainOpsMerkleProof [5][32]byte
}

// ZecreyVerifyBlockInfo is an auto generated low-level Go binding around an user-defined struct.
type ZecreyVerifyBlockInfo struct {
	BlockHeader StorageBlockHeader
	InProofs    []*big.Int
	ProofNums   *big.Int
}

// ZecreyABI is the input ABI used to generate the binding from.
const ZecreyABI = "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_chainId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_nativeAssetId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_maxPendingBlocks\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockVerification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksVerified\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksCommitted\",\"type\":\"uint32\"}],\"name\":\"BlocksRevert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zecreyBlockNumber\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"DepositCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"opType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"DepositOrLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExodusMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zecreyBlockId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"FullExitCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"serialId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enumOperations.OpType\",\"name\":\"opType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"name\":\"NewPriorityRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNoticePeriod\",\"type\":\"uint256\"}],\"name\":\"NoticePeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"WithdrawalPending\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_onchainOpsMerkleHelper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxAmount\",\"type\":\"uint128\"}],\"name\":\"_transferERC20\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"blockOnchainOpsPubData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader\",\"name\":\"_lastCommittedBlockData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newStateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"onchainOpsPubData\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"onchainOpsCount\",\"type\":\"uint16\"},{\"internalType\":\"bytes32[5]\",\"name\":\"onchainOpsMerkleProof\",\"type\":\"bytes32[5]\"}],\"internalType\":\"structZecrey.CommitBlockInfo[]\",\"name\":\"_newBlocksData\",\"type\":\"tuple[]\"}],\"name\":\"commitBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_onchainOpsPubData\",\"type\":\"bytes\"}],\"name\":\"computeOnchainOpsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"onchainOpsDataHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_opType\",\"type\":\"uint8\"},{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint104\",\"name\":\"_amount\",\"type\":\"uint104\"},{\"internalType\":\"bytes32\",\"name\":\"_accountName\",\"type\":\"bytes32\"}],\"name\":\"depositOrLockERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_opType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_accountName\",\"type\":\"bytes32\"}],\"name\":\"depositOrLockNativeAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"}],\"name\":\"executeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exodusMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstPriorityRequestId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_assetId\",\"type\":\"uint16\"}],\"name\":\"forceWithdrawUnhandledBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetAddr\",\"type\":\"address\"}],\"name\":\"getPendingBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializationParameters\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"onchainOpsCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"onchainOpsExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader[]\",\"name\":\"_blocksToRevert\",\"type\":\"tuple[]\"}],\"name\":\"revertBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"storedBlockHeaderHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksCommitted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksExecuted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksVerified\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOpenPriorityRequests\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unhandledBalances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"unhandledBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader\",\"name\":\"blockHeader\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"inProofs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"proofNums\",\"type\":\"uint256\"}],\"internalType\":\"structZecrey.VerifyBlockInfo[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"}],\"name\":\"verifyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"withdrawPendingBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ZecreyBin is the compiled bytecode used for deploying new contracts.
var ZecreyBin = "0x60806040523480156200001157600080fd5b50604051620044433803806200444383398101604081905262000034916200008a565b600c805460ff191660ff949094169390931762ffff00191661010061ffff938416021764ffff000000191663010000009190921602179055620000d9565b805161ffff811681146200008557600080fd5b919050565b6000806000606084860312156200009f578283fd5b835160ff81168114620000b0578384fd5b9250620000c06020850162000072565b9150620000d06040850162000072565b90509250925092565b61435a80620000e96000396000f3fe6080604052600436106101665760003560e01c806375329d6b116100d1578063a7ccec2f1161008a578063e1d730d911610064578063e1d730d914610413578063eface7e214610441578063f22354871461046e578063faf4d8cb1461048357610166565b8063a7ccec2f146103c9578063c57b22be146103de578063d514da50146103f357610166565b806375329d6b146103095780638b4f7de9146103295780638c8ebc52146103495780638ee1a74e146103695780639b9e91b614610389578063a0b94d61146103a957610166565b80634167d002116101235780634167d0021461022d578063419e56af1461025a578063439fab911461027a5780635aca41f61461029a57806367708dae146102c75780636f950a51146102e957610166565b80630222740e1461016b5780631678b35e146101a15780631dd269e3146101b65780631e15f3e0146101d6578063264c0912146101f65780632d24006c1461020b575b600080fd5b34801561017757600080fd5b5061018b610186366004613866565b610498565b6040516101989190613d39565b60405180910390f35b6101b46101af366004613b74565b6104ad565b005b3480156101c257600080fd5b506101b46101d1366004613aed565b610530565b3480156101e257600080fd5b506101b46101f1366004613b9d565b61060c565b34801561020257600080fd5b5061018b61096b565b34801561021757600080fd5b5061022061097b565b60405161019891906141d6565b34801561023957600080fd5b5061024d610248366004613b5a565b61098e565b6040516101989190613d44565b34801561026657600080fd5b506101b46102753660046136fb565b6109a0565b34801561028657600080fd5b506101b46102953660046138a6565b610b24565b3480156102a657600080fd5b506102ba6102b5366004613626565b610c30565b604051610198919061419a565b3480156102d357600080fd5b506102dc610cff565b60405161019891906141fe565b3480156102f557600080fd5b506101b461030436600461399f565b610d15565b34801561031557600080fd5b506101b461032436600461365e565b610ece565b34801561033557600080fd5b5061018b610344366004613866565b6110e2565b34801561035557600080fd5b5061024d610364366004613912565b6110f7565b34801561037557600080fd5b506102ba610384366004613944565b611151565b34801561039557600080fd5b5061018b6103a4366004613b42565b6112f0565b3480156103b557600080fd5b506101b46103c436600461365e565b61131a565b3480156103d557600080fd5b5061024d6114a8565b3480156103ea57600080fd5b506102dc6114ae565b3480156103ff57600080fd5b506101b461040e3660046135dc565b6114c4565b34801561041f57600080fd5b5061043361042e366004613b25565b6116fe565b6040516101989291906141ae565b34801561044d57600080fd5b5061046161045c366004613b5a565b61172e565b6040516101989190613d4d565b34801561047a57600080fd5b506102206117c9565b34801561048f57600080fd5b506102206117dc565b60086020526000908152604090205460ff1681565b6104b56117e8565b60ff821615806104c857508160ff166001145b6104ed5760405162461bcd60e51b81526004016104e490614079565b60405180910390fd5b3461050a5760405162461bcd60e51b81526004016104e490613ed9565b600c5461052c908390610100900461ffff163361052634611814565b85611857565b5050565b61ffff81166000908152600460209081526040808320338452825291829020825180840190935280546001600160801b03168084526001909101549183019190915261058e5760405162461bcd60e51b81526004016104e490613e3d565b600c546020820151630100000090910461ffff16906105ae9043906119c9565b116105cb5760405162461bcd60e51b81526004016104e490613f01565b6105da823383600001516119f6565b5061ffff166000908152600460209081526040808320338452909152812080546001600160801b031916815560010155565b600080516020614305833981519152546001811461062957600080fd5b6002600080516020614305833981519152556106436117e8565b60ff8516158061065657508460ff166001145b6106725760405162461bcd60e51b81526004016104e490614079565b6001600160681b0383166106985760405162461bcd60e51b81526004016104e490613ed9565b600254604051639bd7760960e01b81526000916001600160a01b031690639bd77609906106c9908890600401613cef565b60206040518083038186803b1580156106e157600080fd5b505afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190613b09565b6002546040516331d8687b60e01b81529192506001600160a01b0316906331d8687b9061074a9084906004016141c7565b60206040518083038186803b15801561076257600080fd5b505afa158015610776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079a919061384a565b156107b75760405162461bcd60e51b81526004016104e490614041565b6040516370a0823160e01b81526000906001600160a01b038716906370a08231906107e6903090600401613cef565b60206040518083038186803b1580156107fe57600080fd5b505afa158015610812573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610836919061388e565b905061085e863330610850896001600160681b0316611814565b6001600160801b0316611be1565b61087a5760405162461bcd60e51b81526004016104e490613dea565b6040516370a0823160e01b81526000906001600160a01b038816906370a08231906108a9903090600401613cef565b60206040518083038186803b1580156108c157600080fd5b505afa1580156108d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f9919061388e565b9050600061090f61090a83856119c9565b611814565b90506001600160681b036001600160801b03821611156109415760405162461bcd60e51b81526004016104e490613db4565b61094e898533848a611857565b505050506001600080516020614305833981519152555050505050565b600554600160601b900460ff1681565b600554600160201b900463ffffffff1681565b60076020526000908152604090205481565b60008051602061430583398151915254600181146109bd57600080fd5b6002600080516020614305833981519152556109d76117e8565b600254604051631e8d167560e21b81526001600160a01b0390911690637a3459d490610a07903390600401613cef565b60006040518083038186803b158015610a1f57600080fd5b505afa158015610a33573d6000803e3d6000fd5b5050505060005b82518161ffff161015610ac657610a6c838261ffff1681518110610a5a57fe5b60200260200101518261ffff16611d0d565b828161ffff1681518110610a7c57fe5b6020026020010151600001516000015163ffffffff167f0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd2038441360405160405180910390a2600101610a3a565b50610aee610ad48351611ea0565b60055463ffffffff600160201b90910481169190611edf16565b600560046101000a81548163ffffffff021916908363ffffffff1602179055506001600080516020614305833981519152555050565b610b2c611f27565b600080808080808080610b41898b018b613503565b600180546001600160a01b03808a166001600160a01b03199283161790925560028054928b16929091169190911790556000849055969e50949c50929a509098509650945092509050610b97600b8260046131b4565b506005805463ffffffff191663ffffffff881690811767ffffffff000000001916600160201b8202176bffffffff00000000000000001916600160401b8202179091556040805160a0810182529182526020820187905281018590526060810184905260808101839052610c0a81611f78565b63ffffffff90971660009081526007602052604090209690965550505050505050505050565b6000806001600160a01b03831615610cc557600254604051639bd7760960e01b81526001600160a01b0390911690639bd7760990610c72908690600401613cef565b60206040518083038186803b158015610c8a57600080fd5b505afa158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc29190613b09565b90505b60036000610cd38684611fa8565b6001600160501b03191681526020810191909152604001600020546001600160801b0316949350505050565b600554600160681b90046001600160401b031681565b6000805160206143058339815191525460018114610d3257600080fd5b600260008051602061430583398151915255610d4c6117e8565b600254604051635147001960e11b81526001600160a01b039091169063a28e003290610d7c903390600401613cef565b60006040518083038186803b158015610d9457600080fd5b505afa158015610da8573d6000803e3d6000fd5b50505050610db583611f78565b60055463ffffffff1660009081526007602052604090205414610dea5760405162461bcd60e51b81526004016104e490614109565b60005b82518163ffffffff161015610e7c57610e1f84848363ffffffff1681518110610e1257fe5b6020026020010151611fc5565b9350610e2a84611f78565b845163ffffffff908116600090815260076020526040808220939093558651925192909116917f81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b62684249190a2600101610ded565b50610e9d610e8a8351611ea0565b60055463ffffffff9081169190611edf16565b6005805463ffffffff191663ffffffff92909216919091179055505060016000805160206143058339815191525550565b610ed66117e8565b600254604051630e010cab60e11b81526001600160a01b0390911690631c02195690610f06903390600401613cef565b60006040518083038186803b158015610f1e57600080fd5b505afa158015610f32573d6000803e3d6000fd5b5050600554835163ffffffff808316945060009350610f5a92600160401b9004168403612130565b905060005b8163ffffffff168163ffffffff161015611070576000848263ffffffff1681518110610f8757fe5b6020908102919091010151600554815191925063ffffffff600160401b9091048116911610610fc85760405162461bcd60e51b81526004016104e490613fc3565b600554815163ffffffff9081169181168490031614610ff95760405162461bcd60e51b81526004016104e490613f40565b61100281611f78565b63ffffffff8516600090815260076020526040902054146110355760405162461bcd60e51b81526004016104e490613ebe565b63ffffffff84166000908152600760209081526040808320839055600a909152812061106091613242565b5060001990920191600101610f5f565b506005805463ffffffff191663ffffffff84811691821767ffffffff000000001916600160201b9290920291909117918290556040517f6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3926110d592169085906141e7565b60405180910390a1505050565b60096020526000908152604090205460ff1681565b60006002826040516111099190613c3e565b602060405180830381855afa158015611126573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611149919061388e565b90505b919050565b60003330146111725760405162461bcd60e51b81526004016104e49061409d565b6040516370a0823160e01b81526000906001600160a01b038716906370a08231906111a1903090600401613cef565b60206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f1919061388e565b90506112078686866001600160801b0316612152565b6112235760405162461bcd60e51b81526004016104e4906140d3565b6040516370a0823160e01b81526000906001600160a01b038816906370a0823190611252903090600401613cef565b60206040518083038186803b15801561126a57600080fd5b505afa15801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a2919061388e565b905060006112b083836119c9565b9050846001600160801b03168111156112db5760405162461bcd60e51b81526004016104e490613f25565b6112e481611814565b98975050505050505050565b600b816004811061130057600080fd5b60209182820401919006915054906101000a900460ff1681565b600080516020614305833981519152546001811461133757600080fd5b6002600080516020614305833981519152556113516117e8565b600254604051636810f99560e11b81526001600160a01b039091169063d021f32a90611381903390600401613cef565b60006040518083038186803b15801561139957600080fd5b505afa1580156113ad573d6000803e3d6000fd5b5050835161ffff169150600090505b8163ffffffff168161ffff161015611449576113f3848261ffff16815181106113e157fe5b60200260200101518261ffff16612278565b838161ffff168151811061140357fe5b60200260200101516000015163ffffffff167f24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb60405160405180910390a26001016113bc565b506114716114578451611ea0565b60055463ffffffff600160401b90910481169190611edf16565b600560086101000a81548163ffffffff021916908363ffffffff160217905550506001600080516020614305833981519152555050565b60005481565b600554600160a81b90046001600160401b031681565b60008051602061430583398151915254600181146114e157600080fd5b6002600080516020614305833981519152556001600160a01b0383166115a357600c5461151890610100900461ffff1683866124b8565b6000846001600160a01b0316836001600160801b031660405161153a90613c89565b60006040518083038185875af1925050503d8060008114611577576040519150601f19603f3d011682016040523d82523d6000602084013e61157c565b606091505b505090508061159d5760405162461bcd60e51b81526004016104e490614124565b506116e6565b600254604051639bd7760960e01b81526000916001600160a01b031690639bd77609906115d4908790600401613cef565b60206040518083038186803b1580156115ec57600080fd5b505afa158015611600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116249190613b09565b905060006116328683611fa8565b6001600160501b03198116600090815260036020526040808220549051634770d3a760e11b81529293506001600160801b0316913090638ee1a74e90611682908a908c908b908890600401613d80565b602060405180830381600087803b15801561169c57600080fd5b505af11580156116b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d49190613ad1565b90506116e184828a6124b8565b505050505b60016000805160206143058339815191525550505050565b6004602090815260009283526040808420909152908252902080546001909101546001600160801b039091169082565b600a6020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156117c15780601f10611796576101008083540402835291602001916117c1565b820191906000526020600020905b8154815290600101906020018083116117a457829003601f168201915b505050505081565b600554600160401b900463ffffffff1681565b60055463ffffffff1681565b600554600160601b900460ff16156118125760405162461bcd60e51b81526004016104e490613fed565b565b6000600160801b8210611853576040805162461bcd60e51b8152602060048201526002602482015261189b60f11b604482015290519081900360640190fd5b5090565b6040805160c08101825260ff8088168252600c5416602082015261ffff8616918101919091526001600160a01b03841660608201526001600160801b038316608082015260a0810182905260006118ad82612562565b905060006118ba826125ad565b6001600160601b031981166000908152600860209081526040808320805460ff1916600117905561ffff8b168352600482528083206001600160a01b038b1684528252918290208251808401909352546001600160801b031680835243918301919091529192509061192c90876125bb565b6001600160801b03908116825261ffff891660008181526004602090815260408083206001600160a01b038d168452825291829020855181546001600160801b031916951694909417845584015160019093019290925590517f962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b906119b6908c9089908b90614212565b60405180910390a2505050505050505050565b60006119ef8383604051806040016040528060018152602001603b60f91b815250612606565b9392505050565b6000611a028385611fa8565b600c5490915060009061ffff868116610100909204161415611a3a5783611a32816001600160801b03861661269d565b915050611b4c565b60025460405163dbfc296760e01b81526000916001600160a01b03169063dbfc296790611a6b9089906004016141c7565b60206040518083038186803b158015611a8357600080fd5b505afa158015611a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abb91906134e7565b604051634770d3a760e11b81529091503090638ee1a74e90620186a090611aec9085908a908a908190600401613d80565b602060405180830381600088803b158015611b0657600080fd5b5087f193505050508015611b37575060408051601f3d908101601f19168201909252611b3491810190613ad1565b60015b611b445760009150611b4a565b50600191505b505b8015611b93578461ffff167ff4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a8079393315484604051611b86919061419a565b60405180910390a2611bda565b611b9d8284612709565b8461ffff167fd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c168884604051611bd1919061419a565b60405180910390a25b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094859485948b16939092909182918083835b60208310611c675780518252601f199092019160209182019101611c48565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611cc9576040519150601f19603f3d011682016040523d82523d6000602084013e611cce565b606091505b50915091506000815160001480611cf85750818060200190516020811015611cf557600080fd5b50515b90508280156112e45750979650505050505050565b81515163ffffffff166000908152600760205260409020548251611d3090611f78565b14611d4d5760405162461bcd60e51b81526004016104e490613f6a565b600554825151600160201b90910463ffffffff90811683016001018116911614611d895760405162461bcd60e51b81526004016104e49061413f565b604080516003808252608082019092526000916020820160608036833701905050905060005460001c81600081518110611dbf57fe5b6020908102919091010152825160400151815182906001908110611ddf57fe5b6020908102919091010152825160800151815182906002908110611dff57fe5b60209081029190910181019190915260015490840151604080860151905163c50e826360e01b81526001600160a01b039093169263c50e826392611e4a929091869190600401613d03565b60206040518083038186803b158015611e6257600080fd5b505afa158015611e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9a919061384a565b50505050565b6000600160201b8210611853576040805162461bcd60e51b8152602060048201526002602482015261062760f31b604482015290519081900360640190fd5b600082820163ffffffff80851690821610156119ef576040805162461bcd60e51b8152602060048201526002602482015261189960f11b604482015290519081900360640190fd5b600080516020614305833981519152805460019091558015611f75576040805162461bcd60e51b815260206004820152600260248201526118a160f11b604482015290519081900360640190fd5b50565b600081604051602001611f8b919061415a565b604051602081830303815290604052805190602001209050919050565b60a01b61ffff60a01b166001600160a01b03919091161760501b90565b611fcd613286565b8251825163ffffffff90811660019092011614611ffc5760405162461bcd60e51b81526004016104e4906140b8565b8260600151826060015110156120245760405162461bcd60e51b81526004016104e490613e05565b600082606001516120456201518086606001516119c990919063ffffffff16565b11159050600061206461038486606001516127a790919063ffffffff16565b8460600151111590508180156120775750805b6120935760405162461bcd60e51b81526004016104e490614026565b505060006120a48360a001516110f7565b60e08401515190915081146120cb5760405162461bcd60e51b81526004016104e49061405c565b6120dd83602001518460e001516127e6565b6120e68361296b565b6040518060a00160405280846000015163ffffffff168152602001846020015181526020018460400151815260200184606001518152602001846080015181525091505092915050565b60008163ffffffff168363ffffffff161061214b57816119ef565b5090919050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17815292518251600094859485948a16939092909182918083835b602083106121d05780518252601f1990920191602091820191016121b1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612232576040519150601f19603f3d011682016040523d82523d6000602084013e612237565b606091505b50915091506000815160001480612261575081806020019051602081101561225e57600080fd5b50515b905082801561226d5750805b979650505050505050565b815163ffffffff1660009081526007602052604090205461229883611f78565b146122b55760405162461bcd60e51b81526004016104e490613f6a565b600554825163ffffffff600160201b9092048216911611156122e95760405162461bcd60e51b81526004016104e490613ea3565b6005548251600160401b90910463ffffffff908116830160010181169116146123245760405162461bcd60e51b81526004016104e49061413f565b815163ffffffff166000908152600a602090815260408083208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152929091908301828280156123bf5780601f10612394576101008083540402835291602001916123bf565b820191906000526020600020905b8154815290600101906020018083116123a257829003601f168201915b5050835193945060249392506123d3915050565b06156123f15760405162461bcd60e51b81526004016104e490613dcf565b8051600090612401906024612cb2565b90506000805b828161ffff1610156124b057600084838151811061242157fe5b016020015160f81c600981111561243457fe5b9050600881600981111561244457fe5b146124615760405162461bcd60e51b81526004016104e490613e67565b600061246f86856024612cd8565b9050600061247c82612d94565b90506124958160200151826060015183608001516119f6565b6124a08560246127a7565b9450505050806001019050612407565b505050505050565b60006124c48285611fa8565b6001600160501b031981166000908152600360205260409020549091506001600160801b03166124f48185612e4c565b6001600160501b031983166000908152600360205260409081902080546001600160801b0319166001600160801b0393909316929092179091555161ffff8616907ff4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a8079393315490611bd190879061419a565b6060816000015182602001518360400151846060015185608001518660a0015160405160200161259796959493929190613c8c565b6040516020818303038152906040529050919050565b805160209091012060601b90565b60008282016001600160801b0380851690821610156119ef576040805162461bcd60e51b8152602060048201526002602482015261189960f11b604482015290519081900360640190fd5b600081848411156126955760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561265a578181015183820152602001612642565b50505050905090810190601f1680156126875780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600080836001600160a01b0316620186a0846040516126bb90613c89565b600060405180830381858888f193505050503d80600081146126f9576040519150601f19603f3d011682016040523d82523d6000602084013e6126fe565b606091505b509095945050505050565b6001600160501b03198216600090815260036020526040908190205481518083019092526001600160801b0316908061274283856125bb565b6001600160801b03908116825260ff60209283018190526001600160501b031990961660009081526003835260409020835181549490930151909616600160801b0260ff60801b19929091166001600160801b03199093169290921716179092555050565b6000828201838110156119ef576040805162461bcd60e51b81526020600482015260026024820152610c4d60f21b604482015290519081900360640190fd5b805160015b60058163ffffffff16101561294657600b6001820363ffffffff166004811061281057fe5b602081049091015460ff601f9092166101000a9004166128b6576002838263ffffffff166005811061283e57fe5b602002015183604051602001612855929190613c30565b60408051601f198184030181529082905261286f91613c3e565b602060405180830381855afa15801561288c573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906128af919061388e565b915061293e565b600282848363ffffffff16600581106128cb57fe5b60200201516040516020016128e1929190613c30565b60408051601f19818403018152908290526128fb91613c3e565b602060405180830381855afa158015612918573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061293b919061388e565b91505b6001016127eb565b508083146129665760405162461bcd60e51b81526004016104e490613e20565b505050565b60a081015160006060815b8460c0015161ffff168161ffff161015612c8a57600084848151811061299857fe5b016020015160f81c60098111156129ab57fe5b905060018160098111156129bb57fe5b1415612b5a5760006129cf86866030612cd8565b905060006129dc826125ad565b6001600160601b0319811660009081526008602052604090205490915060ff161515600114612a1d5760405162461bcd60e51b81526004016104e490613e85565b6001600160601b0319811660009081526009602052604090205460ff1615612a575760405162461bcd60e51b81526004016104e490613f89565b6001600160601b031981166000908152600960205260408120805460ff19166001179055612a8483612e73565b60408082015161ffff1660009081526004602090815282822060608501516001600160a01b03168352815290829020825180840190935280546001600160801b03168084526001909101549183019190915260808301519293509091612aea9190612e4c565b6001600160801b03908116825260408381015161ffff1660009081526004602090815282822060608701516001600160a01b031683528152919020835181546001600160801b0319169316929092178255820151600190910155612b4f8860306127a7565b975050505050612c81565b6002816009811115612b6857fe5b1415612bd5576000612b7c86866030612cd8565b90506000612b89826125ad565b6001600160601b0319811660009081526008602052604090205490915060ff161515600114612bca5760405162461bcd60e51b81526004016104e490614008565b6000612a8483612e73565b6008816009811115612be357fe5b1415612c31576000612bf786866024612cd8565b90508381604051602001612c0c929190613c5a565b60408051601f198184030181529190529350612c298560246127a7565b945050612c81565b60606009826009811115612c4157fe5b1415612c6757612c5386866024612cd8565b9050612c608560246127a7565b9450612c7f565b60405162461bcd60e51b81526004016104e4906140ee565b505b50600101612976565b50835163ffffffff166000908152600a602090815260409091208251611bda928401906132b4565b60006119ef8383604051806040016040528060018152602001600f60fb1b815250612f0b565b606081830184511015612d16576040805162461bcd60e51b81526020600482015260016024820152602d60f91b604482015290519081900360640190fd5b6000826001600160401b0381118015612d2e57600080fd5b506040519080825280601f01601f191660200182016040528015612d59576020820181803683370190505b5090508215612d8c57602081018381016020860187015b81831015612d88578051835260209283019201612d70565b5050505b949350505050565b612d9c613330565b6001612da88382612f70565b60ff1683529050612db98382612f9c565b61ffff1660208401529050612dce8382612fb5565b63ffffffff1660408401529050612de58382612fc5565b6001600160a01b031660608401529050612dff8382612fd5565b6001600160801b031660808401529050612e198382612fb5565b63ffffffff1660a0840152905060248114612e465760405162461bcd60e51b81526004016104e490613fa8565b50919050565b60006119ef838360405180604001604052806002815260200161616160f01b815250612fe5565b612e7b613330565b6001612e878382612f70565b60ff1660208401529050612e9b8382612f9c565b61ffff1660408401529050612eb08382612fc5565b6001600160a01b031660608401529050612eca8382612fd5565b6001600160801b031660808401529050612ee4838261304a565b60a0840152905060308114612e465760405162461bcd60e51b81526004016104e490613fa8565b60008183612f5a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561265a578181015183820152602001612642565b506000838581612f6657fe5b0495945050505050565b600080826001019150838381518110612f8557fe5b602001015160f81c60f81b60f81c90509250929050565b600281016000612fac848461305a565b90509250929050565b600481016000612fac84846130a8565b601481016000612fac84846130eb565b601081016000612fac848461312e565b6000836001600160801b0316836001600160801b0316111582906126955760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561265a578181015183820152602001612642565b602081016000612fac8484613171565b600080826002019050808451101561309d576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b929092015192915050565b600080826004019050808451101561309d576040805162461bcd60e51b81526020600482015260016024820152602b60f91b604482015290519081900360640190fd5b600080826014019050808451101561309d576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b600080826010019050808451101561309d576040805162461bcd60e51b81526020600482015260016024820152605760f81b604482015290519081900360640190fd5b600080826020019050808451101561309d576040805162461bcd60e51b81526020600482015260016024820152605960f81b604482015290519081900360640190fd5b6001830191839082156132365791602002820160005b8382111561320757835183826101000a81548160ff02191690831515021790555092602001926001016020816000010492830192600103026131ca565b80156132345782816101000a81549060ff0219169055600101602081600001049283019260010302613207565b505b50611853929150613365565b50805460018160011615610100020316600290046000825580601f106132685750611f75565b601f016020900490600052602060002090810190611f759190613365565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826132ea5760008555613236565b82601f1061330357805160ff1916838001178555613236565b82800160010185558215613236579182015b82811115613236578251825591602001919060010190613315565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b5b808211156118535760008155600101613366565b600082601f83011261338a578081fd5b60405160a081018181106001600160401b03821117156133a657fe5b604052808360a081018610156133ba578384fd5b835b60058110156133db5781358352602092830192909101906001016133bc565b509195945050505050565b600082601f8301126133f6578081fd5b81356001600160401b0381111561340957fe5b61341c601f8201601f1916602001614236565b818152846020838601011115613430578283fd5b816020850160208301379081016020019190915292915050565b600060a0828403121561345b578081fd5b60405160a081018181106001600160401b038211171561347757fe5b604052905080613486836134c2565b8152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b803561114c816142f4565b803563ffffffff8116811461114c57600080fd5b803560ff8116811461114c57600080fd5b6000602082840312156134f8578081fd5b81516119ef816142bc565b600080600080600080600080610160808a8c031215613520578485fd5b893561352b816142bc565b985060208a81013561353c816142bc565b985061354a60408c016134c2565b975060608b0135965060808b0135955060a08b0135945060c08b013593508b60ff8c0112613576578283fd5b6135886135836004614259565b614236565b8060e08d018e858f01111561359b578586fd5b8594505b60048510156135c75780356135b3816142d1565b83526001949094019391830191830161359f565b50809450505050509295985092959890939650565b6000806000606084860312156135f0578081fd5b83356135fb816142bc565b9250602084013561360b816142bc565b9150604084013561361b816142df565b809150509250925092565b60008060408385031215613638578182fd5b8235613643816142bc565b91506020830135613653816142bc565b809150509250929050565b60006020808385031215613670578182fd5b82356001600160401b03811115613685578283fd5b8301601f81018513613695578283fd5b80356136a361358382614273565b8181528381019083850160a0808502860187018a10156136c1578788fd5b8795505b848610156136ed576136d78a8361344a565b84526001959095019492860192908101906136c5565b509098975050505050505050565b60006020828403121561370c578081fd5b6001600160401b038083351115613721578182fd5b8235830184601f820112613733578283fd5b6137406135838235614273565b81358152602080820191908301855b843581101561383d578135850160e0818b03601f1901121561376f578788fd5b60405160608101818110898211171561378457fe5b6040526137948b6020840161344a565b81528760c083013511156137a6578889fd5b60c082013582018b603f8201126137bb57898afd5b60208101356137cc61358382614273565b80828252602082019150604084018f60406020860287010111156137ee578d8efd5b8d94505b83851015613811578035835260019490940193602092830192016137f2565b5060208581019190915260e095909501356040850152505050855293840193919091019060010161374f565b5090979650505050505050565b60006020828403121561385b578081fd5b81516119ef816142d1565b600060208284031215613877578081fd5b81356001600160601b0319811681146119ef578182fd5b60006020828403121561389f578081fd5b5051919050565b600080602083850312156138b8578182fd5b82356001600160401b03808211156138ce578384fd5b818501915085601f8301126138e1578384fd5b8135818111156138ef578485fd5b866020828501011115613900578485fd5b60209290920196919550909350505050565b600060208284031215613923578081fd5b81356001600160401b03811115613938578182fd5b612d8c848285016133e6565b60008060008060808587031215613959578182fd5b8435613964816142bc565b93506020850135613974816142bc565b92506040850135613984816142df565b91506060850135613994816142df565b939692955090935050565b60008060c083850312156139b1578182fd5b6139bb848461344a565b915060a08301356001600160401b03808211156139d6578283fd5b818501915085601f8301126139e9578283fd5b813560206139f961358383614273565b82815281810190858301875b85811015613ac05781358801610180818e03601f19011215613a2557898afd5b613a30610100614236565b613a3b8783016134c2565b8152604082013587820152606082013560408201526080820135606082015260a0820135608082015260c082013589811115613a75578b8cfd5b613a838f89838601016133e6565b60a083015250613a9560e083016134b7565b60c0820152613aa88e610100840161337a565b60e08201528552509284019290840190600101613a05565b50979a909950975050505050505050565b600060208284031215613ae2578081fd5b81516119ef816142df565b600060208284031215613afe578081fd5b81356119ef816142f4565b600060208284031215613b1a578081fd5b81516119ef816142f4565b60008060408385031215613b37578182fd5b8235613643816142f4565b600060208284031215613b53578081fd5b5035919050565b600060208284031215613b6b578081fd5b6119ef826134c2565b60008060408385031215613b86578182fd5b613b8f836134d6565b946020939093013593505050565b60008060008060808587031215613bb2578182fd5b613bbb856134d6565b93506020850135613bcb816142bc565b925060408501356001600160681b0381168114613be6578283fd5b9396929550929360600135925050565b6000815180845260208085019450808401835b83811015613c2557815187529582019590820190600101613c09565b509495945050505050565b918252602082015260400190565b60008251613c50818460208701614290565b9190910192915050565b60008351613c6c818460208801614290565b835190830190613c80818360208801614290565b01949350505050565b90565b60f896871b6001600160f81b031990811682529590961b909416600186015260f09290921b6001600160f01b031916600285015260601b6001600160601b031916600484015260801b6001600160801b0319166018830152602882015260480190565b6001600160a01b0391909116815260200190565b600060608252613d166060830186613bf6565b8281036020840152613d288186613bf6565b915050826040830152949350505050565b901515815260200190565b90815260200190565b6000602082528251806020840152613d6c816040850160208701614290565b601f01601f19169190910160400192915050565b6001600160a01b0394851681529290931660208301526001600160801b039081166040830152909116606082015260800190565b6020808252600190820152604360f81b604082015260600190565b6020808252600190820152604160f81b604082015260600190565b6020808252600190820152606360f81b604082015260600190565b6020808252600190820152606760f81b604082015260600190565b6020808252600390820152620696d760ec1b604082015260600190565b60208082526010908201526f6e6f2062616c616e636520666f72207560801b604082015260600190565b602080825260049082015263069776f760e41b604082015260600190565b6020808252600490820152631a5bdc1960e21b604082015260600190565b6020808252600190820152606160f81b604082015260600190565b6020808252600190820152603960f91b604082015260600190565b6020808252600e908201526d1a5b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b6020808252600a90820152696e6f742065787069727960b01b604082015260600190565b6020808252600190820152603760f81b604082015260600190565b60208082526010908201526f6e6f74206c617465737420626c6f636b60801b604082015260600190565b602080825260059082015264065786531360dc1b604082015260600190565b6020808252600590820152641a595bdc1960da1b604082015260600190565b6020808252600190820152602760f91b604082015260600190565b60208082526010908201526f185b1c9958591e48195e1958dd5d195960821b604082015260600190565b6020808252600190820152601360fa1b604082015260600190565b6020808252600490820152631a5bdc1b60e21b604082015260600190565b6020808252600190820152600d60fb1b604082015260600190565b6020808252600190820152603160f91b604082015260600190565b6020808252600390820152620696f760ec1b604082015260600190565b6020808252600a90820152690696e76616c6964206f760b41b604082015260600190565b6020808252600190820152603560f81b604082015260600190565b6020808252600190820152603360f91b604082015260600190565b6020808252600190820152601b60f91b604082015260600190565b6020808252600190820152602360f91b604082015260600190565b6020808252600190820152606960f81b604082015260600190565b6020808252600190820152601960fa1b604082015260600190565b6020808252600190820152606b60f81b604082015260600190565b600060a08201905063ffffffff83511682526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b6001600160801b0391909116815260200190565b6001600160801b03929092168252602082015260400190565b61ffff91909116815260200190565b63ffffffff91909116815260200190565b63ffffffff92831681529116602082015260400190565b6001600160401b0391909116815260200190565b60ff93909316835260208301919091526001600160801b0316604082015260600190565b6040518181016001600160401b038111828210171561425157fe5b604052919050565b60006001600160401b0382111561426c57fe5b5060200290565b60006001600160401b0382111561428657fe5b5060209081020190565b60005b838110156142ab578181015183820152602001614293565b83811115611e9a5750506000910152565b6001600160a01b0381168114611f7557600080fd5b8015158114611f7557600080fd5b6001600160801b0381168114611f7557600080fd5b61ffff81168114611f7557600080fdfe8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4a2646970667358221220c990cbe3e5ac033216f731984a18f006fccfdb60d88cd3d7be6c741bcf0c1c4f64736f6c63430007060033"

// DeployZecrey deploys a new Ethereum contract, binding an instance of Zecrey to it.
func DeployZecrey(auth *bind.TransactOpts, backend bind.ContractBackend, _chainId uint8, _nativeAssetId uint16, _maxPendingBlocks uint16) (common.Address, *types.Transaction, *Zecrey, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ZecreyBin), backend, _chainId, _nativeAssetId, _maxPendingBlocks)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// Zecrey is an auto generated Go binding around an Ethereum contract.
type Zecrey struct {
	ZecreyCaller     // Read-only binding to the contract
	ZecreyTransactor // Write-only binding to the contract
	ZecreyFilterer   // Log filterer for contract events
}

// ZecreyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZecreyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZecreyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZecreyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZecreySession struct {
	Contract     *Zecrey           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZecreyCallerSession struct {
	Contract *ZecreyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ZecreyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZecreyTransactorSession struct {
	Contract     *ZecreyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZecreyRaw struct {
	Contract *Zecrey // Generic contract binding to access the raw methods on
}

// ZecreyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZecreyCallerRaw struct {
	Contract *ZecreyCaller // Generic read-only contract binding to access the raw methods on
}

// ZecreyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZecreyTransactorRaw struct {
	Contract *ZecreyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZecrey creates a new instance of Zecrey, bound to a specific deployed contract.
func NewZecrey(address common.Address, backend bind.ContractBackend) (*Zecrey, error) {
	contract, err := bindZecrey(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// NewZecreyCaller creates a new read-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyCaller(address common.Address, caller bind.ContractCaller) (*ZecreyCaller, error) {
	contract, err := bindZecrey(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyCaller{contract: contract}, nil
}

// NewZecreyTransactor creates a new write-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyTransactor(address common.Address, transactor bind.ContractTransactor) (*ZecreyTransactor, error) {
	contract, err := bindZecrey(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyTransactor{contract: contract}, nil
}

// NewZecreyFilterer creates a new log filterer instance of Zecrey, bound to a specific deployed contract.
func NewZecreyFilterer(address common.Address, filterer bind.ContractFilterer) (*ZecreyFilterer, error) {
	contract, err := bindZecrey(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZecreyFilterer{contract: contract}, nil
}

// bindZecrey binds a generic wrapper to an already deployed contract.
func bindZecrey(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.ZecreyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transact(opts, method, params...)
}

// OnchainOpsMerkleHelper is a free data retrieval call binding the contract method 0x9b9e91b6.
//
// Solidity: function _onchainOpsMerkleHelper(uint256 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsMerkleHelper(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "_onchainOpsMerkleHelper", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsMerkleHelper is a free data retrieval call binding the contract method 0x9b9e91b6.
//
// Solidity: function _onchainOpsMerkleHelper(uint256 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsMerkleHelper(arg0 *big.Int) (bool, error) {
	return _Zecrey.Contract.OnchainOpsMerkleHelper(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsMerkleHelper is a free data retrieval call binding the contract method 0x9b9e91b6.
//
// Solidity: function _onchainOpsMerkleHelper(uint256 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsMerkleHelper(arg0 *big.Int) (bool, error) {
	return _Zecrey.Contract.OnchainOpsMerkleHelper(&_Zecrey.CallOpts, arg0)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCaller) AccountRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "accountRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreySession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// BlockOnchainOpsPubData is a free data retrieval call binding the contract method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreyCaller) BlockOnchainOpsPubData(opts *bind.CallOpts, arg0 uint32) ([]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "blockOnchainOpsPubData", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// BlockOnchainOpsPubData is a free data retrieval call binding the contract method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreySession) BlockOnchainOpsPubData(arg0 uint32) ([]byte, error) {
	return _Zecrey.Contract.BlockOnchainOpsPubData(&_Zecrey.CallOpts, arg0)
}

// BlockOnchainOpsPubData is a free data retrieval call binding the contract method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreyCallerSession) BlockOnchainOpsPubData(arg0 uint32) ([]byte, error) {
	return _Zecrey.Contract.BlockOnchainOpsPubData(&_Zecrey.CallOpts, arg0)
}

// ComputeOnchainOpsHash is a free data retrieval call binding the contract method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreyCaller) ComputeOnchainOpsHash(opts *bind.CallOpts, _onchainOpsPubData []byte) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "computeOnchainOpsHash", _onchainOpsPubData)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeOnchainOpsHash is a free data retrieval call binding the contract method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreySession) ComputeOnchainOpsHash(_onchainOpsPubData []byte) ([32]byte, error) {
	return _Zecrey.Contract.ComputeOnchainOpsHash(&_Zecrey.CallOpts, _onchainOpsPubData)
}

// ComputeOnchainOpsHash is a free data retrieval call binding the contract method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreyCallerSession) ComputeOnchainOpsHash(_onchainOpsPubData []byte) ([32]byte, error) {
	return _Zecrey.Contract.ComputeOnchainOpsHash(&_Zecrey.CallOpts, _onchainOpsPubData)
}

// ExodusMode is a free data retrieval call binding the contract method 0x264c0912.
//
// Solidity: function exodusMode() view returns(bool)
func (_Zecrey *ZecreyCaller) ExodusMode(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "exodusMode")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ExodusMode is a free data retrieval call binding the contract method 0x264c0912.
//
// Solidity: function exodusMode() view returns(bool)
func (_Zecrey *ZecreySession) ExodusMode() (bool, error) {
	return _Zecrey.Contract.ExodusMode(&_Zecrey.CallOpts)
}

// ExodusMode is a free data retrieval call binding the contract method 0x264c0912.
//
// Solidity: function exodusMode() view returns(bool)
func (_Zecrey *ZecreyCallerSession) ExodusMode() (bool, error) {
	return _Zecrey.Contract.ExodusMode(&_Zecrey.CallOpts)
}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreyCaller) FirstPriorityRequestId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "firstPriorityRequestId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreySession) FirstPriorityRequestId() (uint64, error) {
	return _Zecrey.Contract.FirstPriorityRequestId(&_Zecrey.CallOpts)
}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreyCallerSession) FirstPriorityRequestId() (uint64, error) {
	return _Zecrey.Contract.FirstPriorityRequestId(&_Zecrey.CallOpts)
}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreyCaller) GetPendingBalance(opts *bind.CallOpts, _address common.Address, _assetAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getPendingBalance", _address, _assetAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreySession) GetPendingBalance(_address common.Address, _assetAddr common.Address) (*big.Int, error) {
	return _Zecrey.Contract.GetPendingBalance(&_Zecrey.CallOpts, _address, _assetAddr)
}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreyCallerSession) GetPendingBalance(_address common.Address, _assetAddr common.Address) (*big.Int, error) {
	return _Zecrey.Contract.GetPendingBalance(&_Zecrey.CallOpts, _address, _assetAddr)
}

// OnchainOpsCheck is a free data retrieval call binding the contract method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsCheck(opts *bind.CallOpts, arg0 [20]byte) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOpsCheck", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsCheck is a free data retrieval call binding the contract method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsCheck(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsCheck(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsCheck is a free data retrieval call binding the contract method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsCheck(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsCheck(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsExecuted is a free data retrieval call binding the contract method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsExecuted(opts *bind.CallOpts, arg0 [20]byte) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOpsExecuted", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsExecuted is a free data retrieval call binding the contract method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsExecuted(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsExecuted(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsExecuted is a free data retrieval call binding the contract method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsExecuted(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsExecuted(&_Zecrey.CallOpts, arg0)
}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCaller) StoredBlockHeaderHashes(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "storedBlockHeaderHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreySession) StoredBlockHeaderHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHeaderHashes(&_Zecrey.CallOpts, arg0)
}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) StoredBlockHeaderHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHeaderHashes(&_Zecrey.CallOpts, arg0)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksCommitted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksCommitted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksExecuted is a free data retrieval call binding the contract method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksExecuted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksExecuted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksExecuted is a free data retrieval call binding the contract method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksExecuted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksExecuted(&_Zecrey.CallOpts)
}

// TotalBlocksExecuted is a free data retrieval call binding the contract method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksExecuted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksExecuted(&_Zecrey.CallOpts)
}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksVerified(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksVerified")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksVerified() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksVerified(&_Zecrey.CallOpts)
}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksVerified() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksVerified(&_Zecrey.CallOpts)
}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreyCaller) TotalOpenPriorityRequests(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalOpenPriorityRequests")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreySession) TotalOpenPriorityRequests() (uint64, error) {
	return _Zecrey.Contract.TotalOpenPriorityRequests(&_Zecrey.CallOpts)
}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreyCallerSession) TotalOpenPriorityRequests() (uint64, error) {
	return _Zecrey.Contract.TotalOpenPriorityRequests(&_Zecrey.CallOpts)
}

// UnhandledBalances is a free data retrieval call binding the contract method 0xe1d730d9.
//
// Solidity: function unhandledBalances(uint16 , address ) view returns(uint128 unhandledBalance, uint256 blockNumber)
func (_Zecrey *ZecreyCaller) UnhandledBalances(opts *bind.CallOpts, arg0 uint16, arg1 common.Address) (struct {
	UnhandledBalance *big.Int
	BlockNumber      *big.Int
}, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "unhandledBalances", arg0, arg1)

	outstruct := new(struct {
		UnhandledBalance *big.Int
		BlockNumber      *big.Int
	})

	outstruct.UnhandledBalance = out[0].(*big.Int)
	outstruct.BlockNumber = out[1].(*big.Int)

	return *outstruct, err

}

// UnhandledBalances is a free data retrieval call binding the contract method 0xe1d730d9.
//
// Solidity: function unhandledBalances(uint16 , address ) view returns(uint128 unhandledBalance, uint256 blockNumber)
func (_Zecrey *ZecreySession) UnhandledBalances(arg0 uint16, arg1 common.Address) (struct {
	UnhandledBalance *big.Int
	BlockNumber      *big.Int
}, error) {
	return _Zecrey.Contract.UnhandledBalances(&_Zecrey.CallOpts, arg0, arg1)
}

// UnhandledBalances is a free data retrieval call binding the contract method 0xe1d730d9.
//
// Solidity: function unhandledBalances(uint16 , address ) view returns(uint128 unhandledBalance, uint256 blockNumber)
func (_Zecrey *ZecreyCallerSession) UnhandledBalances(arg0 uint16, arg1 common.Address) (struct {
	UnhandledBalance *big.Int
	BlockNumber      *big.Int
}, error) {
	return _Zecrey.Contract.UnhandledBalances(&_Zecrey.CallOpts, arg0, arg1)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactor) TransferERC20(opts *bind.TransactOpts, _token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "_transferERC20", _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreySession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactorSession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x6f950a51.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[5])[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactor) CommitBlocks(opts *bind.TransactOpts, _lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "commitBlocks", _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x6f950a51.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[5])[] _newBlocksData) returns()
func (_Zecrey *ZecreySession) CommitBlocks(_lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x6f950a51.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[5])[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactorSession) CommitBlocks(_lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// DepositOrLockERC20 is a paid mutator transaction binding the contract method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _opType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreyTransactor) DepositOrLockERC20(opts *bind.TransactOpts, _opType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "depositOrLockERC20", _opType, _token, _amount, _accountName)
}

// DepositOrLockERC20 is a paid mutator transaction binding the contract method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _opType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreySession) DepositOrLockERC20(_opType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockERC20(&_Zecrey.TransactOpts, _opType, _token, _amount, _accountName)
}

// DepositOrLockERC20 is a paid mutator transaction binding the contract method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _opType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreyTransactorSession) DepositOrLockERC20(_opType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockERC20(&_Zecrey.TransactOpts, _opType, _token, _amount, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the contract method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _opType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreyTransactor) DepositOrLockNativeAsset(opts *bind.TransactOpts, _opType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "depositOrLockNativeAsset", _opType, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the contract method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _opType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreySession) DepositOrLockNativeAsset(_opType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockNativeAsset(&_Zecrey.TransactOpts, _opType, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the contract method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _opType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreyTransactorSession) DepositOrLockNativeAsset(_opType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockNativeAsset(&_Zecrey.TransactOpts, _opType, _accountName)
}

// ExecuteBlocks is a paid mutator transaction binding the contract method 0xa0b94d61.
//
// Solidity: function executeBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks) returns()
func (_Zecrey *ZecreyTransactor) ExecuteBlocks(opts *bind.TransactOpts, _blocks []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "executeBlocks", _blocks)
}

// ExecuteBlocks is a paid mutator transaction binding the contract method 0xa0b94d61.
//
// Solidity: function executeBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks) returns()
func (_Zecrey *ZecreySession) ExecuteBlocks(_blocks []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.ExecuteBlocks(&_Zecrey.TransactOpts, _blocks)
}

// ExecuteBlocks is a paid mutator transaction binding the contract method 0xa0b94d61.
//
// Solidity: function executeBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks) returns()
func (_Zecrey *ZecreyTransactorSession) ExecuteBlocks(_blocks []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.ExecuteBlocks(&_Zecrey.TransactOpts, _blocks)
}

// ForceWithdrawUnhandledBalance is a paid mutator transaction binding the contract method 0x1dd269e3.
//
// Solidity: function forceWithdrawUnhandledBalance(uint16 _assetId) returns()
func (_Zecrey *ZecreyTransactor) ForceWithdrawUnhandledBalance(opts *bind.TransactOpts, _assetId uint16) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "forceWithdrawUnhandledBalance", _assetId)
}

// ForceWithdrawUnhandledBalance is a paid mutator transaction binding the contract method 0x1dd269e3.
//
// Solidity: function forceWithdrawUnhandledBalance(uint16 _assetId) returns()
func (_Zecrey *ZecreySession) ForceWithdrawUnhandledBalance(_assetId uint16) (*types.Transaction, error) {
	return _Zecrey.Contract.ForceWithdrawUnhandledBalance(&_Zecrey.TransactOpts, _assetId)
}

// ForceWithdrawUnhandledBalance is a paid mutator transaction binding the contract method 0x1dd269e3.
//
// Solidity: function forceWithdrawUnhandledBalance(uint16 _assetId) returns()
func (_Zecrey *ZecreyTransactorSession) ForceWithdrawUnhandledBalance(_assetId uint16) (*types.Transaction, error) {
	return _Zecrey.Contract.ForceWithdrawUnhandledBalance(&_Zecrey.TransactOpts, _assetId)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreyTransactor) Initialize(opts *bind.TransactOpts, initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "initialize", initializationParameters)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreySession) Initialize(initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.Contract.Initialize(&_Zecrey.TransactOpts, initializationParameters)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreyTransactorSession) Initialize(initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.Contract.Initialize(&_Zecrey.TransactOpts, initializationParameters)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x75329d6b.
//
// Solidity: function revertBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocksToRevert) returns()
func (_Zecrey *ZecreyTransactor) RevertBlocks(opts *bind.TransactOpts, _blocksToRevert []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "revertBlocks", _blocksToRevert)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x75329d6b.
//
// Solidity: function revertBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocksToRevert) returns()
func (_Zecrey *ZecreySession) RevertBlocks(_blocksToRevert []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.RevertBlocks(&_Zecrey.TransactOpts, _blocksToRevert)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x75329d6b.
//
// Solidity: function revertBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocksToRevert) returns()
func (_Zecrey *ZecreyTransactorSession) RevertBlocks(_blocksToRevert []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.RevertBlocks(&_Zecrey.TransactOpts, _blocksToRevert)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0x419e56af.
//
// Solidity: function verifyBlocks(((uint32,bytes32,bytes32,uint256,bytes32),uint256[],uint256)[] _blocks) returns()
func (_Zecrey *ZecreyTransactor) VerifyBlocks(opts *bind.TransactOpts, _blocks []ZecreyVerifyBlockInfo) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "verifyBlocks", _blocks)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0x419e56af.
//
// Solidity: function verifyBlocks(((uint32,bytes32,bytes32,uint256,bytes32),uint256[],uint256)[] _blocks) returns()
func (_Zecrey *ZecreySession) VerifyBlocks(_blocks []ZecreyVerifyBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.VerifyBlocks(&_Zecrey.TransactOpts, _blocks)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0x419e56af.
//
// Solidity: function verifyBlocks(((uint32,bytes32,bytes32,uint256,bytes32),uint256[],uint256)[] _blocks) returns()
func (_Zecrey *ZecreyTransactorSession) VerifyBlocks(_blocks []ZecreyVerifyBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.VerifyBlocks(&_Zecrey.TransactOpts, _blocks)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreyTransactor) WithdrawPendingBalance(opts *bind.TransactOpts, _owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "withdrawPendingBalance", _owner, _token, _amount)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreySession) WithdrawPendingBalance(_owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.WithdrawPendingBalance(&_Zecrey.TransactOpts, _owner, _token, _amount)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreyTransactorSession) WithdrawPendingBalance(_owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.WithdrawPendingBalance(&_Zecrey.TransactOpts, _owner, _token, _amount)
}

// ZecreyBlockCommitIterator is returned from FilterBlockCommit and is used to iterate over the raw logs and unpacked data for BlockCommit events raised by the Zecrey contract.
type ZecreyBlockCommitIterator struct {
	Event *ZecreyBlockCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockCommit represents a BlockCommit event raised by the Zecrey contract.
type ZecreyBlockCommit struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockCommit is a free log retrieval operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockCommit(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockCommitIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockCommit", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockCommitIterator{contract: _Zecrey.contract, event: "BlockCommit", logs: logs, sub: sub}, nil
}

// WatchBlockCommit is a free log subscription operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockCommit(opts *bind.WatchOpts, sink chan<- *ZecreyBlockCommit, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockCommit", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockCommit)
				if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockCommit is a log parse operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockCommit(log types.Log) (*ZecreyBlockCommit, error) {
	event := new(ZecreyBlockCommit)
	if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlockExecutionIterator is returned from FilterBlockExecution and is used to iterate over the raw logs and unpacked data for BlockExecution events raised by the Zecrey contract.
type ZecreyBlockExecutionIterator struct {
	Event *ZecreyBlockExecution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockExecutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockExecution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockExecution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockExecutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockExecutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockExecution represents a BlockExecution event raised by the Zecrey contract.
type ZecreyBlockExecution struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockExecution is a free log retrieval operation binding the contract event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockExecution(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockExecutionIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockExecution", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockExecutionIterator{contract: _Zecrey.contract, event: "BlockExecution", logs: logs, sub: sub}, nil
}

// WatchBlockExecution is a free log subscription operation binding the contract event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockExecution(opts *bind.WatchOpts, sink chan<- *ZecreyBlockExecution, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockExecution", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockExecution)
				if err := _Zecrey.contract.UnpackLog(event, "BlockExecution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockExecution is a log parse operation binding the contract event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockExecution(log types.Log) (*ZecreyBlockExecution, error) {
	event := new(ZecreyBlockExecution)
	if err := _Zecrey.contract.UnpackLog(event, "BlockExecution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlockVerificationIterator is returned from FilterBlockVerification and is used to iterate over the raw logs and unpacked data for BlockVerification events raised by the Zecrey contract.
type ZecreyBlockVerificationIterator struct {
	Event *ZecreyBlockVerification // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockVerificationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockVerification)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockVerification)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockVerificationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockVerificationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockVerification represents a BlockVerification event raised by the Zecrey contract.
type ZecreyBlockVerification struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockVerification is a free log retrieval operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockVerification(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockVerificationIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockVerification", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockVerificationIterator{contract: _Zecrey.contract, event: "BlockVerification", logs: logs, sub: sub}, nil
}

// WatchBlockVerification is a free log subscription operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockVerification(opts *bind.WatchOpts, sink chan<- *ZecreyBlockVerification, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockVerification", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockVerification)
				if err := _Zecrey.contract.UnpackLog(event, "BlockVerification", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockVerification is a log parse operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockVerification(log types.Log) (*ZecreyBlockVerification, error) {
	event := new(ZecreyBlockVerification)
	if err := _Zecrey.contract.UnpackLog(event, "BlockVerification", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlocksRevertIterator is returned from FilterBlocksRevert and is used to iterate over the raw logs and unpacked data for BlocksRevert events raised by the Zecrey contract.
type ZecreyBlocksRevertIterator struct {
	Event *ZecreyBlocksRevert // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlocksRevertIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlocksRevert)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlocksRevert)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlocksRevertIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlocksRevertIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlocksRevert represents a BlocksRevert event raised by the Zecrey contract.
type ZecreyBlocksRevert struct {
	TotalBlocksVerified  uint32
	TotalBlocksCommitted uint32
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterBlocksRevert is a free log retrieval operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) FilterBlocksRevert(opts *bind.FilterOpts) (*ZecreyBlocksRevertIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlocksRevert")
	if err != nil {
		return nil, err
	}
	return &ZecreyBlocksRevertIterator{contract: _Zecrey.contract, event: "BlocksRevert", logs: logs, sub: sub}, nil
}

// WatchBlocksRevert is a free log subscription operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) WatchBlocksRevert(opts *bind.WatchOpts, sink chan<- *ZecreyBlocksRevert) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlocksRevert")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlocksRevert)
				if err := _Zecrey.contract.UnpackLog(event, "BlocksRevert", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlocksRevert is a log parse operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) ParseBlocksRevert(log types.Log) (*ZecreyBlocksRevert, error) {
	event := new(ZecreyBlocksRevert)
	if err := _Zecrey.contract.UnpackLog(event, "BlocksRevert", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositCommitIterator is returned from FilterDepositCommit and is used to iterate over the raw logs and unpacked data for DepositCommit events raised by the Zecrey contract.
type ZecreyDepositCommitIterator struct {
	Event *ZecreyDepositCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDepositCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDepositCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDepositCommit represents a DepositCommit event raised by the Zecrey contract.
type ZecreyDepositCommit struct {
	ZecreyBlockNumber uint32
	AccountIndex      uint32
	AccountName       [32]byte
	AssetId           uint16
	Amount            *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterDepositCommit is a free log retrieval operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterDepositCommit(opts *bind.FilterOpts, zecreyBlockNumber []uint32, accountIndex []uint32, assetId []uint16) (*ZecreyDepositCommitIterator, error) {

	var zecreyBlockNumberRule []interface{}
	for _, zecreyBlockNumberItem := range zecreyBlockNumber {
		zecreyBlockNumberRule = append(zecreyBlockNumberRule, zecreyBlockNumberItem)
	}
	var accountIndexRule []interface{}
	for _, accountIndexItem := range accountIndex {
		accountIndexRule = append(accountIndexRule, accountIndexItem)
	}

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "DepositCommit", zecreyBlockNumberRule, accountIndexRule, assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositCommitIterator{contract: _Zecrey.contract, event: "DepositCommit", logs: logs, sub: sub}, nil
}

// WatchDepositCommit is a free log subscription operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchDepositCommit(opts *bind.WatchOpts, sink chan<- *ZecreyDepositCommit, zecreyBlockNumber []uint32, accountIndex []uint32, assetId []uint16) (event.Subscription, error) {

	var zecreyBlockNumberRule []interface{}
	for _, zecreyBlockNumberItem := range zecreyBlockNumber {
		zecreyBlockNumberRule = append(zecreyBlockNumberRule, zecreyBlockNumberItem)
	}
	var accountIndexRule []interface{}
	for _, accountIndexItem := range accountIndex {
		accountIndexRule = append(accountIndexRule, accountIndexItem)
	}

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "DepositCommit", zecreyBlockNumberRule, accountIndexRule, assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDepositCommit)
				if err := _Zecrey.contract.UnpackLog(event, "DepositCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositCommit is a log parse operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseDepositCommit(log types.Log) (*ZecreyDepositCommit, error) {
	event := new(ZecreyDepositCommit)
	if err := _Zecrey.contract.UnpackLog(event, "DepositCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositOrLockIterator is returned from FilterDepositOrLock and is used to iterate over the raw logs and unpacked data for DepositOrLock events raised by the Zecrey contract.
type ZecreyDepositOrLockIterator struct {
	Event *ZecreyDepositOrLock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositOrLockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDepositOrLock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDepositOrLock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositOrLockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositOrLockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDepositOrLock represents a DepositOrLock event raised by the Zecrey contract.
type ZecreyDepositOrLock struct {
	OpType      uint8
	AssetId     uint16
	AccountName [32]byte
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDepositOrLock is a free log retrieval operation binding the contract event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 indexed assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterDepositOrLock(opts *bind.FilterOpts, assetId []uint16) (*ZecreyDepositOrLockIterator, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "DepositOrLock", assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositOrLockIterator{contract: _Zecrey.contract, event: "DepositOrLock", logs: logs, sub: sub}, nil
}

// WatchDepositOrLock is a free log subscription operation binding the contract event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 indexed assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchDepositOrLock(opts *bind.WatchOpts, sink chan<- *ZecreyDepositOrLock, assetId []uint16) (event.Subscription, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "DepositOrLock", assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDepositOrLock)
				if err := _Zecrey.contract.UnpackLog(event, "DepositOrLock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositOrLock is a log parse operation binding the contract event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 indexed assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseDepositOrLock(log types.Log) (*ZecreyDepositOrLock, error) {
	event := new(ZecreyDepositOrLock)
	if err := _Zecrey.contract.UnpackLog(event, "DepositOrLock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyExodusModeIterator is returned from FilterExodusMode and is used to iterate over the raw logs and unpacked data for ExodusMode events raised by the Zecrey contract.
type ZecreyExodusModeIterator struct {
	Event *ZecreyExodusMode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyExodusModeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyExodusMode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyExodusMode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyExodusModeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyExodusModeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyExodusMode represents a ExodusMode event raised by the Zecrey contract.
type ZecreyExodusMode struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterExodusMode is a free log retrieval operation binding the contract event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) FilterExodusMode(opts *bind.FilterOpts) (*ZecreyExodusModeIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "ExodusMode")
	if err != nil {
		return nil, err
	}
	return &ZecreyExodusModeIterator{contract: _Zecrey.contract, event: "ExodusMode", logs: logs, sub: sub}, nil
}

// WatchExodusMode is a free log subscription operation binding the contract event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) WatchExodusMode(opts *bind.WatchOpts, sink chan<- *ZecreyExodusMode) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "ExodusMode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyExodusMode)
				if err := _Zecrey.contract.UnpackLog(event, "ExodusMode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExodusMode is a log parse operation binding the contract event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) ParseExodusMode(log types.Log) (*ZecreyExodusMode, error) {
	event := new(ZecreyExodusMode)
	if err := _Zecrey.contract.UnpackLog(event, "ExodusMode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyFullExitCommitIterator is returned from FilterFullExitCommit and is used to iterate over the raw logs and unpacked data for FullExitCommit events raised by the Zecrey contract.
type ZecreyFullExitCommitIterator struct {
	Event *ZecreyFullExitCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyFullExitCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyFullExitCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyFullExitCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyFullExitCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyFullExitCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyFullExitCommit represents a FullExitCommit event raised by the Zecrey contract.
type ZecreyFullExitCommit struct {
	ZecreyBlockId uint32
	AccountId     uint32
	Owner         common.Address
	TokenId       uint16
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterFullExitCommit is a free log retrieval operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterFullExitCommit(opts *bind.FilterOpts, zecreyBlockId []uint32, accountId []uint32, tokenId []uint16) (*ZecreyFullExitCommitIterator, error) {

	var zecreyBlockIdRule []interface{}
	for _, zecreyBlockIdItem := range zecreyBlockId {
		zecreyBlockIdRule = append(zecreyBlockIdRule, zecreyBlockIdItem)
	}
	var accountIdRule []interface{}
	for _, accountIdItem := range accountId {
		accountIdRule = append(accountIdRule, accountIdItem)
	}

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "FullExitCommit", zecreyBlockIdRule, accountIdRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyFullExitCommitIterator{contract: _Zecrey.contract, event: "FullExitCommit", logs: logs, sub: sub}, nil
}

// WatchFullExitCommit is a free log subscription operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchFullExitCommit(opts *bind.WatchOpts, sink chan<- *ZecreyFullExitCommit, zecreyBlockId []uint32, accountId []uint32, tokenId []uint16) (event.Subscription, error) {

	var zecreyBlockIdRule []interface{}
	for _, zecreyBlockIdItem := range zecreyBlockId {
		zecreyBlockIdRule = append(zecreyBlockIdRule, zecreyBlockIdItem)
	}
	var accountIdRule []interface{}
	for _, accountIdItem := range accountId {
		accountIdRule = append(accountIdRule, accountIdItem)
	}

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "FullExitCommit", zecreyBlockIdRule, accountIdRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyFullExitCommit)
				if err := _Zecrey.contract.UnpackLog(event, "FullExitCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFullExitCommit is a log parse operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseFullExitCommit(log types.Log) (*ZecreyFullExitCommit, error) {
	event := new(ZecreyFullExitCommit)
	if err := _Zecrey.contract.UnpackLog(event, "FullExitCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyNewPriorityRequestIterator is returned from FilterNewPriorityRequest and is used to iterate over the raw logs and unpacked data for NewPriorityRequest events raised by the Zecrey contract.
type ZecreyNewPriorityRequestIterator struct {
	Event *ZecreyNewPriorityRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyNewPriorityRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyNewPriorityRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyNewPriorityRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyNewPriorityRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyNewPriorityRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyNewPriorityRequest represents a NewPriorityRequest event raised by the Zecrey contract.
type ZecreyNewPriorityRequest struct {
	Sender          common.Address
	SerialId        uint64
	OpType          uint8
	PubData         []byte
	ExpirationBlock *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNewPriorityRequest is a free log retrieval operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 opType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) FilterNewPriorityRequest(opts *bind.FilterOpts) (*ZecreyNewPriorityRequestIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "NewPriorityRequest")
	if err != nil {
		return nil, err
	}
	return &ZecreyNewPriorityRequestIterator{contract: _Zecrey.contract, event: "NewPriorityRequest", logs: logs, sub: sub}, nil
}

// WatchNewPriorityRequest is a free log subscription operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 opType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) WatchNewPriorityRequest(opts *bind.WatchOpts, sink chan<- *ZecreyNewPriorityRequest) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "NewPriorityRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyNewPriorityRequest)
				if err := _Zecrey.contract.UnpackLog(event, "NewPriorityRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewPriorityRequest is a log parse operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 opType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) ParseNewPriorityRequest(log types.Log) (*ZecreyNewPriorityRequest, error) {
	event := new(ZecreyNewPriorityRequest)
	if err := _Zecrey.contract.UnpackLog(event, "NewPriorityRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyNoticePeriodChangeIterator is returned from FilterNoticePeriodChange and is used to iterate over the raw logs and unpacked data for NoticePeriodChange events raised by the Zecrey contract.
type ZecreyNoticePeriodChangeIterator struct {
	Event *ZecreyNoticePeriodChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyNoticePeriodChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyNoticePeriodChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyNoticePeriodChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyNoticePeriodChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyNoticePeriodChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyNoticePeriodChange represents a NoticePeriodChange event raised by the Zecrey contract.
type ZecreyNoticePeriodChange struct {
	NewNoticePeriod *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNoticePeriodChange is a free log retrieval operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) FilterNoticePeriodChange(opts *bind.FilterOpts) (*ZecreyNoticePeriodChangeIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "NoticePeriodChange")
	if err != nil {
		return nil, err
	}
	return &ZecreyNoticePeriodChangeIterator{contract: _Zecrey.contract, event: "NoticePeriodChange", logs: logs, sub: sub}, nil
}

// WatchNoticePeriodChange is a free log subscription operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) WatchNoticePeriodChange(opts *bind.WatchOpts, sink chan<- *ZecreyNoticePeriodChange) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "NoticePeriodChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyNoticePeriodChange)
				if err := _Zecrey.contract.UnpackLog(event, "NoticePeriodChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNoticePeriodChange is a log parse operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) ParseNoticePeriodChange(log types.Log) (*ZecreyNoticePeriodChange, error) {
	event := new(ZecreyNoticePeriodChange)
	if err := _Zecrey.contract.UnpackLog(event, "NoticePeriodChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the Zecrey contract.
type ZecreyWithdrawalIterator struct {
	Event *ZecreyWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdrawal represents a Withdrawal event raised by the Zecrey contract.
type ZecreyWithdrawal struct {
	AssetId uint16
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterWithdrawal(opts *bind.FilterOpts, assetId []uint16) (*ZecreyWithdrawalIterator, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Withdrawal", assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawalIterator{contract: _Zecrey.contract, event: "Withdrawal", logs: logs, sub: sub}, nil
}

// WatchWithdrawal is a free log subscription operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *ZecreyWithdrawal, assetId []uint16) (event.Subscription, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Withdrawal", assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdrawal)
				if err := _Zecrey.contract.UnpackLog(event, "Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawal is a log parse operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseWithdrawal(log types.Log) (*ZecreyWithdrawal, error) {
	event := new(ZecreyWithdrawal)
	if err := _Zecrey.contract.UnpackLog(event, "Withdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawalPendingIterator is returned from FilterWithdrawalPending and is used to iterate over the raw logs and unpacked data for WithdrawalPending events raised by the Zecrey contract.
type ZecreyWithdrawalPendingIterator struct {
	Event *ZecreyWithdrawalPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawalPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdrawalPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdrawalPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawalPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawalPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdrawalPending represents a WithdrawalPending event raised by the Zecrey contract.
type ZecreyWithdrawalPending struct {
	AssetId uint16
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalPending is a free log retrieval operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterWithdrawalPending(opts *bind.FilterOpts, assetId []uint16) (*ZecreyWithdrawalPendingIterator, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "WithdrawalPending", assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawalPendingIterator{contract: _Zecrey.contract, event: "WithdrawalPending", logs: logs, sub: sub}, nil
}

// WatchWithdrawalPending is a free log subscription operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchWithdrawalPending(opts *bind.WatchOpts, sink chan<- *ZecreyWithdrawalPending, assetId []uint16) (event.Subscription, error) {

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "WithdrawalPending", assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdrawalPending)
				if err := _Zecrey.contract.UnpackLog(event, "WithdrawalPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalPending is a log parse operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseWithdrawalPending(log types.Log) (*ZecreyWithdrawalPending, error) {
	event := new(ZecreyWithdrawalPending)
	if err := _Zecrey.contract.UnpackLog(event, "WithdrawalPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
