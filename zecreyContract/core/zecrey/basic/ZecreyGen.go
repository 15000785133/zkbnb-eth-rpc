// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package basic

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StorageBlockHeader is an auto generated low-level Go binding around an user-defined struct.
type StorageBlockHeader struct {
	BlockNumber    uint32
	OnchainOpsRoot [32]byte
	AccountRoot    [32]byte
	Timestamp      *big.Int
	Commitment     [32]byte
}

// ZecreyCommitBlockInfo is an auto generated low-level Go binding around an user-defined struct.
type ZecreyCommitBlockInfo struct {
	BlockNumber           uint32
	OnchainOpsRoot        [32]byte
	NewAccountRoot        [32]byte
	Timestamp             *big.Int
	Commitment            [32]byte
	OnchainOpsPubData     []byte
	OnchainOpsCount       uint16
	OnchainOpsMerkleProof [6][32]byte
	PubData               []byte
}

// ZecreyABI is the input ABI used to generate the binding from.
const ZecreyABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockVerification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksVerified\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksCommitted\",\"type\":\"uint32\"}],\"name\":\"BlocksRevert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zecreyBlockNumber\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"DepositCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"opType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"DepositOrLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExodusMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zecreyBlockId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"FullExitCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"serialId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enumTxTypes.TxType\",\"name\":\"txType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"name\":\"NewPriorityRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNoticePeriod\",\"type\":\"uint256\"}],\"name\":\"NoticePeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"WithdrawalPending\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_onchainOpsMerkleHelper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxAmount\",\"type\":\"uint128\"}],\"name\":\"_transferERC20\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"blockOnchainOpsPubData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader\",\"name\":\"_lastCommittedBlockData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newAccountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"onchainOpsPubData\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"onchainOpsCount\",\"type\":\"uint16\"},{\"internalType\":\"bytes32[6]\",\"name\":\"onchainOpsMerkleProof\",\"type\":\"bytes32[6]\"},{\"internalType\":\"bytes\",\"name\":\"pubData\",\"type\":\"bytes\"}],\"internalType\":\"structZecrey.CommitBlockInfo[]\",\"name\":\"_newBlocksData\",\"type\":\"tuple[]\"}],\"name\":\"commitBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_onchainOpsPubData\",\"type\":\"bytes\"}],\"name\":\"computeOnchainOpsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"onchainOpsDataHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_opType\",\"type\":\"uint8\"},{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint104\",\"name\":\"_amount\",\"type\":\"uint104\"},{\"internalType\":\"bytes32\",\"name\":\"_accountName\",\"type\":\"bytes32\"}],\"name\":\"depositOrLockERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_opType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_accountName\",\"type\":\"bytes32\"}],\"name\":\"depositOrLockNativeAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"}],\"name\":\"executeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstPriorityRequestId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_assetId\",\"type\":\"uint16\"}],\"name\":\"forceWithdrawUnhandledBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetAddr\",\"type\":\"address\"}],\"name\":\"getPendingBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializationParameters\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"onchainOpsCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"onchainOpsExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newAccountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"onchainOpsPubData\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"onchainOpsCount\",\"type\":\"uint16\"},{\"internalType\":\"bytes32[6]\",\"name\":\"onchainOpsMerkleProof\",\"type\":\"bytes32[6]\"},{\"internalType\":\"bytes\",\"name\":\"pubData\",\"type\":\"bytes\"}],\"internalType\":\"structZecrey.CommitBlockInfo[]\",\"name\":\"_blocksToRevert\",\"type\":\"tuple[]\"}],\"name\":\"revertBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"storedBlockHeaderHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksCommitted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksExecuted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksVerified\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOpenPriorityRequests\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unhandledBalances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"unhandledBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainOpsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_proofs\",\"type\":\"uint256[]\"}],\"name\":\"verifyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"withdrawPendingBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ZecreyBin is the compiled bytecode used for deploying new contracts.
var ZecreyBin = "0x608060405234801561001057600080fd5b50614303806100206000396000f3fe60806040526004361061014b5760003560e01c80638c8ebc52116100b6578063c57b22be1161006f578063c57b22be146103ae578063d514da50146103c3578063e1d730d9146103e3578063eface7e214610411578063f22354871461043e578063faf4d8cb146104535761014b565b80638c8ebc52146102f95780638ee1a74e146103195780639b9e91b614610339578063a0b94d6114610359578063a7ccec2f14610379578063ba3d274a1461038e5761014b565b80634167d002116101085780634167d0021461021d578063439fab911461024a5780635aca41f61461026a578063615f1e351461029757806367708dae146102b75780638b4f7de9146102d95761014b565b80630222740e146101505780631678b35e146101865780631dd269e31461019b5780631e15f3e0146101bb57806327874c77146101db5780632d24006c146101fb575b600080fd5b34801561015c57600080fd5b5061017061016b36600461399d565b610468565b60405161017d9190613d9c565b60405180910390f35b610199610194366004613be1565b61047d565b005b3480156101a757600080fd5b506101996101b6366004613b3e565b610570565b3480156101c757600080fd5b506101996101d6366004613c0c565b6106cd565b3480156101e757600080fd5b506101996101f6366004613897565b610aab565b34801561020757600080fd5b50610210610da4565b60405161017d9190614163565b34801561022957600080fd5b5061023d610238366004613bab565b610db8565b60405161017d9190613da7565b34801561025657600080fd5b506101996102653660046139dd565b610dca565b34801561027657600080fd5b5061028a61028536600461382d565b610f22565b60405161017d919061410a565b3480156102a357600080fd5b506101996102b236600461394f565b610ff1565b3480156102c357600080fd5b506102cc6111cb565b60405161017d919061418b565b3480156102e557600080fd5b506101706102f436600461399d565b6111e1565b34801561030557600080fd5b5061023d610314366004613a49565b6111f6565b34801561032557600080fd5b5061028a610334366004613a7b565b611250565b34801561034557600080fd5b50610170610354366004613b93565b6113ef565b34801561036557600080fd5b50610199610374366004613865565b611419565b34801561038557600080fd5b5061023d6115a3565b34801561039a57600080fd5b506101996103a9366004613ad6565b6115a9565b3480156103ba57600080fd5b506102cc611720565b3480156103cf57600080fd5b506101996103de3660046137e3565b611736565b3480156103ef57600080fd5b506104036103fe366004613b76565b6119de565b60405161017d92919061411e565b34801561041d57600080fd5b5061043161042c366004613bab565b611a0e565b60405161017d9190613db0565b34801561044a57600080fd5b50610210611aa9565b34801561045f57600080fd5b50610210611abc565b60096020526000908152604090205460ff1681565b60ff8216158061049057508160ff166001145b6104b55760405162461bcd60e51b81526004016104ac90614013565b60405180910390fd5b346104d25760405162461bcd60e51b81526004016104ac90613ed6565b61056c82600360009054906101000a90046001600160a01b03166001600160a01b0316637af87d196040518163ffffffff1660e01b815260040160206040518083038186803b15801561052457600080fd5b505afa158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c9190613b5a565b3361056634611ac8565b85611b0b565b5050565b61ffff81166000908152600560209081526040808320338452825291829020825180840190935280546001600160801b0316808452600190910154918301919091526105ce5760405162461bcd60e51b81526004016104ac90613e68565b600360009054906101000a90046001600160a01b03166001600160a01b0316634c1b5afb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561061c57600080fd5b505afa158015610630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106549190613b5a565b61ffff1661066f826020015143611cf690919063ffffffff16565b1161068c5760405162461bcd60e51b81526004016104ac90613efe565b61069b82338360000151611d23565b5061ffff166000908152600560209081526040808320338452909152812080546001600160801b031916815560010155565b6000805160206142ae83398151915254600181146106ea57600080fd5b60026000805160206142ae8339815191525560ff8516158061070f57508460ff166001145b61072b5760405162461bcd60e51b81526004016104ac90614013565b6001600160681b0383166107515760405162461bcd60e51b81526004016104ac90613ed6565b600254604051639bd7760960e01b81526000916001600160a01b031690639bd7760990610782908890600401613d52565b60206040518083038186803b15801561079a57600080fd5b505afa1580156107ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d29190613b5a565b6002546040516331d8687b60e01b81529192506001600160a01b0316906331d8687b90610803908490600401614137565b60206040518083038186803b15801561081b57600080fd5b505afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108539190613981565b156108705760405162461bcd60e51b81526004016104ac90613ff8565b6040516370a0823160e01b81526000906001600160a01b038716906370a082319061089f903090600401613d52565b60206040518083038186803b1580156108b757600080fd5b505afa1580156108cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ef91906139c5565b9050610917863330610909896001600160681b0316611ac8565b6001600160801b0316611ffc565b6109335760405162461bcd60e51b81526004016104ac90613e4d565b6040516370a0823160e01b81526000906001600160a01b038816906370a0823190610962903090600401613d52565b60206040518083038186803b15801561097a57600080fd5b505afa15801561098e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b291906139c5565b905060006109c86109c38385611cf6565b611ac8565b9050600360009054906101000a90046001600160a01b03166001600160a01b0316634c34a9826040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1857600080fd5b505afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190613b22565b6001600160801b0316816001600160801b03161115610a815760405162461bcd60e51b81526004016104ac90613e17565b610a8e898533848a611b0b565b5050505060016000805160206142ae833981519152555050505050565b6000805160206142ae8339815191525460018114610ac857600080fd5b60026000805160206142ae83398151915281905554604051631e8d167560e21b81526001600160a01b0390911690637a3459d490610b0a903390600401613d52565b60006040518083038186803b158015610b2257600080fd5b505afa158015610b36573d6000803e3d6000fd5b50505050600083516003026001600160401b0381118015610b5657600080fd5b50604051908082528060200260200182016040528015610b80578160200160208202803683370190505b50905060005b84518161ffff161015610c9d57610bb8858261ffff1681518110610ba657fe5b60200260200101518261ffff16612128565b6009828260030261ffff1681518110610bcd57fe5b6020026020010181815250506009828260030260010161ffff1681518110610bf157fe5b6020026020010181815250506009828260030260020161ffff1681518110610c1557fe5b602002602001018181525050848161ffff1681518110610c3157fe5b6020026020010151604001516000819055507f0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413858261ffff1681518110610c7457fe5b602002602001015160000151604051610c8d9190614163565b60405180910390a1600101610b86565b50600154845160405163c50e826360e01b81526000926001600160a01b03169163c50e826391610cd4918891879190600401613d66565b60206040518083038186803b158015610cec57600080fd5b505afa158015610d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d249190613981565b905080610d435760405162461bcd60e51b81526004016104ac90614052565b610d6b610d508651612165565b60065463ffffffff640100000000909104811691906121a516565b600660046101000a81548163ffffffff021916908363ffffffff160217905550505060016000805160206142ae83398151915255505050565b600654640100000000900463ffffffff1681565b60086020526000908152604090205481565b610dd26121ed565b60008080808080808080610de88a8c018c6136fc565b98509850985098509850985098509850985088600360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600260006101000a8154816001600160a01b0302191690836001600160a01b031602179055508360008190555080600c906005610e87929190613221565b506006805463ffffffff191663ffffffff881690811767ffffffff0000000019166401000000008202176bffffffff00000000000000001916600160401b8202179091556040805160a0810182529182526020820187905281018590526060810184905260808101839052610efb8161223e565b63ffffffff9097166000908152600860205260409020969096555050505050505050505050565b6000806001600160a01b03831615610fb757600254604051639bd7760960e01b81526001600160a01b0390911690639bd7760990610f64908690600401613d52565b60206040518083038186803b158015610f7c57600080fd5b505afa158015610f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb49190613b5a565b90505b60046000610fc5868461226e565b6001600160501b03191681526020810191909152604001600020546001600160801b0316949350505050565b600254604051630e010cab60e11b81526001600160a01b0390911690631c02195690611021903390600401613d52565b60006040518083038186803b15801561103957600080fd5b505afa15801561104d573d6000803e3d6000fd5b5050600654835163ffffffff80831694506000935061107592600160401b900416840361228b565b905060005b8163ffffffff168163ffffffff161015611158576000848263ffffffff16815181106110a257fe5b6020908102919091010151600654815191925063ffffffff600160401b90910481169116106110e35760405162461bcd60e51b81526004016104ac90613fce565b600654815163ffffffff90811691811684900316146111145760405162461bcd60e51b81526004016104ac90613f3d565b61111d816122ad565b63ffffffff84166000908152600860209081526040808320839055600b9091528120611148916132af565b506000199092019160010161107a565b506006805463ffffffff191663ffffffff84811691821767ffffffff0000000019166401000000009290920291909117918290556040517f6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3926111be9216908590614174565b60405180910390a1505050565b600654600160601b90046001600160401b031681565b600a6020526000908152604090205460ff1681565b60006002826040516112089190613ca1565b602060405180830381855afa158015611225573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061124891906139c5565b90505b919050565b60003330146112715760405162461bcd60e51b81526004016104ac90614037565b6040516370a0823160e01b81526000906001600160a01b038716906370a08231906112a0903090600401613d52565b60206040518083038186803b1580156112b857600080fd5b505afa1580156112cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f091906139c5565b90506113068686866001600160801b0316612529565b6113225760405162461bcd60e51b81526004016104ac90614079565b6040516370a0823160e01b81526000906001600160a01b038816906370a0823190611351903090600401613d52565b60206040518083038186803b15801561136957600080fd5b505afa15801561137d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a191906139c5565b905060006113af8383611cf6565b9050846001600160801b03168111156113da5760405162461bcd60e51b81526004016104ac90613f22565b6113e381611ac8565b98975050505050505050565b600c81600581106113ff57600080fd5b60209182820401919006915054906101000a900460ff1681565b6000805160206142ae833981519152546001811461143657600080fd5b60026000805160206142ae83398151915281905554604051636810f99560e11b81526001600160a01b039091169063d021f32a90611478903390600401613d52565b60006040518083038186803b15801561149057600080fd5b505afa1580156114a4573d6000803e3d6000fd5b5050835161ffff169150600090505b8163ffffffff168161ffff161015611544576114ea848261ffff16815181106114d857fe5b60200260200101518261ffff1661264f565b7f24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb848261ffff168151811061151b57fe5b6020026020010151600001516040516115349190614163565b60405180910390a16001016114b3565b5061156c6115528451612165565b60065463ffffffff600160401b909104811691906121a516565b600660086101000a81548163ffffffff021916908363ffffffff1602179055505060016000805160206142ae833981519152555050565b60005481565b6000805160206142ae83398151915254600181146115c657600080fd5b60026000805160206142ae83398151915281905554604051635147001960e11b81526001600160a01b039091169063a28e003290611608903390600401613d52565b60006040518083038186803b15801561162057600080fd5b505afa158015611634573d6000803e3d6000fd5b5050505060005b82518163ffffffff1610156116d35761166d84848363ffffffff168151811061166057fe5b6020026020010151612820565b93506116788461223e565b845163ffffffff166000908152600860205260409081902091909155845190517f81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424916116c391614163565b60405180910390a160010161163b565b50816001835103815181106116e457fe5b6020908102919091010151516006805463ffffffff191663ffffffff909216919091179055505060016000805160206142ae8339815191525550565b600654600160a01b90046001600160401b031681565b6000805160206142ae833981519152546001811461175357600080fd5b60026000805160206142ae833981519152556001600160a01b0383166118835760035460408051637af87d1960e01b815290516117f8926001600160a01b031691637af87d19916004808301926020929190829003018186803b1580156117b957600080fd5b505afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f19190613b5a565b838661287a565b6000846001600160a01b0316836001600160801b031660405161181a90613cec565b60006040518083038185875af1925050503d8060008114611857576040519150601f19603f3d011682016040523d82523d6000602084013e61185c565b606091505b505090508061187d5760405162461bcd60e51b81526004016104ac906140af565b506119c6565b600254604051639bd7760960e01b81526000916001600160a01b031690639bd77609906118b4908790600401613d52565b60206040518083038186803b1580156118cc57600080fd5b505afa1580156118e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119049190613b5a565b90506000611912868361226e565b6001600160501b031981166000908152600460208190526040808320549051634770d3a760e11b81529394506001600160801b0316923091638ee1a74e91611962918b918d918c91899101613de3565b602060405180830381600087803b15801561197c57600080fd5b505af1158015611990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b49190613b22565b90506119c184828a61287a565b505050505b60016000805160206142ae8339815191525550505050565b6005602090815260009283526040808420909152908252902080546001909101546001600160801b039091169082565b600b6020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015611aa15780601f10611a7657610100808354040283529160200191611aa1565b820191906000526020600020905b815481529060010190602001808311611a8457829003601f168201915b505050505081565b600654600160401b900463ffffffff1681565b60065463ffffffff1681565b6000600160801b8210611b07576040805162461bcd60e51b8152602060048201526002602482015261189b60f11b604482015290519081900360640190fd5b5090565b6040805160c08101825260ff87168152600354825163085e1f4d60e41b815292516000936020808501936001600160a01b0316926385e1f4d0926004808201939291829003018186803b158015611b6157600080fd5b505afa158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b999190613bc5565b60ff16815261ffff871660208201526001600160a01b03861660408201526001600160801b038516606082015260800183905290506000611bd982612920565b90506000611be68261296b565b6001600160601b031981166000908152600960209081526040808320805460ff1916600117905561ffff8b168352600582528083206001600160a01b038b1684528252918290208251808401909352546001600160801b0316808352439183019190915291925090611c589087612979565b6001600160801b03908116825261ffff891660009081526005602090815260408083206001600160a01b038c168452825291829020845181546001600160801b0319169416939093178355830151600190920191909155517f962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b90611ce3908b908b9089908b9061419f565b60405180910390a1505050505050505050565b6000611d1c8383604051806040016040528060018152602001603b60f91b8152506129c4565b9392505050565b6000611d2f838561226e565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316637af87d196040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8157600080fd5b505afa158015611d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db99190613b5a565b61ffff168561ffff161415611de45783611ddc816001600160801b038616612a5b565b915050611f6d565b60025460405163dbfc296760e01b81526000916001600160a01b03169063dbfc296790611e15908990600401614137565b60206040518083038186803b158015611e2d57600080fd5b505afa158015611e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6591906136e0565b6003546040805163c701f95560e01b815290519293503092638ee1a74e926001600160a01b03169163c701f955916004808301926020929190829003018186803b158015611eb257600080fd5b505afa158015611ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eea91906139c5565b838888896040518663ffffffff1660e01b8152600401611f0d9493929190613de3565b602060405180830381600088803b158015611f2757600080fd5b5087f193505050508015611f58575060408051601f3d908101601f19168201909252611f5591810190613b22565b60015b611f655760009150611f6b565b50600191505b505b8015611fb1577ff4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a807939331548584604051611fa4929190614146565b60405180910390a1611ff5565b611fbb8284612b49565b7fd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c16888584604051611fec929190614146565b60405180910390a15b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094859485948b16939092909182918083835b602083106120825780518252601f199092019160209182019101612063565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146120e4576040519150601f19603f3d011682016040523d82523d6000602084013e6120e9565b606091505b50915091506000815160001480612113575081806020019051602081101561211057600080fd5b50515b90508280156113e35750979650505050505050565b815163ffffffff166000908152600860205260409020546121488361223e565b1461056c5760405162461bcd60e51b81526004016104ac90613f67565b60006401000000008210611b07576040805162461bcd60e51b8152602060048201526002602482015261062760f31b604482015290519081900360640190fd5b600082820163ffffffff8085169082161015611d1c576040805162461bcd60e51b8152602060048201526002602482015261189960f11b604482015290519081900360640190fd5b6000805160206142ae83398151915280546001909155801561223b576040805162461bcd60e51b815260206004820152600260248201526118a160f11b604482015290519081900360640190fd5b50565b60008160405160200161225191906140ca565b604051602081830303815290604052805190602001209050919050565b60a01b61ffff60a01b166001600160a01b03919091161760501b90565b60008163ffffffff168363ffffffff16106122a65781611d1c565b5090919050565b60a08101516000805b8360c0015161ffff168161ffff1610156125045760008383815181106122d857fe5b016020015160f81c60088111156122eb57fe5b905060018160088111156122fb57fe5b141561249b57600061230f85856048612be7565b9050600061231c8261296b565b6001600160601b0319811660009081526009602052604090205490915060ff16151560011461235d5760405162461bcd60e51b81526004016104ac90613e92565b6001600160601b031981166000908152600a602052604090205460ff16151560011461239b5760405162461bcd60e51b81526004016104ac90613fa1565b6001600160601b031981166000908152600a60205260408120805460ff191690556123c583612ca3565b60408082015161ffff1660009081526005602090815282822060608501516001600160a01b03168352815290829020825180840190935280546001600160801b0316808452600190910154918301919091526080830151929350909161242b9190612979565b6001600160801b03908116825260408381015161ffff1660009081526005602090815282822060608701516001600160a01b031683528152919020835181546001600160801b0319169316929092178255820151600190910155612490876048612d41565b9650505050506124fb565b60028160088111156124a957fe5b14156124bd57600061230f85856048612be7565b60088160088111156124cb57fe5b14156124e3576124dc83602c612d41565b92506124fb565b60405162461bcd60e51b81526004016104ac90614094565b506001016122b6565b50825163ffffffff166000908152600b60205260408120612524916132af565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17815292518251600094859485948a16939092909182918083835b602083106125a75780518252601f199092019160209182019101612588565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612609576040519150601f19603f3d011682016040523d82523d6000602084013e61260e565b606091505b50915091506000815160001480612638575081806020019051602081101561263557600080fd5b50515b90508280156126445750805b979650505050505050565b815163ffffffff1660009081526008602052604090205461266f8361223e565b1461268c5760405162461bcd60e51b81526004016104ac90613f67565b815163ffffffff166000908152600b602090815260408083208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152929091908301828280156127275780601f106126fc57610100808354040283529160200191612727565b820191906000526020600020905b81548152906001019060200180831161270a57829003601f168201915b50508351939450602c93925061273b915050565b06156127595760405162461bcd60e51b81526004016104ac90613e32565b805160009061276990602c612d80565b90506000805b828161ffff16101561281857600084838151811061278957fe5b016020015160f81c600881111561279c57fe5b905060088160088111156127ac57fe5b146127c95760405162461bcd60e51b81526004016104ac90613eb8565b60006127d78685602c612be7565b905060006127e482612da6565b90506127fd816020015182606001518360800151611d23565b61280885602c612d41565b945050505080600101905061276f565b505050505050565b6128286132f3565b61283182612e41565b6040518060a00160405280836000015163ffffffff1681526020018360200151815260200183604001518152602001836060015181526020018360800151815250905092915050565b6000612886828561226e565b6001600160501b031981166000908152600460205260409020549091506001600160801b03166128b68185612f51565b6001600160501b031983166000908152600460205260409081902080546001600160801b0319166001600160801b039390931692909217909155517ff4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a8079393315490611fec9087908790614146565b6060816000015182602001518360400151846060015185608001518660a0015160405160200161295596959493929190613cef565b6040516020818303038152906040529050919050565b805160209091012060601b90565b60008282016001600160801b038085169082161015611d1c576040805162461bcd60e51b8152602060048201526002602482015261189960f11b604482015290519081900360640190fd5b60008184841115612a535760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612a18578181015183820152602001612a00565b50505050905090810190601f168015612a455780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600080836001600160a01b0316600360009054906101000a90046001600160a01b03166001600160a01b031663c701f9556040518163ffffffff1660e01b815260040160206040518083038186803b158015612ab657600080fd5b505afa158015612aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aee91906139c5565b84604051612afb90613cec565b600060405180830381858888f193505050503d8060008114612b39576040519150601f19603f3d011682016040523d82523d6000602084013e612b3e565b606091505b509095945050505050565b6001600160501b03198216600090815260046020526040908190205481518083019092526001600160801b03169080612b828385612979565b6001600160801b03908116825260ff60209283018190526001600160501b031990961660009081526004835260409020835181549490930151909616600160801b0260ff60801b19929091166001600160801b03199093169290921716179092555050565b606081830184511015612c25576040805162461bcd60e51b81526020600482015260016024820152602d60f91b604482015290519081900360640190fd5b6000826001600160401b0381118015612c3d57600080fd5b506040519080825280601f01601f191660200182016040528015612c68576020820181803683370190505b5090508215612c9b57602081018381016020860187015b81831015612c97578051835260209283019201612c7f565b5050505b949350505050565b612cab613321565b6001612cb78382612f78565b60ff1660208401529050612ccb8382612fa4565b61ffff1660408401529050612ce08382612fbd565b6001600160a01b031660608401529050612cfa8382612fcd565b6001600160801b031660808401529050612d148382612fdd565b60a0840152905060488114612d3b5760405162461bcd60e51b81526004016104ac90613f86565b50919050565b600082820183811015611d1c576040805162461bcd60e51b81526020600482015260026024820152610c4d60f21b604482015290519081900360640190fd5b6000611d1c8383604051806040016040528060018152602001600f60fb1b815250612fed565b612dae6132f3565b6001612dba8382612f78565b60ff1683529050612dcb8382612fa4565b61ffff1660208401529050612de08382613052565b63ffffffff1660408401529050612df78382612fbd565b6001600160a01b031660608401529050612e118382612fcd565b6001600160801b031660808401529050602c8114612d3b5760405162461bcd60e51b81526004016104ac90613f86565b60a081015160006060815b8460c0015161ffff168161ffff161015612f29576000848481518110612e6e57fe5b016020015160f81c6008811115612e8157fe5b90506001816008811115612e9157fe5b1415612ea957612ea2846048612d41565b9350612f20565b6002816008811115612eb757fe5b1415612ec857612ea2846048612d41565b6008816008811115612ed657fe5b14156124e3576000612eea8686602c612be7565b90508381604051602001612eff929190613cbd565b60408051601f198184030181529190529350612f1c85602c612d41565b9450505b50600101612e4c565b50835163ffffffff166000908152600b602090815260409091208251611ff592840190613356565b6000611d1c838360405180604001604052806002815260200161616160f01b815250613062565b600080826001019150838381518110612f8d57fe5b602001015160f81c60f81b60f81c90509250929050565b600281016000612fb484846130c7565b90509250929050565b601481016000612fb48484613115565b601081016000612fb48484613158565b602081016000612fb4848461319b565b6000818361303c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612a18578181015183820152602001612a00565b50600083858161304857fe5b0495945050505050565b600481016000612fb484846131de565b6000836001600160801b0316836001600160801b031611158290612a535760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612a18578181015183820152602001612a00565b600080826002019050808451101561310a576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b929092015192915050565b600080826014019050808451101561310a576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b600080826010019050808451101561310a576040805162461bcd60e51b81526020600482015260016024820152605760f81b604482015290519081900360640190fd5b600080826020019050808451101561310a576040805162461bcd60e51b81526020600482015260016024820152605960f81b604482015290519081900360640190fd5b600080826004019050808451101561310a576040805162461bcd60e51b81526020600482015260016024820152602b60f91b604482015290519081900360640190fd5b6001830191839082156132a35791602002820160005b8382111561327457835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302613237565b80156132a15782816101000a81549060ff0219169055600101602081600001049283019260010302613274565b505b50611b079291506133d2565b50805460018160011615610100020316600290046000825580601f106132d5575061223b565b601f01602090049060005260206000209081019061223b91906133d2565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261338c57600085556132a3565b82601f106133a557805160ff19168380011785556132a3565b828001600101855582156132a3579182015b828111156132a35782518255916020019190600101906133b7565b5b80821115611b0757600081556001016133d3565b600082601f8301126133f7578081fd5b60405160c081018181106001600160401b038211171561341357fe5b604052808360c08101861015613427578384fd5b835b6006811015613448578135835260209283019290910190600101613429565b509195945050505050565b600082601f830112613463578081fd5b8135602061347861347383614209565b6141cc565b8281528181019085830160a080860288018501891015613496578687fd5b865b868110156134bc576134aa8a84613654565b85529385019391810191600101613498565b509198975050505050505050565b600082601f8301126134da578081fd5b813560206134ea61347383614209565b82815281810190858301855b858110156135e357813588016101c080601f19838d03011215613517578889fd5b6135226101206141cc565b61352d8884016136cc565b815260408084013589830152606084013581830152506080830135606082015260a080840135608083015260c08401356001600160401b0380821115613571578c8dfd5b61357f8f8c848901016135f0565b8385015261358f60e087016136c1565b60c085015261010092506135a58f8488016133e7565b60e08501529385013593808511156135bb578c8dfd5b50506135cb8d8a858701016135f0565b908201528652505092840192908401906001016134f6565b5090979650505050505050565b600082601f830112613600578081fd5b81356001600160401b0381111561361357fe5b613626601f8201601f19166020016141cc565b81815284602083860101111561363a578283fd5b816020850160208301379081016020019190915292915050565b600060a08284031215613665578081fd5b60405160a081018181106001600160401b038211171561368157fe5b604052905080613690836136cc565b8152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b803561124b8161428e565b803563ffffffff8116811461124b57600080fd5b6000602082840312156136f1578081fd5b8151611d1c81614256565b60008060008060008060008060006101a0808b8d03121561371b578586fd5b8a3561372681614256565b995060208b013561373681614256565b985060408b013561374681614256565b975061375460608c016136cc565b965060808b0135955060a08b0135945060c08b0135935060e08b013592508b61011f8c0112613781578182fd5b61378e61347360056141ef565b806101008d018e848f0111156137a2578485fd5b8493505b60058410156137cf5780356137ba8161426b565b835260019390930192602092830192016137a6565b508093505050509295985092959850929598565b6000806000606084860312156137f7578081fd5b833561380281614256565b9250602084013561381281614256565b9150604084013561382281614279565b809150509250925092565b6000806040838503121561383f578182fd5b823561384a81614256565b9150602083013561385a81614256565b809150509250929050565b600060208284031215613876578081fd5b81356001600160401b0381111561388b578182fd5b612c9b84828501613453565b600080604083850312156138a9578182fd5b82356001600160401b03808211156138bf578384fd5b6138cb86838701613453565b93506020915081850135818111156138e1578384fd5b85019050601f810186136138f3578283fd5b803561390161347382614209565b81815283810190838501858402850186018a101561391d578687fd5b8694505b8385101561393f578035835260019490940193918501918501613921565b5080955050505050509250929050565b600060208284031215613960578081fd5b81356001600160401b03811115613975578182fd5b612c9b848285016134ca565b600060208284031215613992578081fd5b8151611d1c8161426b565b6000602082840312156139ae578081fd5b81356001600160601b031981168114611d1c578182fd5b6000602082840312156139d6578081fd5b5051919050565b600080602083850312156139ef578182fd5b82356001600160401b0380821115613a05578384fd5b818501915085601f830112613a18578384fd5b813581811115613a26578485fd5b866020828501011115613a37578485fd5b60209290920196919550909350505050565b600060208284031215613a5a578081fd5b81356001600160401b03811115613a6f578182fd5b612c9b848285016135f0565b60008060008060808587031215613a90578182fd5b8435613a9b81614256565b93506020850135613aab81614256565b92506040850135613abb81614279565b91506060850135613acb81614279565b939692955090935050565b60008060c08385031215613ae8578182fd5b613af28484613654565b915060a08301356001600160401b03811115613b0c578182fd5b613b18858286016134ca565b9150509250929050565b600060208284031215613b33578081fd5b8151611d1c81614279565b600060208284031215613b4f578081fd5b8135611d1c8161428e565b600060208284031215613b6b578081fd5b8151611d1c8161428e565b60008060408385031215613b88578182fd5b823561384a8161428e565b600060208284031215613ba4578081fd5b5035919050565b600060208284031215613bbc578081fd5b611d1c826136cc565b600060208284031215613bd6578081fd5b8151611d1c8161429e565b60008060408385031215613bf3578182fd5b8235613bfe8161429e565b946020939093013593505050565b60008060008060808587031215613c21578182fd5b8435613c2c8161429e565b93506020850135613c3c81614256565b925060408501356001600160681b0381168114613c57578283fd5b9396929550929360600135925050565b6000815180845260208085019450808401835b83811015613c9657815187529582019590820190600101613c7a565b509495945050505050565b60008251613cb3818460208701614226565b9190910192915050565b60008351613ccf818460208801614226565b835190830190613ce3818360208801614226565b01949350505050565b90565b60f896871b6001600160f81b031990811682529590961b909416600186015260f09290921b6001600160f01b031916600285015260601b6001600160601b031916600484015260801b6001600160801b0319166018830152602882015260480190565b6001600160a01b0391909116815260200190565b600060608252613d796060830186613c67565b8281036020840152613d8b8186613c67565b915050826040830152949350505050565b901515815260200190565b90815260200190565b6000602082528251806020840152613dcf816040850160208701614226565b601f01601f19169190910160400192915050565b6001600160a01b0394851681529290931660208301526001600160801b039081166040830152909116606082015260800190565b6020808252600190820152604360f81b604082015260600190565b6020808252600190820152604160f81b604082015260600190565b6020808252600190820152606360f81b604082015260600190565b60208082526010908201526f6e6f2062616c616e636520666f72207560801b604082015260600190565b6020808252600c908201526b1bdc081b9bdd08195e1a5cdd60a21b604082015260600190565b602080825260049082015263069776f760e41b604082015260600190565b6020808252600e908201526d1a5b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b6020808252600a90820152696e6f742065787069727960b01b604082015260600190565b6020808252600190820152603760f81b604082015260600190565b60208082526010908201526f6e6f74206c617465737420626c6f636b60801b604082015260600190565b602080825260059082015264065786531360dc1b604082015260600190565b6020808252600190820152602760f91b604082015260600190565b6020808252601390820152721bdc08185b1c9958591e48195e1958dd5d1959606a1b604082015260600190565b60208082526010908201526f185b1c9958591e48195e1958dd5d195960821b604082015260600190565b6020808252600190820152603160f91b604082015260600190565b6020808252600a90820152690696e76616c6964206f760b41b604082015260600190565b6020808252600190820152603560f81b604082015260600190565b6020808252600d908201526c34b73b30b634b210383937b7b360991b604082015260600190565b6020808252600190820152601b60f91b604082015260600190565b6020808252600190820152602360f91b604082015260600190565b6020808252600190820152601960fa1b604082015260600190565b600060a08201905063ffffffff83511682526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b6001600160801b0391909116815260200190565b6001600160801b03929092168252602082015260400190565b61ffff91909116815260200190565b61ffff9290921682526001600160801b0316602082015260400190565b63ffffffff91909116815260200190565b63ffffffff92831681529116602082015260400190565b6001600160401b0391909116815260200190565b60ff94909416845261ffff92909216602084015260408301526001600160801b0316606082015260800190565b6040518181016001600160401b03811182821017156141e757fe5b604052919050565b60006001600160401b0382111561420257fe5b5060200290565b60006001600160401b0382111561421c57fe5b5060209081020190565b60005b83811015614241578181015183820152602001614229565b83811115614250576000848401525b50505050565b6001600160a01b038116811461223b57600080fd5b801515811461223b57600080fd5b6001600160801b038116811461223b57600080fd5b61ffff8116811461223b57600080fd5b60ff8116811461223b57600080fdfe8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4a2646970667358221220b6b6804131159f2abf7ef34b3ee2234841e531dc8189d3dca354fa35ce6c2b6e64736f6c63430007060033"

// DeployZecrey deploys a new Ethereum contract, binding an instance of Zecrey to it.
func DeployZecrey(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Zecrey, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ZecreyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// Zecrey is an auto generated Go binding around an Ethereum contract.
type Zecrey struct {
	ZecreyCaller     // Read-only binding to the contract
	ZecreyTransactor // Write-only binding to the contract
	ZecreyFilterer   // Log filterer for contract events
}

// ZecreyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZecreyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZecreyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZecreyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZecreySession struct {
	Contract     *Zecrey           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZecreyCallerSession struct {
	Contract *ZecreyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ZecreyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZecreyTransactorSession struct {
	Contract     *ZecreyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZecreyRaw struct {
	Contract *Zecrey // Generic contract binding to access the raw methods on
}

// ZecreyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZecreyCallerRaw struct {
	Contract *ZecreyCaller // Generic read-only contract binding to access the raw methods on
}

// ZecreyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZecreyTransactorRaw struct {
	Contract *ZecreyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZecrey creates a new instance of Zecrey, bound to a specific deployed contract.
func NewZecrey(address common.Address, backend bind.ContractBackend) (*Zecrey, error) {
	contract, err := bindZecrey(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// NewZecreyCaller creates a new read-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyCaller(address common.Address, caller bind.ContractCaller) (*ZecreyCaller, error) {
	contract, err := bindZecrey(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyCaller{contract: contract}, nil
}

// NewZecreyTransactor creates a new write-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyTransactor(address common.Address, transactor bind.ContractTransactor) (*ZecreyTransactor, error) {
	contract, err := bindZecrey(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyTransactor{contract: contract}, nil
}

// NewZecreyFilterer creates a new log filterer instance of Zecrey, bound to a specific deployed contract.
func NewZecreyFilterer(address common.Address, filterer bind.ContractFilterer) (*ZecreyFilterer, error) {
	contract, err := bindZecrey(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZecreyFilterer{contract: contract}, nil
}

// bindZecrey binds a generic wrapper to an already deployed contract.
func bindZecrey(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.ZecreyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transact(opts, method, params...)
}

// OnchainOpsMerkleHelper is a free data retrieval call binding the contract method 0x9b9e91b6.
//
// Solidity: function _onchainOpsMerkleHelper(uint256 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsMerkleHelper(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "_onchainOpsMerkleHelper", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsMerkleHelper is a free data retrieval call binding the contract method 0x9b9e91b6.
//
// Solidity: function _onchainOpsMerkleHelper(uint256 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsMerkleHelper(arg0 *big.Int) (bool, error) {
	return _Zecrey.Contract.OnchainOpsMerkleHelper(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsMerkleHelper is a free data retrieval call binding the contract method 0x9b9e91b6.
//
// Solidity: function _onchainOpsMerkleHelper(uint256 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsMerkleHelper(arg0 *big.Int) (bool, error) {
	return _Zecrey.Contract.OnchainOpsMerkleHelper(&_Zecrey.CallOpts, arg0)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCaller) AccountRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "accountRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreySession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// BlockOnchainOpsPubData is a free data retrieval call binding the contract method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreyCaller) BlockOnchainOpsPubData(opts *bind.CallOpts, arg0 uint32) ([]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "blockOnchainOpsPubData", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// BlockOnchainOpsPubData is a free data retrieval call binding the contract method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreySession) BlockOnchainOpsPubData(arg0 uint32) ([]byte, error) {
	return _Zecrey.Contract.BlockOnchainOpsPubData(&_Zecrey.CallOpts, arg0)
}

// BlockOnchainOpsPubData is a free data retrieval call binding the contract method 0xeface7e2.
//
// Solidity: function blockOnchainOpsPubData(uint32 ) view returns(bytes)
func (_Zecrey *ZecreyCallerSession) BlockOnchainOpsPubData(arg0 uint32) ([]byte, error) {
	return _Zecrey.Contract.BlockOnchainOpsPubData(&_Zecrey.CallOpts, arg0)
}

// ComputeOnchainOpsHash is a free data retrieval call binding the contract method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreyCaller) ComputeOnchainOpsHash(opts *bind.CallOpts, _onchainOpsPubData []byte) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "computeOnchainOpsHash", _onchainOpsPubData)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeOnchainOpsHash is a free data retrieval call binding the contract method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreySession) ComputeOnchainOpsHash(_onchainOpsPubData []byte) ([32]byte, error) {
	return _Zecrey.Contract.ComputeOnchainOpsHash(&_Zecrey.CallOpts, _onchainOpsPubData)
}

// ComputeOnchainOpsHash is a free data retrieval call binding the contract method 0x8c8ebc52.
//
// Solidity: function computeOnchainOpsHash(bytes _onchainOpsPubData) pure returns(bytes32 onchainOpsDataHash)
func (_Zecrey *ZecreyCallerSession) ComputeOnchainOpsHash(_onchainOpsPubData []byte) ([32]byte, error) {
	return _Zecrey.Contract.ComputeOnchainOpsHash(&_Zecrey.CallOpts, _onchainOpsPubData)
}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreyCaller) FirstPriorityRequestId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "firstPriorityRequestId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreySession) FirstPriorityRequestId() (uint64, error) {
	return _Zecrey.Contract.FirstPriorityRequestId(&_Zecrey.CallOpts)
}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_Zecrey *ZecreyCallerSession) FirstPriorityRequestId() (uint64, error) {
	return _Zecrey.Contract.FirstPriorityRequestId(&_Zecrey.CallOpts)
}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreyCaller) GetPendingBalance(opts *bind.CallOpts, _address common.Address, _assetAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getPendingBalance", _address, _assetAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreySession) GetPendingBalance(_address common.Address, _assetAddr common.Address) (*big.Int, error) {
	return _Zecrey.Contract.GetPendingBalance(&_Zecrey.CallOpts, _address, _assetAddr)
}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_Zecrey *ZecreyCallerSession) GetPendingBalance(_address common.Address, _assetAddr common.Address) (*big.Int, error) {
	return _Zecrey.Contract.GetPendingBalance(&_Zecrey.CallOpts, _address, _assetAddr)
}

// OnchainOpsCheck is a free data retrieval call binding the contract method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsCheck(opts *bind.CallOpts, arg0 [20]byte) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOpsCheck", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsCheck is a free data retrieval call binding the contract method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsCheck(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsCheck(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsCheck is a free data retrieval call binding the contract method 0x0222740e.
//
// Solidity: function onchainOpsCheck(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsCheck(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsCheck(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsExecuted is a free data retrieval call binding the contract method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCaller) OnchainOpsExecuted(opts *bind.CallOpts, arg0 [20]byte) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOpsExecuted", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OnchainOpsExecuted is a free data retrieval call binding the contract method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreySession) OnchainOpsExecuted(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsExecuted(&_Zecrey.CallOpts, arg0)
}

// OnchainOpsExecuted is a free data retrieval call binding the contract method 0x8b4f7de9.
//
// Solidity: function onchainOpsExecuted(bytes20 ) view returns(bool)
func (_Zecrey *ZecreyCallerSession) OnchainOpsExecuted(arg0 [20]byte) (bool, error) {
	return _Zecrey.Contract.OnchainOpsExecuted(&_Zecrey.CallOpts, arg0)
}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCaller) StoredBlockHeaderHashes(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "storedBlockHeaderHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreySession) StoredBlockHeaderHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHeaderHashes(&_Zecrey.CallOpts, arg0)
}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) StoredBlockHeaderHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHeaderHashes(&_Zecrey.CallOpts, arg0)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksCommitted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksCommitted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksExecuted is a free data retrieval call binding the contract method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksExecuted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksExecuted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksExecuted is a free data retrieval call binding the contract method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksExecuted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksExecuted(&_Zecrey.CallOpts)
}

// TotalBlocksExecuted is a free data retrieval call binding the contract method 0xf2235487.
//
// Solidity: function totalBlocksExecuted() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksExecuted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksExecuted(&_Zecrey.CallOpts)
}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksVerified(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksVerified")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksVerified() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksVerified(&_Zecrey.CallOpts)
}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksVerified() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksVerified(&_Zecrey.CallOpts)
}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreyCaller) TotalOpenPriorityRequests(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalOpenPriorityRequests")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreySession) TotalOpenPriorityRequests() (uint64, error) {
	return _Zecrey.Contract.TotalOpenPriorityRequests(&_Zecrey.CallOpts)
}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_Zecrey *ZecreyCallerSession) TotalOpenPriorityRequests() (uint64, error) {
	return _Zecrey.Contract.TotalOpenPriorityRequests(&_Zecrey.CallOpts)
}

// UnhandledBalances is a free data retrieval call binding the contract method 0xe1d730d9.
//
// Solidity: function unhandledBalances(uint16 , address ) view returns(uint128 unhandledBalance, uint256 blockNumber)
func (_Zecrey *ZecreyCaller) UnhandledBalances(opts *bind.CallOpts, arg0 uint16, arg1 common.Address) (struct {
	UnhandledBalance *big.Int
	BlockNumber      *big.Int
}, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "unhandledBalances", arg0, arg1)

	outstruct := new(struct {
		UnhandledBalance *big.Int
		BlockNumber      *big.Int
	})

	outstruct.UnhandledBalance = out[0].(*big.Int)
	outstruct.BlockNumber = out[1].(*big.Int)

	return *outstruct, err

}

// UnhandledBalances is a free data retrieval call binding the contract method 0xe1d730d9.
//
// Solidity: function unhandledBalances(uint16 , address ) view returns(uint128 unhandledBalance, uint256 blockNumber)
func (_Zecrey *ZecreySession) UnhandledBalances(arg0 uint16, arg1 common.Address) (struct {
	UnhandledBalance *big.Int
	BlockNumber      *big.Int
}, error) {
	return _Zecrey.Contract.UnhandledBalances(&_Zecrey.CallOpts, arg0, arg1)
}

// UnhandledBalances is a free data retrieval call binding the contract method 0xe1d730d9.
//
// Solidity: function unhandledBalances(uint16 , address ) view returns(uint128 unhandledBalance, uint256 blockNumber)
func (_Zecrey *ZecreyCallerSession) UnhandledBalances(arg0 uint16, arg1 common.Address) (struct {
	UnhandledBalance *big.Int
	BlockNumber      *big.Int
}, error) {
	return _Zecrey.Contract.UnhandledBalances(&_Zecrey.CallOpts, arg0, arg1)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactor) TransferERC20(opts *bind.TransactOpts, _token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "_transferERC20", _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreySession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactorSession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0xba3d274a.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[6],bytes)[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactor) CommitBlocks(opts *bind.TransactOpts, _lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "commitBlocks", _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0xba3d274a.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[6],bytes)[] _newBlocksData) returns()
func (_Zecrey *ZecreySession) CommitBlocks(_lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0xba3d274a.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256,bytes32) _lastCommittedBlockData, (uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[6],bytes)[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactorSession) CommitBlocks(_lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// DepositOrLockERC20 is a paid mutator transaction binding the contract method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _opType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreyTransactor) DepositOrLockERC20(opts *bind.TransactOpts, _opType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "depositOrLockERC20", _opType, _token, _amount, _accountName)
}

// DepositOrLockERC20 is a paid mutator transaction binding the contract method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _opType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreySession) DepositOrLockERC20(_opType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockERC20(&_Zecrey.TransactOpts, _opType, _token, _amount, _accountName)
}

// DepositOrLockERC20 is a paid mutator transaction binding the contract method 0x1e15f3e0.
//
// Solidity: function depositOrLockERC20(uint8 _opType, address _token, uint104 _amount, bytes32 _accountName) returns()
func (_Zecrey *ZecreyTransactorSession) DepositOrLockERC20(_opType uint8, _token common.Address, _amount *big.Int, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockERC20(&_Zecrey.TransactOpts, _opType, _token, _amount, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the contract method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _opType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreyTransactor) DepositOrLockNativeAsset(opts *bind.TransactOpts, _opType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "depositOrLockNativeAsset", _opType, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the contract method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _opType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreySession) DepositOrLockNativeAsset(_opType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockNativeAsset(&_Zecrey.TransactOpts, _opType, _accountName)
}

// DepositOrLockNativeAsset is a paid mutator transaction binding the contract method 0x1678b35e.
//
// Solidity: function depositOrLockNativeAsset(uint8 _opType, bytes32 _accountName) payable returns()
func (_Zecrey *ZecreyTransactorSession) DepositOrLockNativeAsset(_opType uint8, _accountName [32]byte) (*types.Transaction, error) {
	return _Zecrey.Contract.DepositOrLockNativeAsset(&_Zecrey.TransactOpts, _opType, _accountName)
}

// ExecuteBlocks is a paid mutator transaction binding the contract method 0xa0b94d61.
//
// Solidity: function executeBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks) returns()
func (_Zecrey *ZecreyTransactor) ExecuteBlocks(opts *bind.TransactOpts, _blocks []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "executeBlocks", _blocks)
}

// ExecuteBlocks is a paid mutator transaction binding the contract method 0xa0b94d61.
//
// Solidity: function executeBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks) returns()
func (_Zecrey *ZecreySession) ExecuteBlocks(_blocks []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.ExecuteBlocks(&_Zecrey.TransactOpts, _blocks)
}

// ExecuteBlocks is a paid mutator transaction binding the contract method 0xa0b94d61.
//
// Solidity: function executeBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks) returns()
func (_Zecrey *ZecreyTransactorSession) ExecuteBlocks(_blocks []StorageBlockHeader) (*types.Transaction, error) {
	return _Zecrey.Contract.ExecuteBlocks(&_Zecrey.TransactOpts, _blocks)
}

// ForceWithdrawUnhandledBalance is a paid mutator transaction binding the contract method 0x1dd269e3.
//
// Solidity: function forceWithdrawUnhandledBalance(uint16 _assetId) returns()
func (_Zecrey *ZecreyTransactor) ForceWithdrawUnhandledBalance(opts *bind.TransactOpts, _assetId uint16) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "forceWithdrawUnhandledBalance", _assetId)
}

// ForceWithdrawUnhandledBalance is a paid mutator transaction binding the contract method 0x1dd269e3.
//
// Solidity: function forceWithdrawUnhandledBalance(uint16 _assetId) returns()
func (_Zecrey *ZecreySession) ForceWithdrawUnhandledBalance(_assetId uint16) (*types.Transaction, error) {
	return _Zecrey.Contract.ForceWithdrawUnhandledBalance(&_Zecrey.TransactOpts, _assetId)
}

// ForceWithdrawUnhandledBalance is a paid mutator transaction binding the contract method 0x1dd269e3.
//
// Solidity: function forceWithdrawUnhandledBalance(uint16 _assetId) returns()
func (_Zecrey *ZecreyTransactorSession) ForceWithdrawUnhandledBalance(_assetId uint16) (*types.Transaction, error) {
	return _Zecrey.Contract.ForceWithdrawUnhandledBalance(&_Zecrey.TransactOpts, _assetId)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreyTransactor) Initialize(opts *bind.TransactOpts, initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "initialize", initializationParameters)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreySession) Initialize(initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.Contract.Initialize(&_Zecrey.TransactOpts, initializationParameters)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_Zecrey *ZecreyTransactorSession) Initialize(initializationParameters []byte) (*types.Transaction, error) {
	return _Zecrey.Contract.Initialize(&_Zecrey.TransactOpts, initializationParameters)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x615f1e35.
//
// Solidity: function revertBlocks((uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[6],bytes)[] _blocksToRevert) returns()
func (_Zecrey *ZecreyTransactor) RevertBlocks(opts *bind.TransactOpts, _blocksToRevert []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "revertBlocks", _blocksToRevert)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x615f1e35.
//
// Solidity: function revertBlocks((uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[6],bytes)[] _blocksToRevert) returns()
func (_Zecrey *ZecreySession) RevertBlocks(_blocksToRevert []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.RevertBlocks(&_Zecrey.TransactOpts, _blocksToRevert)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x615f1e35.
//
// Solidity: function revertBlocks((uint32,bytes32,bytes32,uint256,bytes32,bytes,uint16,bytes32[6],bytes)[] _blocksToRevert) returns()
func (_Zecrey *ZecreyTransactorSession) RevertBlocks(_blocksToRevert []ZecreyCommitBlockInfo) (*types.Transaction, error) {
	return _Zecrey.Contract.RevertBlocks(&_Zecrey.TransactOpts, _blocksToRevert)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0x27874c77.
//
// Solidity: function verifyBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks, uint256[] _proofs) returns()
func (_Zecrey *ZecreyTransactor) VerifyBlocks(opts *bind.TransactOpts, _blocks []StorageBlockHeader, _proofs []*big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "verifyBlocks", _blocks, _proofs)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0x27874c77.
//
// Solidity: function verifyBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks, uint256[] _proofs) returns()
func (_Zecrey *ZecreySession) VerifyBlocks(_blocks []StorageBlockHeader, _proofs []*big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.VerifyBlocks(&_Zecrey.TransactOpts, _blocks, _proofs)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0x27874c77.
//
// Solidity: function verifyBlocks((uint32,bytes32,bytes32,uint256,bytes32)[] _blocks, uint256[] _proofs) returns()
func (_Zecrey *ZecreyTransactorSession) VerifyBlocks(_blocks []StorageBlockHeader, _proofs []*big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.VerifyBlocks(&_Zecrey.TransactOpts, _blocks, _proofs)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreyTransactor) WithdrawPendingBalance(opts *bind.TransactOpts, _owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "withdrawPendingBalance", _owner, _token, _amount)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreySession) WithdrawPendingBalance(_owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.WithdrawPendingBalance(&_Zecrey.TransactOpts, _owner, _token, _amount)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_Zecrey *ZecreyTransactorSession) WithdrawPendingBalance(_owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.WithdrawPendingBalance(&_Zecrey.TransactOpts, _owner, _token, _amount)
}

// ZecreyBlockCommitIterator is returned from FilterBlockCommit and is used to iterate over the raw logs and unpacked data for BlockCommit events raised by the Zecrey contract.
type ZecreyBlockCommitIterator struct {
	Event *ZecreyBlockCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockCommit represents a BlockCommit event raised by the Zecrey contract.
type ZecreyBlockCommit struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockCommit is a free log retrieval operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockCommit(opts *bind.FilterOpts) (*ZecreyBlockCommitIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockCommit")
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockCommitIterator{contract: _Zecrey.contract, event: "BlockCommit", logs: logs, sub: sub}, nil
}

// WatchBlockCommit is a free log subscription operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockCommit(opts *bind.WatchOpts, sink chan<- *ZecreyBlockCommit) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockCommit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockCommit)
				if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockCommit is a log parse operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockCommit(log types.Log) (*ZecreyBlockCommit, error) {
	event := new(ZecreyBlockCommit)
	if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlockExecutionIterator is returned from FilterBlockExecution and is used to iterate over the raw logs and unpacked data for BlockExecution events raised by the Zecrey contract.
type ZecreyBlockExecutionIterator struct {
	Event *ZecreyBlockExecution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockExecutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockExecution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockExecution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockExecutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockExecutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockExecution represents a BlockExecution event raised by the Zecrey contract.
type ZecreyBlockExecution struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockExecution is a free log retrieval operation binding the contract event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockExecution(opts *bind.FilterOpts) (*ZecreyBlockExecutionIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockExecution")
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockExecutionIterator{contract: _Zecrey.contract, event: "BlockExecution", logs: logs, sub: sub}, nil
}

// WatchBlockExecution is a free log subscription operation binding the contract event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockExecution(opts *bind.WatchOpts, sink chan<- *ZecreyBlockExecution) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockExecution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockExecution)
				if err := _Zecrey.contract.UnpackLog(event, "BlockExecution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockExecution is a log parse operation binding the contract event 0x24cd3f92ac0167a3c7b7597f8c75a5e4e8f6a6cbecdced1500c67029f9f6f3fb.
//
// Solidity: event BlockExecution(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockExecution(log types.Log) (*ZecreyBlockExecution, error) {
	event := new(ZecreyBlockExecution)
	if err := _Zecrey.contract.UnpackLog(event, "BlockExecution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlockVerificationIterator is returned from FilterBlockVerification and is used to iterate over the raw logs and unpacked data for BlockVerification events raised by the Zecrey contract.
type ZecreyBlockVerificationIterator struct {
	Event *ZecreyBlockVerification // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockVerificationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockVerification)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockVerification)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockVerificationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockVerificationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockVerification represents a BlockVerification event raised by the Zecrey contract.
type ZecreyBlockVerification struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockVerification is a free log retrieval operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockVerification(opts *bind.FilterOpts) (*ZecreyBlockVerificationIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockVerification")
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockVerificationIterator{contract: _Zecrey.contract, event: "BlockVerification", logs: logs, sub: sub}, nil
}

// WatchBlockVerification is a free log subscription operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockVerification(opts *bind.WatchOpts, sink chan<- *ZecreyBlockVerification) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockVerification")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockVerification)
				if err := _Zecrey.contract.UnpackLog(event, "BlockVerification", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockVerification is a log parse operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockVerification(log types.Log) (*ZecreyBlockVerification, error) {
	event := new(ZecreyBlockVerification)
	if err := _Zecrey.contract.UnpackLog(event, "BlockVerification", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlocksRevertIterator is returned from FilterBlocksRevert and is used to iterate over the raw logs and unpacked data for BlocksRevert events raised by the Zecrey contract.
type ZecreyBlocksRevertIterator struct {
	Event *ZecreyBlocksRevert // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlocksRevertIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlocksRevert)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlocksRevert)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlocksRevertIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlocksRevertIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlocksRevert represents a BlocksRevert event raised by the Zecrey contract.
type ZecreyBlocksRevert struct {
	TotalBlocksVerified  uint32
	TotalBlocksCommitted uint32
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterBlocksRevert is a free log retrieval operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) FilterBlocksRevert(opts *bind.FilterOpts) (*ZecreyBlocksRevertIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlocksRevert")
	if err != nil {
		return nil, err
	}
	return &ZecreyBlocksRevertIterator{contract: _Zecrey.contract, event: "BlocksRevert", logs: logs, sub: sub}, nil
}

// WatchBlocksRevert is a free log subscription operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) WatchBlocksRevert(opts *bind.WatchOpts, sink chan<- *ZecreyBlocksRevert) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlocksRevert")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlocksRevert)
				if err := _Zecrey.contract.UnpackLog(event, "BlocksRevert", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlocksRevert is a log parse operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_Zecrey *ZecreyFilterer) ParseBlocksRevert(log types.Log) (*ZecreyBlocksRevert, error) {
	event := new(ZecreyBlocksRevert)
	if err := _Zecrey.contract.UnpackLog(event, "BlocksRevert", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositCommitIterator is returned from FilterDepositCommit and is used to iterate over the raw logs and unpacked data for DepositCommit events raised by the Zecrey contract.
type ZecreyDepositCommitIterator struct {
	Event *ZecreyDepositCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDepositCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDepositCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDepositCommit represents a DepositCommit event raised by the Zecrey contract.
type ZecreyDepositCommit struct {
	ZecreyBlockNumber uint32
	AccountIndex      uint32
	AccountName       [32]byte
	AssetId           uint16
	Amount            *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterDepositCommit is a free log retrieval operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterDepositCommit(opts *bind.FilterOpts, zecreyBlockNumber []uint32, accountIndex []uint32, assetId []uint16) (*ZecreyDepositCommitIterator, error) {

	var zecreyBlockNumberRule []interface{}
	for _, zecreyBlockNumberItem := range zecreyBlockNumber {
		zecreyBlockNumberRule = append(zecreyBlockNumberRule, zecreyBlockNumberItem)
	}
	var accountIndexRule []interface{}
	for _, accountIndexItem := range accountIndex {
		accountIndexRule = append(accountIndexRule, accountIndexItem)
	}

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "DepositCommit", zecreyBlockNumberRule, accountIndexRule, assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositCommitIterator{contract: _Zecrey.contract, event: "DepositCommit", logs: logs, sub: sub}, nil
}

// WatchDepositCommit is a free log subscription operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchDepositCommit(opts *bind.WatchOpts, sink chan<- *ZecreyDepositCommit, zecreyBlockNumber []uint32, accountIndex []uint32, assetId []uint16) (event.Subscription, error) {

	var zecreyBlockNumberRule []interface{}
	for _, zecreyBlockNumberItem := range zecreyBlockNumber {
		zecreyBlockNumberRule = append(zecreyBlockNumberRule, zecreyBlockNumberItem)
	}
	var accountIndexRule []interface{}
	for _, accountIndexItem := range accountIndex {
		accountIndexRule = append(accountIndexRule, accountIndexItem)
	}

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "DepositCommit", zecreyBlockNumberRule, accountIndexRule, assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDepositCommit)
				if err := _Zecrey.contract.UnpackLog(event, "DepositCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositCommit is a log parse operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseDepositCommit(log types.Log) (*ZecreyDepositCommit, error) {
	event := new(ZecreyDepositCommit)
	if err := _Zecrey.contract.UnpackLog(event, "DepositCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositOrLockIterator is returned from FilterDepositOrLock and is used to iterate over the raw logs and unpacked data for DepositOrLock events raised by the Zecrey contract.
type ZecreyDepositOrLockIterator struct {
	Event *ZecreyDepositOrLock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositOrLockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDepositOrLock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDepositOrLock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositOrLockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositOrLockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDepositOrLock represents a DepositOrLock event raised by the Zecrey contract.
type ZecreyDepositOrLock struct {
	OpType      uint8
	AssetId     uint16
	AccountName [32]byte
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDepositOrLock is a free log retrieval operation binding the contract event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterDepositOrLock(opts *bind.FilterOpts) (*ZecreyDepositOrLockIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "DepositOrLock")
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositOrLockIterator{contract: _Zecrey.contract, event: "DepositOrLock", logs: logs, sub: sub}, nil
}

// WatchDepositOrLock is a free log subscription operation binding the contract event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchDepositOrLock(opts *bind.WatchOpts, sink chan<- *ZecreyDepositOrLock) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "DepositOrLock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDepositOrLock)
				if err := _Zecrey.contract.UnpackLog(event, "DepositOrLock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositOrLock is a log parse operation binding the contract event 0x962a29b53bf759aebe52079a237a5c47d153bbe40ebf023bde34a680e3e3337b.
//
// Solidity: event DepositOrLock(uint8 opType, uint16 assetId, bytes32 accountName, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseDepositOrLock(log types.Log) (*ZecreyDepositOrLock, error) {
	event := new(ZecreyDepositOrLock)
	if err := _Zecrey.contract.UnpackLog(event, "DepositOrLock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyExodusModeIterator is returned from FilterExodusMode and is used to iterate over the raw logs and unpacked data for ExodusMode events raised by the Zecrey contract.
type ZecreyExodusModeIterator struct {
	Event *ZecreyExodusMode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyExodusModeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyExodusMode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyExodusMode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyExodusModeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyExodusModeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyExodusMode represents a ExodusMode event raised by the Zecrey contract.
type ZecreyExodusMode struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterExodusMode is a free log retrieval operation binding the contract event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) FilterExodusMode(opts *bind.FilterOpts) (*ZecreyExodusModeIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "ExodusMode")
	if err != nil {
		return nil, err
	}
	return &ZecreyExodusModeIterator{contract: _Zecrey.contract, event: "ExodusMode", logs: logs, sub: sub}, nil
}

// WatchExodusMode is a free log subscription operation binding the contract event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) WatchExodusMode(opts *bind.WatchOpts, sink chan<- *ZecreyExodusMode) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "ExodusMode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyExodusMode)
				if err := _Zecrey.contract.UnpackLog(event, "ExodusMode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExodusMode is a log parse operation binding the contract event 0xc71028c67eb0ef128ea270a59a674629e767d51c1af44ed6753fd2fad2c7b677.
//
// Solidity: event ExodusMode()
func (_Zecrey *ZecreyFilterer) ParseExodusMode(log types.Log) (*ZecreyExodusMode, error) {
	event := new(ZecreyExodusMode)
	if err := _Zecrey.contract.UnpackLog(event, "ExodusMode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyFullExitCommitIterator is returned from FilterFullExitCommit and is used to iterate over the raw logs and unpacked data for FullExitCommit events raised by the Zecrey contract.
type ZecreyFullExitCommitIterator struct {
	Event *ZecreyFullExitCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyFullExitCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyFullExitCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyFullExitCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyFullExitCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyFullExitCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyFullExitCommit represents a FullExitCommit event raised by the Zecrey contract.
type ZecreyFullExitCommit struct {
	ZecreyBlockId uint32
	AccountId     uint32
	Owner         common.Address
	TokenId       uint16
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterFullExitCommit is a free log retrieval operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterFullExitCommit(opts *bind.FilterOpts, zecreyBlockId []uint32, accountId []uint32, tokenId []uint16) (*ZecreyFullExitCommitIterator, error) {

	var zecreyBlockIdRule []interface{}
	for _, zecreyBlockIdItem := range zecreyBlockId {
		zecreyBlockIdRule = append(zecreyBlockIdRule, zecreyBlockIdItem)
	}
	var accountIdRule []interface{}
	for _, accountIdItem := range accountId {
		accountIdRule = append(accountIdRule, accountIdItem)
	}

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "FullExitCommit", zecreyBlockIdRule, accountIdRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyFullExitCommitIterator{contract: _Zecrey.contract, event: "FullExitCommit", logs: logs, sub: sub}, nil
}

// WatchFullExitCommit is a free log subscription operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchFullExitCommit(opts *bind.WatchOpts, sink chan<- *ZecreyFullExitCommit, zecreyBlockId []uint32, accountId []uint32, tokenId []uint16) (event.Subscription, error) {

	var zecreyBlockIdRule []interface{}
	for _, zecreyBlockIdItem := range zecreyBlockId {
		zecreyBlockIdRule = append(zecreyBlockIdRule, zecreyBlockIdItem)
	}
	var accountIdRule []interface{}
	for _, accountIdItem := range accountId {
		accountIdRule = append(accountIdRule, accountIdItem)
	}

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "FullExitCommit", zecreyBlockIdRule, accountIdRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyFullExitCommit)
				if err := _Zecrey.contract.UnpackLog(event, "FullExitCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFullExitCommit is a log parse operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseFullExitCommit(log types.Log) (*ZecreyFullExitCommit, error) {
	event := new(ZecreyFullExitCommit)
	if err := _Zecrey.contract.UnpackLog(event, "FullExitCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyNewPriorityRequestIterator is returned from FilterNewPriorityRequest and is used to iterate over the raw logs and unpacked data for NewPriorityRequest events raised by the Zecrey contract.
type ZecreyNewPriorityRequestIterator struct {
	Event *ZecreyNewPriorityRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyNewPriorityRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyNewPriorityRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyNewPriorityRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyNewPriorityRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyNewPriorityRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyNewPriorityRequest represents a NewPriorityRequest event raised by the Zecrey contract.
type ZecreyNewPriorityRequest struct {
	Sender          common.Address
	SerialId        uint64
	TxType          uint8
	PubData         []byte
	ExpirationBlock *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNewPriorityRequest is a free log retrieval operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 txType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) FilterNewPriorityRequest(opts *bind.FilterOpts) (*ZecreyNewPriorityRequestIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "NewPriorityRequest")
	if err != nil {
		return nil, err
	}
	return &ZecreyNewPriorityRequestIterator{contract: _Zecrey.contract, event: "NewPriorityRequest", logs: logs, sub: sub}, nil
}

// WatchNewPriorityRequest is a free log subscription operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 txType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) WatchNewPriorityRequest(opts *bind.WatchOpts, sink chan<- *ZecreyNewPriorityRequest) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "NewPriorityRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyNewPriorityRequest)
				if err := _Zecrey.contract.UnpackLog(event, "NewPriorityRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewPriorityRequest is a log parse operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 txType, bytes pubData, uint256 expirationBlock)
func (_Zecrey *ZecreyFilterer) ParseNewPriorityRequest(log types.Log) (*ZecreyNewPriorityRequest, error) {
	event := new(ZecreyNewPriorityRequest)
	if err := _Zecrey.contract.UnpackLog(event, "NewPriorityRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyNoticePeriodChangeIterator is returned from FilterNoticePeriodChange and is used to iterate over the raw logs and unpacked data for NoticePeriodChange events raised by the Zecrey contract.
type ZecreyNoticePeriodChangeIterator struct {
	Event *ZecreyNoticePeriodChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyNoticePeriodChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyNoticePeriodChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyNoticePeriodChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyNoticePeriodChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyNoticePeriodChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyNoticePeriodChange represents a NoticePeriodChange event raised by the Zecrey contract.
type ZecreyNoticePeriodChange struct {
	NewNoticePeriod *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNoticePeriodChange is a free log retrieval operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) FilterNoticePeriodChange(opts *bind.FilterOpts) (*ZecreyNoticePeriodChangeIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "NoticePeriodChange")
	if err != nil {
		return nil, err
	}
	return &ZecreyNoticePeriodChangeIterator{contract: _Zecrey.contract, event: "NoticePeriodChange", logs: logs, sub: sub}, nil
}

// WatchNoticePeriodChange is a free log subscription operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) WatchNoticePeriodChange(opts *bind.WatchOpts, sink chan<- *ZecreyNoticePeriodChange) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "NoticePeriodChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyNoticePeriodChange)
				if err := _Zecrey.contract.UnpackLog(event, "NoticePeriodChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNoticePeriodChange is a log parse operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_Zecrey *ZecreyFilterer) ParseNoticePeriodChange(log types.Log) (*ZecreyNoticePeriodChange, error) {
	event := new(ZecreyNoticePeriodChange)
	if err := _Zecrey.contract.UnpackLog(event, "NoticePeriodChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the Zecrey contract.
type ZecreyWithdrawalIterator struct {
	Event *ZecreyWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdrawal represents a Withdrawal event raised by the Zecrey contract.
type ZecreyWithdrawal struct {
	AssetId uint16
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterWithdrawal(opts *bind.FilterOpts) (*ZecreyWithdrawalIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Withdrawal")
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawalIterator{contract: _Zecrey.contract, event: "Withdrawal", logs: logs, sub: sub}, nil
}

// WatchWithdrawal is a free log subscription operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *ZecreyWithdrawal) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Withdrawal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdrawal)
				if err := _Zecrey.contract.UnpackLog(event, "Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawal is a log parse operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseWithdrawal(log types.Log) (*ZecreyWithdrawal, error) {
	event := new(ZecreyWithdrawal)
	if err := _Zecrey.contract.UnpackLog(event, "Withdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawalPendingIterator is returned from FilterWithdrawalPending and is used to iterate over the raw logs and unpacked data for WithdrawalPending events raised by the Zecrey contract.
type ZecreyWithdrawalPendingIterator struct {
	Event *ZecreyWithdrawalPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawalPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdrawalPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdrawalPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawalPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawalPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdrawalPending represents a WithdrawalPending event raised by the Zecrey contract.
type ZecreyWithdrawalPending struct {
	AssetId uint16
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalPending is a free log retrieval operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) FilterWithdrawalPending(opts *bind.FilterOpts) (*ZecreyWithdrawalPendingIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "WithdrawalPending")
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawalPendingIterator{contract: _Zecrey.contract, event: "WithdrawalPending", logs: logs, sub: sub}, nil
}

// WatchWithdrawalPending is a free log subscription operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) WatchWithdrawalPending(opts *bind.WatchOpts, sink chan<- *ZecreyWithdrawalPending) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "WithdrawalPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdrawalPending)
				if err := _Zecrey.contract.UnpackLog(event, "WithdrawalPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalPending is a log parse operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 assetId, uint128 amount)
func (_Zecrey *ZecreyFilterer) ParseWithdrawalPending(log types.Log) (*ZecreyWithdrawalPending, error) {
	event := new(ZecreyWithdrawalPending)
	if err := _Zecrey.contract.UnpackLog(event, "WithdrawalPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
