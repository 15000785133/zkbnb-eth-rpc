// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package zecrey

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StorageBlock is an auto generated low-level Go binding around an user-defined struct.
type StorageBlock struct {
	BlockNumber uint32
	AccountRoot [32]byte
	Commitment  [32]byte
	Timestamp   *big.Int
}

// ZecreyCommitBlock is an auto generated low-level Go binding around an user-defined struct.
type ZecreyCommitBlock struct {
	BlockNumber        uint32
	NewAccountRoot     [32]byte
	PublicData         []byte
	WithdrawOperations []ZecreyOperation
	Timestamp          *big.Int
}

// ZecreyOperation is an auto generated low-level Go binding around an user-defined struct.
type ZecreyOperation struct {
	TxType     uint8
	AssetId    uint32
	NativeAddr common.Address
	ZecreyAddr string
	Amount     *big.Int
}

// ZecreyProcessBlock is an auto generated low-level Go binding around an user-defined struct.
type ZecreyProcessBlock struct {
	BlockInfo StorageBlock
	A         [2]*big.Int
	B         [2][2]*big.Int
	C         [2]*big.Int
}

// ZecreyABI is the input ABI used to generate the binding from.
const ZecreyABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"depositAmount\",\"type\":\"uint128\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"VerifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"withdrawAmount\",\"type\":\"uint128\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxAmount\",\"type\":\"uint128\"}],\"name\":\"_transferERC20\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetETH\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structStorage.Block\",\"name\":\"_lastCommittedBlockData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"newAccountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"publicData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"structZecrey.Operation[]\",\"name\":\"withdrawOperations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structZecrey.CommitBlock[]\",\"name\":\"_newBlocksData\",\"type\":\"tuple[]\"}],\"name\":\"commitBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"newAccountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"publicData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"structZecrey.Operation[]\",\"name\":\"withdrawOperations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structZecrey.CommitBlock\",\"name\":\"_newBlock\",\"type\":\"tuple\"}],\"name\":\"getCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structStorage.Block\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"}],\"name\":\"getTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contractIGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onchainOperations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onchainOperationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOperationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structStorage.Block\",\"name\":\"blockInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"structZecrey.ProcessBlock[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"}],\"name\":\"processBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"storedBlockHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksCommitted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksProcessed\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"name\":\"updateGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"}],\"name\":\"updateVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contractIVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ZecreyBin is the compiled bytecode used for deploying new contracts.
var ZecreyBin = "0x60806040527f38723a2e5e8a17aa7950dc008209944e898f69a7bd10a23c839d341e935fd5ca60001b60006000509060001916905560006202000560005090905560006202000660005090905560016202000760006101000a81548160ff021916908360ff16021790555060026202000760016101000a81548160ff021916908360ff16021790555060036202000760026101000a81548160ff021916908360ff16021790555060046202000760036101000a81548160ff021916908360ff16021790555060056202000760046101000a81548160ff021916908360ff160217905550348015620000f05760006000fd5b506040516200516638038062005166833981810160405281019062000116919062000321565b5b5b5b60006200012b620002f660201b60201c565b9050806202000360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505b60006202000360146101000a81548160ff0219169083151502179055505b816202000760056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806202000860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006000505460016000506000600063ffffffff168152602001908152602001600020600050819090600019169055506000600360005060006201000081101515620002b957fe5b90900160005b5081909090555060006201000360005060006201000081101515620002e057fe5b90900160005b508190909055505b5050620003ba565b600033905062000301565b9056620003b9565b6000815190506200031a816200039b565b5b92915050565b6000600060408385031215620003375760006000fd5b6000620003478582860162000309565b92505060206200035a8582860162000309565b9150505b9250929050565b600062000372826200037a565b90505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b620003a68162000365565b81141515620003b55760006000fd5b5b50565b5b614d9c80620003ca6000396000f3fe60806040526004361061016a5760003560e01c806397fc007c116100d1578063b25612631161008a578063c6c6239011610064578063c6c623901461054c578063e21cc0b71461058a578063f2fde38b146105cc578063faf4d8cb146105f65761016a565b8063b2561263146104ca578063b6ebb133146104f4578063bb64db2b146105205761016a565b806397fc007c1461038e578063987f5f7a146103b85780639ba0d146146103e45780639fe8590814610422578063a009f7e414610460578063a7ccec2f1461049e5761016a565b80635c975abb116101235780635c975abb146102985780636567be15146102c4578063715018a6146102e05780638da5cb5b146102f85780638ee1a74e146103245780639640ebde146103625761016a565b80632b7ac3f314610170578063358ca6d41461019c57806349f05457146101c657806359e5157e146102045780635a8bd54c1461022e5780635aa6e6751461026c5761016a565b60006000fd5b34801561017d5760006000fd5b50610186610622565b6040516101939190614548565b60405180910390f35b3480156101a95760006000fd5b506101c460048036038101906101bf9190613be1565b61064a565b005b3480156101d35760006000fd5b506101ee60048036038101906101e99190613af7565b61095b565b6040516101fb91906144ca565b60405180910390f35b3480156102115760006000fd5b5061022c60048036038101906102279190613a5d565b61097a565b005b34801561023b5760006000fd5b5061025660048036038101906102519190613cba565b610a9a565b60405161026391906147cd565b60405180910390f35b3480156102795760006000fd5b50610282610aca565b60405161028f919061452c565b60405180910390f35b3480156102a55760006000fd5b506102ae610af2565b6040516102bb91906144ae565b60405180910390f35b6102de60048036038101906102d99190613ce5565b610b10565b005b3480156102ed5760006000fd5b506102f66110e4565b005b3480156103055760006000fd5b5061030e61126b565b60405161031b919061444c565b60405180910390f35b3480156103315760006000fd5b5061034c60048036038101906103479190613b4f565b61129c565b60405161035991906147b1565b60405180910390f35b34801561036f5760006000fd5b50610378611522565b60405161038591906147e9565b60405180910390f35b34801561039b5760006000fd5b506103b660048036038101906103b19190613a07565b611538565b005b3480156103c55760006000fd5b506103ce611683565b6040516103db91906147cd565b60405180910390f35b3480156103f15760006000fd5b5061040c60048036038101906104079190613cba565b61168e565b60405161041991906144ca565b60405180910390f35b34801561042f5760006000fd5b5061044a60048036038101906104459190613bb6565b6116a9565b60405161045791906144ca565b60405180910390f35b34801561046d5760006000fd5b5061048860048036038101906104839190613c64565b6116c6565b60405161049591906147cd565b60405180910390f35b3480156104ab5760006000fd5b506104b46116eb565b6040516104c191906144ca565b60405180910390f35b3480156104d75760006000fd5b506104f260048036038101906104ed9190613a07565b6116f4565b005b3480156105015760006000fd5b5061050a61183f565b60405161051791906147cd565b60405180910390f35b34801561052d5760006000fd5b5061053661184a565b60405161054391906147e9565b60405180910390f35b3480156105595760006000fd5b50610574600480360381019061056f9190613c64565b61184f565b60405161058191906147cd565b60405180910390f35b3480156105975760006000fd5b506105b260048036038101906105ad9190613c64565b611872565b6040516105c395949392919061488a565b60405180910390f35b3480156105d95760006000fd5b506105f460048036038101906105ef9190613a07565b6119a1565b005b3480156106035760006000fd5b5061060c611baf565b60405161061991906147e9565b60405180910390f35b6202000760059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610658610af263ffffffff16565b1515156106d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081526020015060200191505060405180910390fd5b6202000860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2d53d7c336040518263ffffffff1660e01b815260040161072d9190614468565b60206040518083038186803b1580156107465760006000fd5b505afa15801561075b573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190613aa1565b15156107c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b790614753565b60405180910390fd5b6107cf82611bc563ffffffff16565b6000191660016000506000600260009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020016000206000505460001916141515610851576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108489061464b565b60405180910390fd5b6000600090505b81518163ffffffff16101561091d5761089283838363ffffffff1681518110151561087f57fe5b6020026020010151611c4363ffffffff16565b925082506108a583611bc563ffffffff16565b60016000506000856000015163ffffffff1663ffffffff16815260200190815260200160002060005081909060001916905550826000015163ffffffff167f81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b626842460405160405180910390a25b8080600101915050610858565b508051600260008282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff1602179055505b5b5050565b600061096d8383611d6b63ffffffff16565b9050610974565b92915050565b610988610af263ffffffff16565b151515610a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081526020015060200191505060405180910390fd5b6000600090505b81518163ffffffff161015610a4f57610a41828263ffffffff16815181101515610a2d57fe5b602002602001015182611e8e63ffffffff16565b5b8080600101915050610a07565b50610a6081516123ed63ffffffff16565b600260048282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff1602179055505b5b50565b600060036000508263ffffffff166201000081101515610ab657fe5b90900160005b50549050610ac5565b919050565b6202000860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006202000360149054906101000a900460ff169050610b0d565b90565b610b1e610af263ffffffff16565b151515610b96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081526020015060200191505060405180910390fd5b600063ffffffff168363ffffffff161415610c2757806fffffffffffffffffffffffffffffffff1634141515610c01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf89061462a565b60405180910390fd5b610c2233600084610c173461247b63ffffffff16565b61251563ffffffff16565b6110dd565b600034141515610c6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c63906145e8565b60405180910390fd5b6202000860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b7df2b9846040518263ffffffff1660e01b8152600401610cc991906147e9565b60206040518083038186803b158015610ce25760006000fd5b505afa158015610cf7573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1b9190613aa1565b1515610d5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d53906145c7565b60405180910390fd5b60006202000860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e53cea33856040518263ffffffff1660e01b8152600401610dbb91906147e9565b60206040518083038186803b158015610dd45760006000fd5b505afa158015610de9573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d9190613a32565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610e51929190614484565b60206040518083038186803b158015610e6a5760006000fd5b505afa158015610e7f573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea39190613c8f565b9050836fffffffffffffffffffffffffffffffff168110151515610efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef39061468d565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f37919061444c565b60206040518083038186803b158015610f505760006000fd5b505afa158015610f65573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f899190613c8f565b9050610fcf833330610fb2896fffffffffffffffffffffffffffffffff1661247b63ffffffff16565b6fffffffffffffffffffffffffffffffff1661274a63ffffffff16565b1515611010576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100790614609565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161104b919061444c565b60206040518083038186803b1580156110645760006000fd5b505afa158015611079573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109d9190613c8f565b905060006110c26110b7848461292990919063ffffffff16565b61247b63ffffffff16565b90506110d6338a8a8461251563ffffffff16565b5050505050505b5b5b505050565b6110f26129b663ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1661111661126b63ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff161415156111a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281526020015060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166202000360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360006202000360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b565b60006202000360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611299565b90565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561130e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611305906146f0565b60405180910390fd5b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611349919061444c565b60206040518083038186803b1580156113625760006000fd5b505afa158015611377573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139b9190613c8f565b90506113c08686866fffffffffffffffffffffffffffffffff166129c363ffffffff16565b1515611401576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f890614732565b60405180910390fd5b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161143c919061444c565b60206040518083038186803b1580156114555760006000fd5b505afa15801561146a573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148e9190613c8f565b905060006114a5828461292990919063ffffffff16565b9050846fffffffffffffffffffffffffffffffff1681111515156114fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f5906145a6565b60405180910390fd5b61150d8161247b63ffffffff16565b935050505061151a565050505b949350505050565b600260049054906101000a900463ffffffff1681565b6115466129b663ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1661156a61126b63ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff161415156115f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281526020015060200191505060405180910390fd5b806202000760056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee32760405160405180910390a25b5b50565b620200056000505481565b60016000506020528060005260406000206000915090505481565b60006116ba82611bc563ffffffff16565b90506116c1565b919050565b62010003600050816201000081106116dd57600080fd5b90900160005b915090505481565b60006000505481565b6117026129b663ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1661172661126b63ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff161415156117b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281526020015060200191505060405180910390fd5b806202000860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab60405160405180910390a25b5b50565b620200066000505481565b600081565b60036000508162010000811061186457600080fd5b90900160005b915090505481565b620200046000506020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900463ffffffff16908060000160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119755780601f1061194a57610100808354040283529160200191611975565b820191906000526020600020905b81548152906001019060200180831161195857829003601f168201915b5050505050908060020160009054906101000a90046fffffffffffffffffffffffffffffffff16905085565b6119af6129b663ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff166119d361126b63ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16141515611a61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281526020015060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180614d416026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166202000360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806202000360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b600260009054906101000a900463ffffffff1681565b6000600282604051602001611bda9190614795565b604051602081830303815290604052604051611bf6919061441e565b602060405180830381855afa158015611c14573d600060003e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c379190613acc565b9050611c3e565b919050565b611c4b6131c0565b600183600001510163ffffffff16826000015163ffffffff16141515611ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9d906146cf565b60405180910390fd5b8260600151826080015110151515611cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cea90614564565b60405180910390fd5b611d068260600151612b8363ffffffff16565b6000611d1c846020015184611d6b63ffffffff16565b90506040518060800160405280846000015163ffffffff1681526020018460200151600019168152602001826000191681526020018460800151815260200150915050611d6556505b92915050565b60006000600284604051602001611d8291906143a6565b604051602081830303815290604052604051611d9e919061441e565b602060405180830381855afa158015611dbc573d600060003e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ddf9190613acc565b90506002818460000151856020015186604001518760800151604051602001611e0c9594939291906143c2565b604051602081830303815290604052604051611e28919061441e565b602060405180830381855afa158015611e46573d600060003e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e699190613acc565b905080506000836040015190508051808252508192505050611e885650505b92915050565b6001600050600083600001516000015163ffffffff1663ffffffff1681526020019081526020016000206000505460001916611ed38360000151611bc563ffffffff16565b60001916141515611f19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1090614585565b60405180910390fd5b600181600260049054906101000a900463ffffffff16010163ffffffff1682600001516000015163ffffffff16141515611f88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7f9061466c565b60405180910390fd5b60006202000660005054620200056000505403905060008190505b62020005600050548110156123935760006202000460005060008381526020019081526020016000206000506040518060a00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182016000508054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561210f5780601f106120e45761010080835404028352916020019161210f565b820191906000526020600020905b8154815290600101906020018083116120f257829003601f168201915b505050505081526020016002820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001505090506000816000015160ff16141515156121b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ab906146ae565b60405180910390fd5b6202000760019054906101000a900460ff1660ff16816000015160ff161415612296576202000660008181505480929190600190039190509090555062020004600050600083815260200190815260200160002060006000820160006101000a81549060ff02191690556000820160016101000a81549063ffffffff02191690556000820160056101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600061226c91906131f9565b6002820160006101000a8154906fffffffffffffffffffffffffffffffff02191690555050612384565b6202000760049054906101000a900460ff1660ff16816000015160ff161415612383576122c881612d8563ffffffff16565b6202000660008181505480929190600190039190509090555062020004600050600083815260200190815260200160002060006000820160006101000a81549060ff02191690556000820160016101000a81549063ffffffff02191690556000820160056101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600061235d91906131f9565b6002820160006101000a8154906fffffffffffffffffffffffffffffffff021916905550505b5b505b8080600101915050611fa3565b5082600001516020015160006000508190906000191690555082600001516000015163ffffffff167f374928a3faa7ad4f822f66c97ea5736e1a6b41ede9b1ee7f21cc268646fec9f260405160405180910390a2505b5050565b60006401000000008210151561246e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f313800000000000000000000000000000000000000000000000000000000000081526020015060200191505060405180910390fd5b819050612476565b919050565b600070010000000000000000000000000000000082101515612508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f313600000000000000000000000000000000000000000000000000000000000081526020015060200191505060405180910390fd5b819050612510565b919050565b6040518060a001604052806202000760019054906101000a900460ff1660ff1681526020018463ffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001838152602001826fffffffffffffffffffffffffffffffff168152602001506202000460005060006202000560005054815260200190815260200160002060005060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816001016000509080519060200190612651929190613241565b5060808201518160020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550905050806fffffffffffffffffffffffffffffffff1660036000508463ffffffff1662010000811015156126c157fe5b90900160005b8282825054019250508190909055506202000560008181505480929190600101919050909055506202000660008181505480929190600101919050909055507f985c84346e3bff1de514922d1bf88270b4a50c525b86443aeeb1441c842e38158385848460405161273b9493929190614805565b60405180910390a15b50505050565b6000600060008673ffffffffffffffffffffffffffffffffffffffff16868686604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040516020818303038152906040527f23b872dd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310151561286757805182525b602082019150602081019050602083039250612841565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146128c9576040519150601f19603f3d011682016040523d82523d6000602084013e6128ce565b606091505b5091509150600060008251148061290857508180602001905160208110156128f65760006000fd5b81019080805190602001909291905050505b90508280156129145750805b9350505050612921565050505b949350505050565b60008282111515156129a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081526020015060200191505060405180910390fd5b81830390506129b0565b92915050565b60003390506129c0565b90565b6000600060008573ffffffffffffffffffffffffffffffffffffffff168585604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083101515612ac257805182525b602082019150602081019050602083039250612a9c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612b24576040519150601f19603f3d011682016040523d82523d6000602084013e612b29565b606091505b50915091506000600082511480612b635750818060200190516020811015612b515760006000fd5b81019080805190602001909291905050505b9050828015612b6f5750805b9350505050612b7c565050505b9392505050565b6000600090505b81518163ffffffff161015612d80576202000760049054906101000a900460ff1660ff16828263ffffffff16815181101515612bc257fe5b60200260200101516000015160ff16141515612c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0a90614774565b60405180910390fd5b818163ffffffff16815181101515612c2757fe5b60200260200101516202000460005060006202000560005054815260200190815260200160002060005060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816001016000509080519060200190612cff929190613241565b5060808201518160020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050506202000560008181505480929190600101919050909055506202000660008181505480929190600101919050909055505b8080600101915050612b8a565b505b50565b6202000760049054906101000a900460ff1660ff16816000015160ff16141515612de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ddb90614711565b60405180910390fd5b6202000860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b7df2b982602001516040518263ffffffff1660e01b8152600401612e4591906147e9565b60206040518083038186803b158015612e5e5760006000fd5b505afa158015612e73573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e979190613aa1565b1515612ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ecf906145c7565b60405180910390fd5b600060009050600063ffffffff16826020015163ffffffff161415612f3057600082604001519050612f268184608001516fffffffffffffffffffffffffffffffff1661313d63ffffffff16565b915081505061309e565b60006202000860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e53cea3384602001516040518263ffffffff1660e01b8152600401612f9391906147e9565b60206040518083038186803b158015612fac5760006000fd5b505afa158015612fc1573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe59190613a32565b90503073ffffffffffffffffffffffffffffffffffffffff16638ee1a74e62030d40838660400151876080015188608001516040518663ffffffff1660e01b815260040161303694939291906144e6565b602060405180830381600088803b1580156130515760006000fd5b5087f19350505050801561308357506040513d601f19601f820116820180604052508101906130809190613c39565b60015b613094575b6000915081505b61309c565b506001915081505b505b80156131385781608001516fffffffffffffffffffffffffffffffff1662010003600050836020015163ffffffff1662010000811015156130db57fe5b90900160005b8282825054019250508190909055507f1cda6b03be2faab4c7e14e89e87c872b8548c10e69d81efd1ba5f0a219e0403782602001518360400151846080015160405161312f93929190614852565b60405180910390a15b505b50565b600060008373ffffffffffffffffffffffffffffffffffffffff1662030d408460405161316990614436565b600060405180830381858888f193505050503d80600081146131a7576040519150601f19603f3d011682016040523d82523d6000602084013e6131ac565b606091505b50509050809150506131ba56505b92915050565b6040518060800160405280600063ffffffff16815260200160006000191681526020016000600019168152602001600081526020015090565b50805460018160011615610100020316600290046000825580601f1061321f575061323e565b601f01602090049060005260206000209081019061323d91906132d4565b5b50565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261327757600085556132c3565b82601f1061329057805160ff19168380011785556132c3565b828001600101855582156132c3579182015b828111156132c257825182600050909055916020019190600101906132a2565b5b5090506132d091906132d4565b5090565b6132d9565b808211156132f357600081815060009055506001016132d9565b509056614d3f565b600061330e61330984614917565b6148e5565b905080828560408602820111156133255760006000fd5b60005b85811015613356578161333b8882613657565b8452602084019350604083019250505b600181019050613328565b5050505b9392505050565b600061337461336f8461493e565b6148e5565b9050808382526020820190508260005b858110156133b5578135850161339a88826137ac565b8452602084019350602083019250505b600181019050613384565b5050505b9392505050565b60006133d36133ce8461496b565b6148e5565b9050808382526020820190508260005b8581101561341457813585016133f98882613868565b8452602084019350602083019250505b6001810190506133e3565b5050505b9392505050565b600061343261342d84614998565b6148e5565b90508083825260208201905082856101808602820111156134535760006000fd5b60005b858110156134855781613469888261390b565b845260208401935061018083019250505b600181019050613456565b5050505b9392505050565b60006134a361349e846149c5565b6148e5565b905080828560208602820111156134ba5760006000fd5b60005b858110156134eb57816134d088826139af565b8452602084019350602083019250505b6001810190506134bd565b5050505b9392505050565b6000613509613504846149ec565b6148e5565b9050828152602081018484840111156135225760006000fd5b61352d848285614bd5565b505b9392505050565b600061354961354484614a1d565b6148e5565b9050828152602081018484840111156135625760006000fd5b61356d848285614bd5565b505b9392505050565b60008135905061358581614c67565b5b92915050565b60008151905061359b81614c67565b5b92915050565b600082601f83011215156135b65760006000fd5b60026135c38482856132fb565b9150505b92915050565b600082601f83011215156135e15760006000fd5b81356135f1848260208601613361565b9150505b92915050565b600082601f830112151561360f5760006000fd5b813561361f8482602086016133c0565b9150505b92915050565b600082601f830112151561363d5760006000fd5b813561364d84826020860161341f565b9150505b92915050565b600082601f830112151561366b5760006000fd5b6002613678848285613490565b9150505b92915050565b60008151905061369181614c82565b5b92915050565b6000813590506136a781614c9d565b5b92915050565b6000815190506136bd81614c9d565b5b92915050565b600082601f83011215156136d85760006000fd5b81356136e88482602086016134f6565b9150505b92915050565b60008135905061370181614cb8565b5b92915050565b600082601f830112151561371c5760006000fd5b813561372c848260208601613536565b9150505b92915050565b6000608082840312156137495760006000fd5b61375360806148e5565b90506000613763848285016139db565b600083015250602061377784828501613698565b602083015250604061378b84828501613698565b604083015250606061379f848285016139af565b6060830152505b92915050565b600060a082840312156137bf5760006000fd5b6137c960a06148e5565b905060006137d9848285016139db565b60008301525060206137ed84828501613698565b602083015250604082013567ffffffffffffffff81111561380e5760006000fd5b61381a848285016136c4565b604083015250606082013567ffffffffffffffff81111561383b5760006000fd5b613847848285016135fb565b606083015250608061385b848285016139af565b6080830152505b92915050565b600060a0828403121561387b5760006000fd5b61388560a06148e5565b90506000613895848285016139f1565b60008301525060206138a9848285016139db565b60208301525060406138bd84828501613576565b604083015250606082013567ffffffffffffffff8111156138de5760006000fd5b6138ea84828501613708565b60608301525060806138fe84828501613983565b6080830152505b92915050565b6000610180828403121561391f5760006000fd5b61392960806148e5565b9050600061393984828501613736565b600083015250608061394d84828501613657565b60208301525060c0613961848285016135a2565b60408301525061014061397684828501613657565b6060830152505b92915050565b60008135905061399281614cd3565b5b92915050565b6000815190506139a881614cd3565b5b92915050565b6000813590506139be81614cee565b5b92915050565b6000815190506139d481614cee565b5b92915050565b6000813590506139ea81614d09565b5b92915050565b600081359050613a0081614d24565b5b92915050565b600060208284031215613a1a5760006000fd5b6000613a2884828501613576565b9150505b92915050565b600060208284031215613a455760006000fd5b6000613a538482850161358c565b9150505b92915050565b600060208284031215613a705760006000fd5b600082013567ffffffffffffffff811115613a8b5760006000fd5b613a9784828501613629565b9150505b92915050565b600060208284031215613ab45760006000fd5b6000613ac284828501613682565b9150505b92915050565b600060208284031215613adf5760006000fd5b6000613aed848285016136ae565b9150505b92915050565b6000600060408385031215613b0c5760006000fd5b6000613b1a85828601613698565b925050602083013567ffffffffffffffff811115613b385760006000fd5b613b44858286016137ac565b9150505b9250929050565b600060006000600060808587031215613b685760006000fd5b6000613b76878288016136f2565b9450506020613b8787828801613576565b9350506040613b9887828801613983565b9250506060613ba987828801613983565b9150505b92959194509250565b600060808284031215613bc95760006000fd5b6000613bd784828501613736565b9150505b92915050565b6000600060a08385031215613bf65760006000fd5b6000613c0485828601613736565b925050608083013567ffffffffffffffff811115613c225760006000fd5b613c2e858286016135cd565b9150505b9250929050565b600060208284031215613c4c5760006000fd5b6000613c5a84828501613999565b9150505b92915050565b600060208284031215613c775760006000fd5b6000613c85848285016139af565b9150505b92915050565b600060208284031215613ca25760006000fd5b6000613cb0848285016139c5565b9150505b92915050565b600060208284031215613ccd5760006000fd5b6000613cdb848285016139db565b9150505b92915050565b60006000600060608486031215613cfc5760006000fd5b6000613d0a868287016139db565b935050602084013567ffffffffffffffff811115613d285760006000fd5b613d3486828701613708565b9250506040613d4586828701613983565b9150505b9250925092565b613d5981614b2a565b82525b5050565b613d6981614a84565b82525b5050565b613d7981614a97565b82525b5050565b613d8981614aa4565b82525b5050565b613d9981614aa4565b82525b5050565b613db1613dac82614aa4565b614c1a565b82525b5050565b6000613dc382614a4e565b613dcd8185614a66565b9350613ddd818560208601614be5565b8084019150505b92915050565b613df381614b3d565b82525b5050565b613e0381614b63565b82525b5050565b613e1381614b89565b82525b5050565b6000613e2582614a5a565b613e2f8185614a72565b9350613e3f818560208601614be5565b613e4881614c47565b84019150505b92915050565b6000613e61601183614a72565b91507f696e76616c69642074696d657374616d7000000000000000000000000000000060008301526020820190505b919050565b6000613ea2601383614a72565b91507f626c6f636b206e6f7420636f6d6d69747465640000000000000000000000000060008301526020820190505b919050565b6000613ee3600183614a72565b91507f370000000000000000000000000000000000000000000000000000000000000060008301526020820190505b919050565b6000613f24601083614a72565b91507f696e76616c69642061737365742069640000000000000000000000000000000060008301526020820190505b919050565b6000613f65601483614a72565b91507f696e76616c6964207061796d656e74207479706500000000000000000000000060008301526020820190505b919050565b6000613fa6601483614a72565b91507f7472616e73666572206572633230206572726f7200000000000000000000000060008301526020820190505b919050565b6000613fe7601883614a72565b91507f696e76616c696420616d6f756e74206f6620617373657473000000000000000060008301526020820190505b919050565b6000614028601283614a72565b91507f696e76616c6964206c61737420626c6f636b000000000000000000000000000060008301526020820190505b919050565b6000614069601483614a72565b91507f696e76616c696420626c6f636b206e756d62657200000000000000000000000060008301526020820190505b919050565b60006140aa601483614a72565b91507f6e6f7420656e6f75676820616c6c6f77616e636500000000000000000000000060008301526020820190505b919050565b60006140eb601d83614a72565b91507f6f6e2d636861696e206f7065726174696f6e206e6f742065786973747300000060008301526020820190505b919050565b600061412c600083614a66565b91506000820190505b919050565b6000614147601183614a72565b91507f696e76616c6964206e657720626c6f636b00000000000000000000000000000060008301526020820190505b919050565b6000614188600183614a72565b91507f350000000000000000000000000000000000000000000000000000000000000060008301526020820190505b919050565b60006141c9601683614a72565b91507f696e76616c6964206f7065726174696f6e20747970650000000000000000000060008301526020820190505b919050565b600061420a600183614a72565b91507f360000000000000000000000000000000000000000000000000000000000000060008301526020820190505b919050565b600061424b601083614a72565b91507f696e76616c6964206f70657261746f720000000000000000000000000000000060008301526020820190505b919050565b600061428c601883614a72565b91507f696e76616c6964207472616e73616374696f6e2074797065000000000000000060008301526020820190505b919050565b6080820160008201516142d6600085018261435e565b5060208201516142e96020850182613d80565b5060408201516142fc6040850182613d80565b50606082015161430f6060850182614326565b50505b5050565b61431f81614ac2565b82525b5050565b61432f81614b00565b82525b5050565b61433f81614b00565b82525b5050565b61435761435282614b00565b614c25565b82525b5050565b61436781614b0b565b82525b5050565b61437781614b0b565b82525b5050565b61438f61438a82614b0b565b614c30565b82525b5050565b61439f81614b1c565b82525b5050565b60006143b28284613da0565b6020820191508190505b92915050565b60006143ce8288613da0565b6020820191506143de828761437e565b6004820191506143ee8286613da0565b6020820191506143fe8285613db8565b915061440a8284614346565b6020820191508190505b9695505050505050565b600061442a8284613db8565b91508190505b92915050565b60006144418261411f565b91508190505b919050565b60006020820190506144616000830184613d60565b5b92915050565b600060208201905061447d6000830184613d50565b5b92915050565b60006040820190506144996000830185613d50565b6144a66020830184613d60565b5b9392505050565b60006020820190506144c36000830184613d70565b5b92915050565b60006020820190506144df6000830184613d90565b5b92915050565b60006080820190506144fb6000830187613dea565b6145086020830186613d60565b6145156040830185614316565b6145226060830184614316565b5b95945050505050565b60006020820190506145416000830184613dfa565b5b92915050565b600060208201905061455d6000830184613e0a565b5b92915050565b6000602082019050818103600083015261457d81613e54565b90505b919050565b6000602082019050818103600083015261459e81613e95565b90505b919050565b600060208201905081810360008301526145bf81613ed6565b90505b919050565b600060208201905081810360008301526145e081613f17565b90505b919050565b6000602082019050818103600083015261460181613f58565b90505b919050565b6000602082019050818103600083015261462281613f99565b90505b919050565b6000602082019050818103600083015261464381613fda565b90505b919050565b600060208201905081810360008301526146648161401b565b90505b919050565b600060208201905081810360008301526146858161405c565b90505b919050565b600060208201905081810360008301526146a68161409d565b90505b919050565b600060208201905081810360008301526146c7816140de565b90505b919050565b600060208201905081810360008301526146e88161413a565b90505b919050565b600060208201905081810360008301526147098161417b565b90505b919050565b6000602082019050818103600083015261472a816141bc565b90505b919050565b6000602082019050818103600083015261474b816141fd565b90505b919050565b6000602082019050818103600083015261476c8161423e565b90505b919050565b6000602082019050818103600083015261478d8161427f565b90505b919050565b60006080820190506147aa60008301846142c0565b5b92915050565b60006020820190506147c66000830184614316565b5b92915050565b60006020820190506147e26000830184614336565b5b92915050565b60006020820190506147fe600083018461436e565b5b92915050565b600060808201905061481a600083018761436e565b6148276020830186613d60565b81810360408301526148398185613e1a565b90506148486060830184614316565b5b95945050505050565b6000606082019050614867600083018661436e565b6148746020830185613d60565b6148816040830184614316565b5b949350505050565b600060a08201905061489f6000830188614396565b6148ac602083018761436e565b6148b96040830186613d60565b81810360608301526148cb8185613e1a565b90506148da6080830184614316565b5b9695505050505050565b6000604051905081810181811067ffffffffffffffff8211171561490c5761490b614c43565b5b80604052505b919050565b600067ffffffffffffffff82111561493257614931614c43565b5b6020820290505b919050565b600067ffffffffffffffff82111561495957614958614c43565b5b6020820290506020810190505b919050565b600067ffffffffffffffff82111561498657614985614c43565b5b6020820290506020810190505b919050565b600067ffffffffffffffff8211156149b3576149b2614c43565b5b6020820290506020810190505b919050565b600067ffffffffffffffff8211156149e0576149df614c43565b5b6020820290505b919050565b600067ffffffffffffffff821115614a0757614a06614c43565b5b601f19601f83011690506020810190505b919050565b600067ffffffffffffffff821115614a3857614a37614c43565b5b601f19601f83011690506020810190505b919050565b6000815190505b919050565b6000815190505b919050565b60008190505b92915050565b60008282526020820190505b92915050565b6000614a8f82614adf565b90505b919050565b600081151590505b919050565b60008190505b919050565b6000614aba82614a84565b90505b919050565b60006fffffffffffffffffffffffffffffffff821690505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b600063ffffffff821690505b919050565b600060ff821690505b919050565b6000614b3582614baf565b90505b919050565b6000614b4882614b50565b90505b919050565b6000614b5b82614adf565b90505b919050565b6000614b6e82614b76565b90505b919050565b6000614b8182614adf565b90505b919050565b6000614b9482614b9c565b90505b919050565b6000614ba782614adf565b90505b919050565b6000614bba82614bc2565b90505b919050565b6000614bcd82614adf565b90505b919050565b828183376000838301525b505050565b60005b83811015614c045780820151818401525b602081019050614be8565b83811115614c13576000848401525b505b505050565b60008190505b919050565b60008190505b919050565b6000614c3b82614c59565b90505b919050565bfe5b565b6000601f19601f83011690505b919050565b60008160e01b90505b919050565b614c7081614a84565b81141515614c7e5760006000fd5b5b50565b614c8b81614a97565b81141515614c995760006000fd5b5b50565b614ca681614aa4565b81141515614cb45760006000fd5b5b50565b614cc181614aaf565b81141515614ccf5760006000fd5b5b50565b614cdc81614ac2565b81141515614cea5760006000fd5b5b50565b614cf781614b00565b81141515614d055760006000fd5b5b50565b614d1281614b0b565b81141515614d205760006000fd5b5b50565b614d2d81614b1c565b81141515614d3b5760006000fd5b5b50565bfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220077ce5009786d598e92415cd7f7ea117641e3473e90ef7bb756dca037d36127564736f6c63430007060033"

// DeployZecrey deploys a new Ethereum contract, binding an instance of Zecrey to it.
func DeployZecrey(auth *bind.TransactOpts, backend bind.ContractBackend, _verifierAddress common.Address, _governanceAddress common.Address) (common.Address, *types.Transaction, *Zecrey, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ZecreyBin), backend, _verifierAddress, _governanceAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// Zecrey is an auto generated Go binding around an Ethereum contract.
type Zecrey struct {
	ZecreyCaller     // Read-only binding to the contract
	ZecreyTransactor // Write-only binding to the contract
	ZecreyFilterer   // Log filterer for contract events
}

// ZecreyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZecreyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZecreyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZecreyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZecreySession struct {
	Contract     *Zecrey           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZecreyCallerSession struct {
	Contract *ZecreyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ZecreyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZecreyTransactorSession struct {
	Contract     *ZecreyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZecreyRaw struct {
	Contract *Zecrey // Generic contract binding to access the raw methods on
}

// ZecreyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZecreyCallerRaw struct {
	Contract *ZecreyCaller // Generic read-only contract binding to access the raw methods on
}

// ZecreyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZecreyTransactorRaw struct {
	Contract *ZecreyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZecrey creates a new instance of Zecrey, bound to a specific deployed contract.
func NewZecrey(address common.Address, backend bind.ContractBackend) (*Zecrey, error) {
	contract, err := bindZecrey(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// NewZecreyCaller creates a new read-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyCaller(address common.Address, caller bind.ContractCaller) (*ZecreyCaller, error) {
	contract, err := bindZecrey(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyCaller{contract: contract}, nil
}

// NewZecreyTransactor creates a new write-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyTransactor(address common.Address, transactor bind.ContractTransactor) (*ZecreyTransactor, error) {
	contract, err := bindZecrey(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyTransactor{contract: contract}, nil
}

// NewZecreyFilterer creates a new log filterer instance of Zecrey, bound to a specific deployed contract.
func NewZecreyFilterer(address common.Address, filterer bind.ContractFilterer) (*ZecreyFilterer, error) {
	contract, err := bindZecrey(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZecreyFilterer{contract: contract}, nil
}

// bindZecrey binds a generic wrapper to an already deployed contract.
func bindZecrey(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.ZecreyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transact(opts, method, params...)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCaller) AccountRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "accountRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreySession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// AssetETH is a free data retrieval call binding the contract method 0xbb64db2b.
//
// Solidity: function assetETH() view returns(uint32)
func (_Zecrey *ZecreyCaller) AssetETH(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "assetETH")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// AssetETH is a free data retrieval call binding the contract method 0xbb64db2b.
//
// Solidity: function assetETH() view returns(uint32)
func (_Zecrey *ZecreySession) AssetETH() (uint32, error) {
	return _Zecrey.Contract.AssetETH(&_Zecrey.CallOpts)
}

// AssetETH is a free data retrieval call binding the contract method 0xbb64db2b.
//
// Solidity: function assetETH() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) AssetETH() (uint32, error) {
	return _Zecrey.Contract.AssetETH(&_Zecrey.CallOpts)
}

// GetCommitment is a free data retrieval call binding the contract method 0x49f05457.
//
// Solidity: function getCommitment(bytes32 root, (uint32,bytes32,bytes,(uint8,uint32,address,string,uint128)[],uint256) _newBlock) pure returns(bytes32)
func (_Zecrey *ZecreyCaller) GetCommitment(opts *bind.CallOpts, root [32]byte, _newBlock ZecreyCommitBlock) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getCommitment", root, _newBlock)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetCommitment is a free data retrieval call binding the contract method 0x49f05457.
//
// Solidity: function getCommitment(bytes32 root, (uint32,bytes32,bytes,(uint8,uint32,address,string,uint128)[],uint256) _newBlock) pure returns(bytes32)
func (_Zecrey *ZecreySession) GetCommitment(root [32]byte, _newBlock ZecreyCommitBlock) ([32]byte, error) {
	return _Zecrey.Contract.GetCommitment(&_Zecrey.CallOpts, root, _newBlock)
}

// GetCommitment is a free data retrieval call binding the contract method 0x49f05457.
//
// Solidity: function getCommitment(bytes32 root, (uint32,bytes32,bytes,(uint8,uint32,address,string,uint128)[],uint256) _newBlock) pure returns(bytes32)
func (_Zecrey *ZecreyCallerSession) GetCommitment(root [32]byte, _newBlock ZecreyCommitBlock) ([32]byte, error) {
	return _Zecrey.Contract.GetCommitment(&_Zecrey.CallOpts, root, _newBlock)
}

// GetHash is a free data retrieval call binding the contract method 0x9fe85908.
//
// Solidity: function getHash((uint32,bytes32,bytes32,uint256) a) pure returns(bytes32)
func (_Zecrey *ZecreyCaller) GetHash(opts *bind.CallOpts, a StorageBlock) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getHash", a)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetHash is a free data retrieval call binding the contract method 0x9fe85908.
//
// Solidity: function getHash((uint32,bytes32,bytes32,uint256) a) pure returns(bytes32)
func (_Zecrey *ZecreySession) GetHash(a StorageBlock) ([32]byte, error) {
	return _Zecrey.Contract.GetHash(&_Zecrey.CallOpts, a)
}

// GetHash is a free data retrieval call binding the contract method 0x9fe85908.
//
// Solidity: function getHash((uint32,bytes32,bytes32,uint256) a) pure returns(bytes32)
func (_Zecrey *ZecreyCallerSession) GetHash(a StorageBlock) ([32]byte, error) {
	return _Zecrey.Contract.GetHash(&_Zecrey.CallOpts, a)
}

// GetTotalDeposited is a free data retrieval call binding the contract method 0x5a8bd54c.
//
// Solidity: function getTotalDeposited(uint32 assetId) view returns(uint256)
func (_Zecrey *ZecreyCaller) GetTotalDeposited(opts *bind.CallOpts, assetId uint32) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getTotalDeposited", assetId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalDeposited is a free data retrieval call binding the contract method 0x5a8bd54c.
//
// Solidity: function getTotalDeposited(uint32 assetId) view returns(uint256)
func (_Zecrey *ZecreySession) GetTotalDeposited(assetId uint32) (*big.Int, error) {
	return _Zecrey.Contract.GetTotalDeposited(&_Zecrey.CallOpts, assetId)
}

// GetTotalDeposited is a free data retrieval call binding the contract method 0x5a8bd54c.
//
// Solidity: function getTotalDeposited(uint32 assetId) view returns(uint256)
func (_Zecrey *ZecreyCallerSession) GetTotalDeposited(assetId uint32) (*big.Int, error) {
	return _Zecrey.Contract.GetTotalDeposited(&_Zecrey.CallOpts, assetId)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Zecrey *ZecreyCaller) Governance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "governance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Zecrey *ZecreySession) Governance() (common.Address, error) {
	return _Zecrey.Contract.Governance(&_Zecrey.CallOpts)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Zecrey *ZecreyCallerSession) Governance() (common.Address, error) {
	return _Zecrey.Contract.Governance(&_Zecrey.CallOpts)
}

// OnchainOperations is a free data retrieval call binding the contract method 0xe21cc0b7.
//
// Solidity: function onchainOperations(uint256 ) view returns(uint8 txType, uint32 assetId, address nativeAddr, string zecreyAddr, uint128 amount)
func (_Zecrey *ZecreyCaller) OnchainOperations(opts *bind.CallOpts, arg0 *big.Int) (struct {
	TxType     uint8
	AssetId    uint32
	NativeAddr common.Address
	ZecreyAddr string
	Amount     *big.Int
}, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOperations", arg0)

	outstruct := new(struct {
		TxType     uint8
		AssetId    uint32
		NativeAddr common.Address
		ZecreyAddr string
		Amount     *big.Int
	})

	outstruct.TxType = out[0].(uint8)
	outstruct.AssetId = out[1].(uint32)
	outstruct.NativeAddr = out[2].(common.Address)
	outstruct.ZecreyAddr = out[3].(string)
	outstruct.Amount = out[4].(*big.Int)

	return *outstruct, err

}

// OnchainOperations is a free data retrieval call binding the contract method 0xe21cc0b7.
//
// Solidity: function onchainOperations(uint256 ) view returns(uint8 txType, uint32 assetId, address nativeAddr, string zecreyAddr, uint128 amount)
func (_Zecrey *ZecreySession) OnchainOperations(arg0 *big.Int) (struct {
	TxType     uint8
	AssetId    uint32
	NativeAddr common.Address
	ZecreyAddr string
	Amount     *big.Int
}, error) {
	return _Zecrey.Contract.OnchainOperations(&_Zecrey.CallOpts, arg0)
}

// OnchainOperations is a free data retrieval call binding the contract method 0xe21cc0b7.
//
// Solidity: function onchainOperations(uint256 ) view returns(uint8 txType, uint32 assetId, address nativeAddr, string zecreyAddr, uint128 amount)
func (_Zecrey *ZecreyCallerSession) OnchainOperations(arg0 *big.Int) (struct {
	TxType     uint8
	AssetId    uint32
	NativeAddr common.Address
	ZecreyAddr string
	Amount     *big.Int
}, error) {
	return _Zecrey.Contract.OnchainOperations(&_Zecrey.CallOpts, arg0)
}

// OnchainOperationsCount is a free data retrieval call binding the contract method 0x987f5f7a.
//
// Solidity: function onchainOperationsCount() view returns(uint256)
func (_Zecrey *ZecreyCaller) OnchainOperationsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOperationsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OnchainOperationsCount is a free data retrieval call binding the contract method 0x987f5f7a.
//
// Solidity: function onchainOperationsCount() view returns(uint256)
func (_Zecrey *ZecreySession) OnchainOperationsCount() (*big.Int, error) {
	return _Zecrey.Contract.OnchainOperationsCount(&_Zecrey.CallOpts)
}

// OnchainOperationsCount is a free data retrieval call binding the contract method 0x987f5f7a.
//
// Solidity: function onchainOperationsCount() view returns(uint256)
func (_Zecrey *ZecreyCallerSession) OnchainOperationsCount() (*big.Int, error) {
	return _Zecrey.Contract.OnchainOperationsCount(&_Zecrey.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Zecrey *ZecreyCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Zecrey *ZecreySession) Owner() (common.Address, error) {
	return _Zecrey.Contract.Owner(&_Zecrey.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Zecrey *ZecreyCallerSession) Owner() (common.Address, error) {
	return _Zecrey.Contract.Owner(&_Zecrey.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Zecrey *ZecreyCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Zecrey *ZecreySession) Paused() (bool, error) {
	return _Zecrey.Contract.Paused(&_Zecrey.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Zecrey *ZecreyCallerSession) Paused() (bool, error) {
	return _Zecrey.Contract.Paused(&_Zecrey.CallOpts)
}

// PendingOperationsCount is a free data retrieval call binding the contract method 0xb6ebb133.
//
// Solidity: function pendingOperationsCount() view returns(uint256)
func (_Zecrey *ZecreyCaller) PendingOperationsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "pendingOperationsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PendingOperationsCount is a free data retrieval call binding the contract method 0xb6ebb133.
//
// Solidity: function pendingOperationsCount() view returns(uint256)
func (_Zecrey *ZecreySession) PendingOperationsCount() (*big.Int, error) {
	return _Zecrey.Contract.PendingOperationsCount(&_Zecrey.CallOpts)
}

// PendingOperationsCount is a free data retrieval call binding the contract method 0xb6ebb133.
//
// Solidity: function pendingOperationsCount() view returns(uint256)
func (_Zecrey *ZecreyCallerSession) PendingOperationsCount() (*big.Int, error) {
	return _Zecrey.Contract.PendingOperationsCount(&_Zecrey.CallOpts)
}

// StoredBlockHashes is a free data retrieval call binding the contract method 0x9ba0d146.
//
// Solidity: function storedBlockHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCaller) StoredBlockHashes(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "storedBlockHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StoredBlockHashes is a free data retrieval call binding the contract method 0x9ba0d146.
//
// Solidity: function storedBlockHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreySession) StoredBlockHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHashes(&_Zecrey.CallOpts, arg0)
}

// StoredBlockHashes is a free data retrieval call binding the contract method 0x9ba0d146.
//
// Solidity: function storedBlockHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) StoredBlockHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHashes(&_Zecrey.CallOpts, arg0)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksCommitted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksCommitted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksProcessed is a free data retrieval call binding the contract method 0x9640ebde.
//
// Solidity: function totalBlocksProcessed() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksProcessed(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksProcessed")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksProcessed is a free data retrieval call binding the contract method 0x9640ebde.
//
// Solidity: function totalBlocksProcessed() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksProcessed() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksProcessed(&_Zecrey.CallOpts)
}

// TotalBlocksProcessed is a free data retrieval call binding the contract method 0x9640ebde.
//
// Solidity: function totalBlocksProcessed() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksProcessed() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksProcessed(&_Zecrey.CallOpts)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xc6c62390.
//
// Solidity: function totalDeposited(uint256 ) view returns(uint256)
func (_Zecrey *ZecreyCaller) TotalDeposited(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalDeposited", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalDeposited is a free data retrieval call binding the contract method 0xc6c62390.
//
// Solidity: function totalDeposited(uint256 ) view returns(uint256)
func (_Zecrey *ZecreySession) TotalDeposited(arg0 *big.Int) (*big.Int, error) {
	return _Zecrey.Contract.TotalDeposited(&_Zecrey.CallOpts, arg0)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xc6c62390.
//
// Solidity: function totalDeposited(uint256 ) view returns(uint256)
func (_Zecrey *ZecreyCallerSession) TotalDeposited(arg0 *big.Int) (*big.Int, error) {
	return _Zecrey.Contract.TotalDeposited(&_Zecrey.CallOpts, arg0)
}

// TotalWithdrawn is a free data retrieval call binding the contract method 0xa009f7e4.
//
// Solidity: function totalWithdrawn(uint256 ) view returns(uint256)
func (_Zecrey *ZecreyCaller) TotalWithdrawn(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalWithdrawn", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawn is a free data retrieval call binding the contract method 0xa009f7e4.
//
// Solidity: function totalWithdrawn(uint256 ) view returns(uint256)
func (_Zecrey *ZecreySession) TotalWithdrawn(arg0 *big.Int) (*big.Int, error) {
	return _Zecrey.Contract.TotalWithdrawn(&_Zecrey.CallOpts, arg0)
}

// TotalWithdrawn is a free data retrieval call binding the contract method 0xa009f7e4.
//
// Solidity: function totalWithdrawn(uint256 ) view returns(uint256)
func (_Zecrey *ZecreyCallerSession) TotalWithdrawn(arg0 *big.Int) (*big.Int, error) {
	return _Zecrey.Contract.TotalWithdrawn(&_Zecrey.CallOpts, arg0)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Zecrey *ZecreyCaller) Verifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Zecrey *ZecreySession) Verifier() (common.Address, error) {
	return _Zecrey.Contract.Verifier(&_Zecrey.CallOpts)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Zecrey *ZecreyCallerSession) Verifier() (common.Address, error) {
	return _Zecrey.Contract.Verifier(&_Zecrey.CallOpts)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactor) TransferERC20(opts *bind.TransactOpts, _token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "_transferERC20", _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreySession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactorSession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x358ca6d4.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256) _lastCommittedBlockData, (uint32,bytes32,bytes,(uint8,uint32,address,string,uint128)[],uint256)[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactor) CommitBlocks(opts *bind.TransactOpts, _lastCommittedBlockData StorageBlock, _newBlocksData []ZecreyCommitBlock) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "commitBlocks", _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x358ca6d4.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256) _lastCommittedBlockData, (uint32,bytes32,bytes,(uint8,uint32,address,string,uint128)[],uint256)[] _newBlocksData) returns()
func (_Zecrey *ZecreySession) CommitBlocks(_lastCommittedBlockData StorageBlock, _newBlocksData []ZecreyCommitBlock) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x358ca6d4.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256) _lastCommittedBlockData, (uint32,bytes32,bytes,(uint8,uint32,address,string,uint128)[],uint256)[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactorSession) CommitBlocks(_lastCommittedBlockData StorageBlock, _newBlocksData []ZecreyCommitBlock) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// Deposit is a paid mutator transaction binding the contract method 0x6567be15.
//
// Solidity: function deposit(uint32 assetId, string zecreyAddr, uint128 amount) payable returns()
func (_Zecrey *ZecreyTransactor) Deposit(opts *bind.TransactOpts, assetId uint32, zecreyAddr string, amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "deposit", assetId, zecreyAddr, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x6567be15.
//
// Solidity: function deposit(uint32 assetId, string zecreyAddr, uint128 amount) payable returns()
func (_Zecrey *ZecreySession) Deposit(assetId uint32, zecreyAddr string, amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.Deposit(&_Zecrey.TransactOpts, assetId, zecreyAddr, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x6567be15.
//
// Solidity: function deposit(uint32 assetId, string zecreyAddr, uint128 amount) payable returns()
func (_Zecrey *ZecreyTransactorSession) Deposit(assetId uint32, zecreyAddr string, amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.Deposit(&_Zecrey.TransactOpts, assetId, zecreyAddr, amount)
}

// ProcessBlocks is a paid mutator transaction binding the contract method 0x59e5157e.
//
// Solidity: function processBlocks(((uint32,bytes32,bytes32,uint256),uint256[2],uint256[2][2],uint256[2])[] _blocks) returns()
func (_Zecrey *ZecreyTransactor) ProcessBlocks(opts *bind.TransactOpts, _blocks []ZecreyProcessBlock) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "processBlocks", _blocks)
}

// ProcessBlocks is a paid mutator transaction binding the contract method 0x59e5157e.
//
// Solidity: function processBlocks(((uint32,bytes32,bytes32,uint256),uint256[2],uint256[2][2],uint256[2])[] _blocks) returns()
func (_Zecrey *ZecreySession) ProcessBlocks(_blocks []ZecreyProcessBlock) (*types.Transaction, error) {
	return _Zecrey.Contract.ProcessBlocks(&_Zecrey.TransactOpts, _blocks)
}

// ProcessBlocks is a paid mutator transaction binding the contract method 0x59e5157e.
//
// Solidity: function processBlocks(((uint32,bytes32,bytes32,uint256),uint256[2],uint256[2][2],uint256[2])[] _blocks) returns()
func (_Zecrey *ZecreyTransactorSession) ProcessBlocks(_blocks []ZecreyProcessBlock) (*types.Transaction, error) {
	return _Zecrey.Contract.ProcessBlocks(&_Zecrey.TransactOpts, _blocks)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Zecrey *ZecreyTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Zecrey *ZecreySession) RenounceOwnership() (*types.Transaction, error) {
	return _Zecrey.Contract.RenounceOwnership(&_Zecrey.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Zecrey *ZecreyTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Zecrey.Contract.RenounceOwnership(&_Zecrey.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Zecrey *ZecreyTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Zecrey *ZecreySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferOwnership(&_Zecrey.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Zecrey *ZecreyTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferOwnership(&_Zecrey.TransactOpts, newOwner)
}

// UpdateGovernance is a paid mutator transaction binding the contract method 0xb2561263.
//
// Solidity: function updateGovernance(address _governanceAddress) returns()
func (_Zecrey *ZecreyTransactor) UpdateGovernance(opts *bind.TransactOpts, _governanceAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "updateGovernance", _governanceAddress)
}

// UpdateGovernance is a paid mutator transaction binding the contract method 0xb2561263.
//
// Solidity: function updateGovernance(address _governanceAddress) returns()
func (_Zecrey *ZecreySession) UpdateGovernance(_governanceAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.UpdateGovernance(&_Zecrey.TransactOpts, _governanceAddress)
}

// UpdateGovernance is a paid mutator transaction binding the contract method 0xb2561263.
//
// Solidity: function updateGovernance(address _governanceAddress) returns()
func (_Zecrey *ZecreyTransactorSession) UpdateGovernance(_governanceAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.UpdateGovernance(&_Zecrey.TransactOpts, _governanceAddress)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifierAddress) returns()
func (_Zecrey *ZecreyTransactor) UpdateVerifier(opts *bind.TransactOpts, _verifierAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "updateVerifier", _verifierAddress)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifierAddress) returns()
func (_Zecrey *ZecreySession) UpdateVerifier(_verifierAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.UpdateVerifier(&_Zecrey.TransactOpts, _verifierAddress)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifierAddress) returns()
func (_Zecrey *ZecreyTransactorSession) UpdateVerifier(_verifierAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.UpdateVerifier(&_Zecrey.TransactOpts, _verifierAddress)
}

// ZecreyBlockCommitIterator is returned from FilterBlockCommit and is used to iterate over the raw logs and unpacked data for BlockCommit events raised by the Zecrey contract.
type ZecreyBlockCommitIterator struct {
	Event *ZecreyBlockCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockCommit represents a BlockCommit event raised by the Zecrey contract.
type ZecreyBlockCommit struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockCommit is a free log retrieval operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockCommit(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockCommitIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockCommit", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockCommitIterator{contract: _Zecrey.contract, event: "BlockCommit", logs: logs, sub: sub}, nil
}

// WatchBlockCommit is a free log subscription operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockCommit(opts *bind.WatchOpts, sink chan<- *ZecreyBlockCommit, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockCommit", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockCommit)
				if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockCommit is a log parse operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockCommit(log types.Log) (*ZecreyBlockCommit, error) {
	event := new(ZecreyBlockCommit)
	if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlockProcessedIterator is returned from FilterBlockProcessed and is used to iterate over the raw logs and unpacked data for BlockProcessed events raised by the Zecrey contract.
type ZecreyBlockProcessedIterator struct {
	Event *ZecreyBlockProcessed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockProcessedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockProcessed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockProcessed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockProcessedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockProcessedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockProcessed represents a BlockProcessed event raised by the Zecrey contract.
type ZecreyBlockProcessed struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockProcessed is a free log retrieval operation binding the contract event 0x374928a3faa7ad4f822f66c97ea5736e1a6b41ede9b1ee7f21cc268646fec9f2.
//
// Solidity: event BlockProcessed(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockProcessed(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockProcessedIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockProcessed", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockProcessedIterator{contract: _Zecrey.contract, event: "BlockProcessed", logs: logs, sub: sub}, nil
}

// WatchBlockProcessed is a free log subscription operation binding the contract event 0x374928a3faa7ad4f822f66c97ea5736e1a6b41ede9b1ee7f21cc268646fec9f2.
//
// Solidity: event BlockProcessed(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockProcessed(opts *bind.WatchOpts, sink chan<- *ZecreyBlockProcessed, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockProcessed", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockProcessed)
				if err := _Zecrey.contract.UnpackLog(event, "BlockProcessed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockProcessed is a log parse operation binding the contract event 0x374928a3faa7ad4f822f66c97ea5736e1a6b41ede9b1ee7f21cc268646fec9f2.
//
// Solidity: event BlockProcessed(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockProcessed(log types.Log) (*ZecreyBlockProcessed, error) {
	event := new(ZecreyBlockProcessed)
	if err := _Zecrey.contract.UnpackLog(event, "BlockProcessed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Zecrey contract.
type ZecreyDepositIterator struct {
	Event *ZecreyDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDeposit represents a Deposit event raised by the Zecrey contract.
type ZecreyDeposit struct {
	AssetId       uint32
	NativeAddr    common.Address
	ZecreyAddr    string
	DepositAmount *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x985c84346e3bff1de514922d1bf88270b4a50c525b86443aeeb1441c842e3815.
//
// Solidity: event Deposit(uint32 assetId, address nativeAddr, string zecreyAddr, uint128 depositAmount)
func (_Zecrey *ZecreyFilterer) FilterDeposit(opts *bind.FilterOpts) (*ZecreyDepositIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositIterator{contract: _Zecrey.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x985c84346e3bff1de514922d1bf88270b4a50c525b86443aeeb1441c842e3815.
//
// Solidity: event Deposit(uint32 assetId, address nativeAddr, string zecreyAddr, uint128 depositAmount)
func (_Zecrey *ZecreyFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *ZecreyDeposit) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDeposit)
				if err := _Zecrey.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x985c84346e3bff1de514922d1bf88270b4a50c525b86443aeeb1441c842e3815.
//
// Solidity: event Deposit(uint32 assetId, address nativeAddr, string zecreyAddr, uint128 depositAmount)
func (_Zecrey *ZecreyFilterer) ParseDeposit(log types.Log) (*ZecreyDeposit, error) {
	event := new(ZecreyDeposit)
	if err := _Zecrey.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyGovernanceUpdatedIterator is returned from FilterGovernanceUpdated and is used to iterate over the raw logs and unpacked data for GovernanceUpdated events raised by the Zecrey contract.
type ZecreyGovernanceUpdatedIterator struct {
	Event *ZecreyGovernanceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyGovernanceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyGovernanceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyGovernanceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyGovernanceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyGovernanceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyGovernanceUpdated represents a GovernanceUpdated event raised by the Zecrey contract.
type ZecreyGovernanceUpdated struct {
	GovernanceAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterGovernanceUpdated is a free log retrieval operation binding the contract event 0x9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab.
//
// Solidity: event GovernanceUpdated(address indexed governanceAddress)
func (_Zecrey *ZecreyFilterer) FilterGovernanceUpdated(opts *bind.FilterOpts, governanceAddress []common.Address) (*ZecreyGovernanceUpdatedIterator, error) {

	var governanceAddressRule []interface{}
	for _, governanceAddressItem := range governanceAddress {
		governanceAddressRule = append(governanceAddressRule, governanceAddressItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "GovernanceUpdated", governanceAddressRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyGovernanceUpdatedIterator{contract: _Zecrey.contract, event: "GovernanceUpdated", logs: logs, sub: sub}, nil
}

// WatchGovernanceUpdated is a free log subscription operation binding the contract event 0x9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab.
//
// Solidity: event GovernanceUpdated(address indexed governanceAddress)
func (_Zecrey *ZecreyFilterer) WatchGovernanceUpdated(opts *bind.WatchOpts, sink chan<- *ZecreyGovernanceUpdated, governanceAddress []common.Address) (event.Subscription, error) {

	var governanceAddressRule []interface{}
	for _, governanceAddressItem := range governanceAddress {
		governanceAddressRule = append(governanceAddressRule, governanceAddressItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "GovernanceUpdated", governanceAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyGovernanceUpdated)
				if err := _Zecrey.contract.UnpackLog(event, "GovernanceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernanceUpdated is a log parse operation binding the contract event 0x9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab.
//
// Solidity: event GovernanceUpdated(address indexed governanceAddress)
func (_Zecrey *ZecreyFilterer) ParseGovernanceUpdated(log types.Log) (*ZecreyGovernanceUpdated, error) {
	event := new(ZecreyGovernanceUpdated)
	if err := _Zecrey.contract.UnpackLog(event, "GovernanceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Zecrey contract.
type ZecreyOwnershipTransferredIterator struct {
	Event *ZecreyOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyOwnershipTransferred represents a OwnershipTransferred event raised by the Zecrey contract.
type ZecreyOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Zecrey *ZecreyFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ZecreyOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyOwnershipTransferredIterator{contract: _Zecrey.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Zecrey *ZecreyFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ZecreyOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyOwnershipTransferred)
				if err := _Zecrey.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Zecrey *ZecreyFilterer) ParseOwnershipTransferred(log types.Log) (*ZecreyOwnershipTransferred, error) {
	event := new(ZecreyOwnershipTransferred)
	if err := _Zecrey.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Zecrey contract.
type ZecreyPausedIterator struct {
	Event *ZecreyPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyPaused represents a Paused event raised by the Zecrey contract.
type ZecreyPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Zecrey *ZecreyFilterer) FilterPaused(opts *bind.FilterOpts) (*ZecreyPausedIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ZecreyPausedIterator{contract: _Zecrey.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Zecrey *ZecreyFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ZecreyPaused) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyPaused)
				if err := _Zecrey.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Zecrey *ZecreyFilterer) ParsePaused(log types.Log) (*ZecreyPaused, error) {
	event := new(ZecreyPaused)
	if err := _Zecrey.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Zecrey contract.
type ZecreyUnpausedIterator struct {
	Event *ZecreyUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyUnpaused represents a Unpaused event raised by the Zecrey contract.
type ZecreyUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Zecrey *ZecreyFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ZecreyUnpausedIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ZecreyUnpausedIterator{contract: _Zecrey.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Zecrey *ZecreyFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ZecreyUnpaused) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyUnpaused)
				if err := _Zecrey.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Zecrey *ZecreyFilterer) ParseUnpaused(log types.Log) (*ZecreyUnpaused, error) {
	event := new(ZecreyUnpaused)
	if err := _Zecrey.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyVerifierUpdatedIterator is returned from FilterVerifierUpdated and is used to iterate over the raw logs and unpacked data for VerifierUpdated events raised by the Zecrey contract.
type ZecreyVerifierUpdatedIterator struct {
	Event *ZecreyVerifierUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyVerifierUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyVerifierUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyVerifierUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyVerifierUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyVerifierUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyVerifierUpdated represents a VerifierUpdated event raised by the Zecrey contract.
type ZecreyVerifierUpdated struct {
	VerifierAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterVerifierUpdated is a free log retrieval operation binding the contract event 0xd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee327.
//
// Solidity: event VerifierUpdated(address indexed verifierAddress)
func (_Zecrey *ZecreyFilterer) FilterVerifierUpdated(opts *bind.FilterOpts, verifierAddress []common.Address) (*ZecreyVerifierUpdatedIterator, error) {

	var verifierAddressRule []interface{}
	for _, verifierAddressItem := range verifierAddress {
		verifierAddressRule = append(verifierAddressRule, verifierAddressItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "VerifierUpdated", verifierAddressRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyVerifierUpdatedIterator{contract: _Zecrey.contract, event: "VerifierUpdated", logs: logs, sub: sub}, nil
}

// WatchVerifierUpdated is a free log subscription operation binding the contract event 0xd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee327.
//
// Solidity: event VerifierUpdated(address indexed verifierAddress)
func (_Zecrey *ZecreyFilterer) WatchVerifierUpdated(opts *bind.WatchOpts, sink chan<- *ZecreyVerifierUpdated, verifierAddress []common.Address) (event.Subscription, error) {

	var verifierAddressRule []interface{}
	for _, verifierAddressItem := range verifierAddress {
		verifierAddressRule = append(verifierAddressRule, verifierAddressItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "VerifierUpdated", verifierAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyVerifierUpdated)
				if err := _Zecrey.contract.UnpackLog(event, "VerifierUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifierUpdated is a log parse operation binding the contract event 0xd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee327.
//
// Solidity: event VerifierUpdated(address indexed verifierAddress)
func (_Zecrey *ZecreyFilterer) ParseVerifierUpdated(log types.Log) (*ZecreyVerifierUpdated, error) {
	event := new(ZecreyVerifierUpdated)
	if err := _Zecrey.contract.UnpackLog(event, "VerifierUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Zecrey contract.
type ZecreyWithdrawIterator struct {
	Event *ZecreyWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdraw represents a Withdraw event raised by the Zecrey contract.
type ZecreyWithdraw struct {
	AssetId        uint32
	NativeAddr     common.Address
	WithdrawAmount *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x1cda6b03be2faab4c7e14e89e87c872b8548c10e69d81efd1ba5f0a219e04037.
//
// Solidity: event Withdraw(uint32 assetId, address nativeAddr, uint128 withdrawAmount)
func (_Zecrey *ZecreyFilterer) FilterWithdraw(opts *bind.FilterOpts) (*ZecreyWithdrawIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawIterator{contract: _Zecrey.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x1cda6b03be2faab4c7e14e89e87c872b8548c10e69d81efd1ba5f0a219e04037.
//
// Solidity: event Withdraw(uint32 assetId, address nativeAddr, uint128 withdrawAmount)
func (_Zecrey *ZecreyFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *ZecreyWithdraw) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdraw)
				if err := _Zecrey.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x1cda6b03be2faab4c7e14e89e87c872b8548c10e69d81efd1ba5f0a219e04037.
//
// Solidity: event Withdraw(uint32 assetId, address nativeAddr, uint128 withdrawAmount)
func (_Zecrey *ZecreyFilterer) ParseWithdraw(log types.Log) (*ZecreyWithdraw, error) {
	event := new(ZecreyWithdraw)
	if err := _Zecrey.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
