// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package zecrey

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StorageBlock is an auto generated low-level Go binding around an user-defined struct.
type StorageBlock struct {
	BlockNumber uint32
	AccountRoot [32]byte
	Commitment  [32]byte
	Timestamp   *big.Int
}

// ZecreyCommitBlock is an auto generated low-level Go binding around an user-defined struct.
type ZecreyCommitBlock struct {
	BlockNumber        uint32
	NewAccountRoot     [32]byte
	PublicData         []byte
	WithdrawOperations []ZecreyOperation
	Timestamp          *big.Int
}

// ZecreyOperation is an auto generated low-level Go binding around an user-defined struct.
type ZecreyOperation struct {
	TxType     uint8
	AssetId    uint32
	NativeAddr common.Address
	ZecreyAddr string
	Amount     *big.Int
}

// ZecreyProcessBlock is an auto generated low-level Go binding around an user-defined struct.
type ZecreyProcessBlock struct {
	BlockInfo                StorageBlock
	OnchainOperationsIndexes []*big.Int
	A                        [2]*big.Int
	B                        [2][2]*big.Int
	C                        [2]*big.Int
}

// ZecreyABI is the input ABI used to generate the binding from.
const ZecreyABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"depositAmount\",\"type\":\"uint128\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"VerifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"withdrawAmount\",\"type\":\"uint128\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxAmount\",\"type\":\"uint128\"}],\"name\":\"_transferERC20\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetETH\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structStorage.Block\",\"name\":\"_lastCommittedBlockData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"newAccountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"publicData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"structZecrey.Operation[]\",\"name\":\"withdrawOperations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structZecrey.CommitBlock[]\",\"name\":\"_newBlocksData\",\"type\":\"tuple[]\"}],\"name\":\"commitBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"newAccountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"publicData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"structZecrey.Operation[]\",\"name\":\"withdrawOperations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structZecrey.CommitBlock\",\"name\":\"_newBlock\",\"type\":\"tuple\"}],\"name\":\"getCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structStorage.Block\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"}],\"name\":\"getTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contractIGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onchainOperations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onchainOperationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structStorage.Block\",\"name\":\"blockInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"onchainOperationsIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"structZecrey.ProcessBlock[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"}],\"name\":\"processBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"storedBlockHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksCommitted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksProcessed\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"name\":\"updateGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"}],\"name\":\"updateVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contractIVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ZecreyBin is the compiled bytecode used for deploying new contracts.
var ZecreyBin = "0x60806040527f38723a2e5e8a17aa7950dc008209944e898f69a7bd10a23c839d341e935fd5ca60001b60006000509060001916905560006202000560005090905560016202000660006101000a81548160ff021916908360ff16021790555060026202000660016101000a81548160ff021916908360ff16021790555060036202000660026101000a81548160ff021916908360ff16021790555060046202000660036101000a81548160ff021916908360ff16021790555060056202000660046101000a81548160ff021916908360ff160217905550348015620000e45760006000fd5b50604051620051b0380380620051b083398181016040528101906200010a919062000315565b5b5b5b60006200011f620002ea60201b60201c565b9050806202000360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505b60006202000360146101000a81548160ff0219169083151502179055505b816202000660056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806202000760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006000505460016000506000600063ffffffff168152602001908152602001600020600050819090600019169055506000600360005060006201000081101515620002ad57fe5b90900160005b5081909090555060006201000360005060006201000081101515620002d457fe5b90900160005b508190909055505b5050620003ae565b6000339050620002f5565b9056620003ad565b6000815190506200030e816200038f565b5b92915050565b60006000604083850312156200032b5760006000fd5b60006200033b85828601620002fd565b92505060206200034e85828601620002fd565b9150505b9250929050565b600062000366826200036e565b90505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b6200039a8162000359565b81141515620003a95760006000fd5b5b50565b5b614df280620003be6000396000f3fe60806040526004361061014f5760003560e01c806397fc007c116100b6578063b25612631161006f578063b2561263146104af578063bb64db2b146104d9578063c6c6239014610505578063e21cc0b714610543578063f2fde38b14610585578063faf4d8cb146105af5761014f565b806397fc007c14610373578063987f5f7a1461039d5780639ba0d146146103c95780639fe8590814610407578063a009f7e414610445578063a7ccec2f146104835761014f565b80635c975abb116101085780635c975abb1461027d5780636567be15146102a9578063715018a6146102c55780638da5cb5b146102dd5780638ee1a74e146103095780639640ebde146103475761014f565b80632b7ac3f314610155578063358ca6d41461018157806349f05457146101ab57806353daf596146101e95780635a8bd54c146102135780635aa6e675146102515761014f565b60006000fd5b3480156101625760006000fd5b5061016b6105db565b6040516101789190614571565b60405180910390f35b34801561018e5760006000fd5b506101a960048036038101906101a49190613c0a565b610603565b005b3480156101b85760006000fd5b506101d360048036038101906101ce9190613b20565b610914565b6040516101e091906144f3565b60405180910390f35b3480156101f65760006000fd5b50610211600480360381019061020c9190613a86565b610933565b005b3480156102205760006000fd5b5061023b60048036038101906102369190613ce3565b610a53565b60405161024891906147f6565b60405180910390f35b34801561025e5760006000fd5b50610267610a83565b6040516102749190614555565b60405180910390f35b34801561028a5760006000fd5b50610293610aab565b6040516102a091906144d7565b60405180910390f35b6102c360048036038101906102be9190613d0e565b610ac9565b005b3480156102d25760006000fd5b506102db61109d565b005b3480156102ea5760006000fd5b506102f3611224565b6040516103009190614475565b60405180910390f35b3480156103165760006000fd5b50610331600480360381019061032c9190613b78565b611255565b60405161033e91906147da565b60405180910390f35b3480156103545760006000fd5b5061035d6114db565b60405161036a919061485f565b60405180910390f35b3480156103805760006000fd5b5061039b60048036038101906103969190613a30565b6114f1565b005b3480156103aa5760006000fd5b506103b361163c565b6040516103c091906147f6565b60405180910390f35b3480156103d65760006000fd5b506103f160048036038101906103ec9190613ce3565b611647565b6040516103fe91906144f3565b60405180910390f35b3480156104145760006000fd5b5061042f600480360381019061042a9190613bdf565b611662565b60405161043c91906144f3565b60405180910390f35b3480156104525760006000fd5b5061046d60048036038101906104689190613c8d565b61167f565b60405161047a91906147f6565b60405180910390f35b3480156104905760006000fd5b506104996116a4565b6040516104a691906144f3565b60405180910390f35b3480156104bc5760006000fd5b506104d760048036038101906104d29190613a30565b6116ad565b005b3480156104e65760006000fd5b506104ef6117f8565b6040516104fc919061485f565b60405180910390f35b3480156105125760006000fd5b5061052d60048036038101906105289190613c8d565b6117fd565b60405161053a91906147f6565b60405180910390f35b3480156105505760006000fd5b5061056b60048036038101906105669190613c8d565b611820565b60405161057c9594939291906148b3565b60405180910390f35b3480156105925760006000fd5b506105ad60048036038101906105a89190613a30565b61194f565b005b3480156105bc5760006000fd5b506105c5611b5d565b6040516105d2919061485f565b60405180910390f35b6202000660059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610611610aab63ffffffff16565b151515610689576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081526020015060200191505060405180910390fd5b6202000760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2d53d7c336040518263ffffffff1660e01b81526004016106e69190614491565b60206040518083038186803b1580156106ff5760006000fd5b505afa158015610714573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190613aca565b1515610779576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107709061477c565b60405180910390fd5b61078882611b7363ffffffff16565b6000191660016000506000600260009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001908152602001600020600050546000191614151561080a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080190614674565b60405180910390fd5b6000600090505b81518163ffffffff1610156108d65761084b83838363ffffffff1681518110151561083857fe5b6020026020010151611bf163ffffffff16565b9250825061085e83611b7363ffffffff16565b60016000506000856000015163ffffffff1663ffffffff16815260200190815260200160002060005081909060001916905550826000015163ffffffff167f81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b626842460405160405180910390a25b8080600101915050610811565b508051600260008282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff1602179055505b5b5050565b60006109268383611d1963ffffffff16565b905061092d565b92915050565b610941610aab63ffffffff16565b1515156109b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081526020015060200191505060405180910390fd5b6000600090505b81518163ffffffff161015610a08576109fa828263ffffffff168151811015156109e657fe5b602002602001015182611e3c63ffffffff16565b5b80806001019150506109c0565b50610a19815161239c63ffffffff16565b600260048282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff1602179055505b5b50565b600060036000508263ffffffff166201000081101515610a6f57fe5b90900160005b50549050610a7e565b919050565b6202000760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006202000360149054906101000a900460ff169050610ac6565b90565b610ad7610aab63ffffffff16565b151515610b4f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081526020015060200191505060405180910390fd5b600063ffffffff168363ffffffff161415610be057806fffffffffffffffffffffffffffffffff1634141515610bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb190614653565b60405180910390fd5b610bdb33600084610bd03461242a63ffffffff16565b6124c463ffffffff16565b611096565b600034141515610c25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1c90614611565b60405180910390fd5b6202000760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b7df2b9846040518263ffffffff1660e01b8152600401610c82919061485f565b60206040518083038186803b158015610c9b5760006000fd5b505afa158015610cb0573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd49190613aca565b1515610d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0c906145f0565b60405180910390fd5b60006202000760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e53cea33856040518263ffffffff1660e01b8152600401610d74919061485f565b60206040518083038186803b158015610d8d5760006000fd5b505afa158015610da2573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc69190613a5b565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610e0a9291906144ad565b60206040518083038186803b158015610e235760006000fd5b505afa158015610e38573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5c9190613cb8565b9050836fffffffffffffffffffffffffffffffff168110151515610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac906146b6565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ef09190614475565b60206040518083038186803b158015610f095760006000fd5b505afa158015610f1e573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f429190613cb8565b9050610f88833330610f6b896fffffffffffffffffffffffffffffffff1661242a63ffffffff16565b6fffffffffffffffffffffffffffffffff166126eb63ffffffff16565b1515610fc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc090614632565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110049190614475565b60206040518083038186803b15801561101d5760006000fd5b505afa158015611032573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110569190613cb8565b9050600061107b61107084846128ca90919063ffffffff16565b61242a63ffffffff16565b905061108f338a8a846124c463ffffffff16565b5050505050505b5b5b505050565b6110ab61295763ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff166110cf61122463ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1614151561115d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281526020015060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166202000360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360006202000360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b565b60006202000360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611252565b90565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112be90614719565b60405180910390fd5b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113029190614475565b60206040518083038186803b15801561131b5760006000fd5b505afa158015611330573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113549190613cb8565b90506113798686866fffffffffffffffffffffffffffffffff1661296463ffffffff16565b15156113ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b19061475b565b60405180910390fd5b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113f59190614475565b60206040518083038186803b15801561140e5760006000fd5b505afa158015611423573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114479190613cb8565b9050600061145e82846128ca90919063ffffffff16565b9050846fffffffffffffffffffffffffffffffff1681111515156114b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ae906145cf565b60405180910390fd5b6114c68161242a63ffffffff16565b93505050506114d3565050505b949350505050565b600260049054906101000a900463ffffffff1681565b6114ff61295763ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1661152361122463ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff161415156115b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281526020015060200191505060405180910390fd5b806202000660056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee32760405160405180910390a25b5b50565b620200056000505481565b60016000506020528060005260406000206000915090505481565b600061167382611b7363ffffffff16565b905061167a565b919050565b620100036000508162010000811061169657600080fd5b90900160005b915090505481565b60006000505481565b6116bb61295763ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff166116df61122463ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1614151561176d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281526020015060200191505060405180910390fd5b806202000760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab60405160405180910390a25b5b50565b600081565b60036000508162010000811061181257600080fd5b90900160005b915090505481565b620200046000506020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900463ffffffff16908060000160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119235780601f106118f857610100808354040283529160200191611923565b820191906000526020600020905b81548152906001019060200180831161190657829003601f168201915b5050505050908060020160009054906101000a90046fffffffffffffffffffffffffffffffff16905085565b61195d61295763ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1661198161122463ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16141515611a0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281526020015060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180614d976026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166202000360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806202000360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b600260009054906101000a900463ffffffff1681565b6000600282604051602001611b8891906147be565b604051602081830303815290604052604051611ba49190614447565b602060405180830381855afa158015611bc2573d600060003e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611be59190613af5565b9050611bec565b919050565b611bf9613131565b600183600001510163ffffffff16826000015163ffffffff16141515611c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4b906146f8565b60405180910390fd5b8260600151826080015110151515611ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c989061458d565b60405180910390fd5b611cb48260600151612b2463ffffffff16565b6000611cca846020015184611d1963ffffffff16565b90506040518060800160405280846000015163ffffffff1681526020018460200151600019168152602001826000191681526020018460800151815260200150915050611d1356505b92915050565b60006000600284604051602001611d3091906143cf565b604051602081830303815290604052604051611d4c9190614447565b602060405180830381855afa158015611d6a573d600060003e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611d8d9190613af5565b90506002818460000151856020015186604001518760800151604051602001611dba9594939291906143eb565b604051602081830303815290604052604051611dd69190614447565b602060405180830381855afa158015611df4573d600060003e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e179190613af5565b905080506000836040015190508051808252508192505050611e365650505b92915050565b6001600050600083600001516000015163ffffffff1663ffffffff1681526020019081526020016000206000505460001916611e818360000151611b7363ffffffff16565b60001916141515611ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebe906145ae565b60405180910390fd5b600181600260049054906101000a900463ffffffff16010163ffffffff1682600001516000015163ffffffff16141515611f36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2d90614695565b60405180910390fd5b6000600090505b8260200151518163ffffffff16101561234357600083602001518263ffffffff16815181101515611f6a57fe5b60200260200101519050600062020004600050600083815260200190815260200160002060005060000160009054906101000a900460ff16905060008160ff1614151515611fed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe4906146d7565b60405180910390fd5b6202000660019054906101000a900460ff1660ff168160ff1614156120b25762020004600050600083815260200190815260200160002060006000820160006101000a81549060ff02191690556000820160016101000a81549063ffffffff02191690556000820160056101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000612088919061316a565b6002820160006101000a8154906fffffffffffffffffffffffffffffffff02191690555050612333565b6202000660049054906101000a900460ff1660ff168160ff161415612332576122906202000460005060008481526020019081526020016000206000506040518060a00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182016000508054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561222f5780601f106122045761010080835404028352916020019161222f565b820191906000526020600020905b81548152906001019060200180831161221257829003601f168201915b505050505081526020016002820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020015050612cf663ffffffff16565b62020004600050600083815260200190815260200160002060006000820160006101000a81549060ff02191690556000820160016101000a81549063ffffffff02191690556000820160056101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600061230c919061316a565b6002820160006101000a8154906fffffffffffffffffffffffffffffffff021916905550505b5b50505b8080600101915050611f3d565b5081600001516020015160006000508190906000191690555081600001516000015163ffffffff167f374928a3faa7ad4f822f66c97ea5736e1a6b41ede9b1ee7f21cc268646fec9f260405160405180910390a25b5050565b60006401000000008210151561241d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f313800000000000000000000000000000000000000000000000000000000000081526020015060200191505060405180910390fd5b819050612425565b919050565b6000700100000000000000000000000000000000821015156124b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f313600000000000000000000000000000000000000000000000000000000000081526020015060200191505060405180910390fd5b8190506124bf565b919050565b6040518060a001604052806202000660019054906101000a900460ff1660ff1681526020018463ffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001838152602001826fffffffffffffffffffffffffffffffff168152602001506202000460005060006202000560005054815260200190815260200160002060005060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160010160005090805190602001906126009291906131b2565b5060808201518160020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550905050806fffffffffffffffffffffffffffffffff1660036000508463ffffffff16620100008110151561267057fe5b90900160005b8282825054019250508190909055506202000560008181505480929190600101919050909055507fb8d82369bab3adee97c3101ea8c2a393ccdc2709e79d5b8053144134e49565fc60016202000560005054038484846040516126dc9493929190614812565b60405180910390a15b50505050565b6000600060008673ffffffffffffffffffffffffffffffffffffffff16868686604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040516020818303038152906040527f23b872dd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310151561280857805182525b6020820191506020810190506020830392506127e2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461286a576040519150601f19603f3d011682016040523d82523d6000602084013e61286f565b606091505b509150915060006000825114806128a957508180602001905160208110156128975760006000fd5b81019080805190602001909291905050505b90508280156128b55750805b93505050506128c2565050505b949350505050565b6000828211151515612947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081526020015060200191505060405180910390fd5b8183039050612951565b92915050565b6000339050612961565b90565b6000600060008573ffffffffffffffffffffffffffffffffffffffff168585604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083101515612a6357805182525b602082019150602081019050602083039250612a3d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612ac5576040519150601f19603f3d011682016040523d82523d6000602084013e612aca565b606091505b50915091506000600082511480612b045750818060200190516020811015612af25760006000fd5b81019080805190602001909291905050505b9050828015612b105750805b9350505050612b1d565050505b9392505050565b6000600090505b81518163ffffffff161015612cf1576202000660049054906101000a900460ff1660ff16828263ffffffff16815181101515612b6357fe5b60200260200101516000015160ff16141515612bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bab9061479d565b60405180910390fd5b818163ffffffff16815181101515612bc857fe5b60200260200101516202000460005060006202000560005054815260200190815260200160002060005060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816001016000509080519060200190612ca09291906131b2565b5060808201518160020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050505b8080600101915050612b2b565b505b50565b6202000660049054906101000a900460ff1660ff16816000015160ff16141515612d55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d4c9061473a565b60405180910390fd5b6202000760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b7df2b982602001516040518263ffffffff1660e01b8152600401612db6919061485f565b60206040518083038186803b158015612dcf5760006000fd5b505afa158015612de4573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e089190613aca565b1515612e49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e40906145f0565b60405180910390fd5b600060009050600063ffffffff16826020015163ffffffff161415612ea157600082604001519050612e978184608001516fffffffffffffffffffffffffffffffff166130ae63ffffffff16565b915081505061300f565b60006202000760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e53cea3384602001516040518263ffffffff1660e01b8152600401612f04919061485f565b60206040518083038186803b158015612f1d5760006000fd5b505afa158015612f32573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f569190613a5b565b90503073ffffffffffffffffffffffffffffffffffffffff16638ee1a74e62030d40838660400151876080015188608001516040518663ffffffff1660e01b8152600401612fa7949392919061450f565b602060405180830381600088803b158015612fc25760006000fd5b5087f193505050508015612ff457506040513d601f19601f82011682018060405250810190612ff19190613c62565b60015b613005575b6000915081505b61300d565b506001915081505b505b80156130a95781608001516fffffffffffffffffffffffffffffffff1662010003600050836020015163ffffffff16620100008110151561304c57fe5b90900160005b8282825054019250508190909055507f1cda6b03be2faab4c7e14e89e87c872b8548c10e69d81efd1ba5f0a219e040378260200151836040015184608001516040516130a09392919061487b565b60405180910390a15b505b50565b600060008373ffffffffffffffffffffffffffffffffffffffff1662030d40846040516130da9061445f565b600060405180830381858888f193505050503d8060008114613118576040519150601f19603f3d011682016040523d82523d6000602084013e61311d565b606091505b505090508091505061312b56505b92915050565b6040518060800160405280600063ffffffff16815260200160006000191681526020016000600019168152602001600081526020015090565b50805460018160011615610100020316600290046000825580601f1061319057506131af565b601f0160209004906000526020600020908101906131ae9190613245565b5b50565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826131e85760008555613234565b82601f1061320157805160ff1916838001178555613234565b82800160010185558215613234579182015b828111156132335782518260005090905591602001919060010190613213565b5b5090506132419190613245565b5090565b61324a565b80821115613264576000818150600090555060010161324a565b509056614d95565b600061327f61327a84614940565b61490e565b905080828560408602820111156132965760006000fd5b60005b858110156132c757816132ac8882613625565b8452602084019350604083019250505b600181019050613299565b5050505b9392505050565b60006132e56132e084614967565b61490e565b9050808382526020820190508260005b85811015613326578135850161330b88826137a8565b8452602084019350602083019250505b6001810190506132f5565b5050505b9392505050565b600061334461333f84614994565b61490e565b9050808382526020820190508260005b85811015613385578135850161336a8882613864565b8452602084019350602083019250505b600181019050613354565b5050505b9392505050565b60006133a361339e846149c1565b61490e565b9050808382526020820190508260005b858110156133e457813585016133c98882613907565b8452602084019350602083019250505b6001810190506133b3565b5050505b9392505050565b60006134026133fd846149ee565b61490e565b905080828560208602820111156134195760006000fd5b60005b8581101561344a578161342f88826139d8565b8452602084019350602083019250505b60018101905061341c565b5050505b9392505050565b600061346861346384614a15565b61490e565b905080838252602082019050828560208602820111156134885760006000fd5b60005b858110156134b9578161349e88826139d8565b8452602084019350602083019250505b60018101905061348b565b5050505b9392505050565b60006134d76134d284614a42565b61490e565b9050828152602081018484840111156134f05760006000fd5b6134fb848285614c2b565b505b9392505050565b600061351761351284614a73565b61490e565b9050828152602081018484840111156135305760006000fd5b61353b848285614c2b565b505b9392505050565b60008135905061355381614cbd565b5b92915050565b60008151905061356981614cbd565b5b92915050565b600082601f83011215156135845760006000fd5b600261359184828561326c565b9150505b92915050565b600082601f83011215156135af5760006000fd5b81356135bf8482602086016132d2565b9150505b92915050565b600082601f83011215156135dd5760006000fd5b81356135ed848260208601613331565b9150505b92915050565b600082601f830112151561360b5760006000fd5b813561361b848260208601613390565b9150505b92915050565b600082601f83011215156136395760006000fd5b60026136468482856133ef565b9150505b92915050565b600082601f83011215156136645760006000fd5b8135613674848260208601613455565b9150505b92915050565b60008151905061368d81614cd8565b5b92915050565b6000813590506136a381614cf3565b5b92915050565b6000815190506136b981614cf3565b5b92915050565b600082601f83011215156136d45760006000fd5b81356136e48482602086016134c4565b9150505b92915050565b6000813590506136fd81614d0e565b5b92915050565b600082601f83011215156137185760006000fd5b8135613728848260208601613504565b9150505b92915050565b6000608082840312156137455760006000fd5b61374f608061490e565b9050600061375f84828501613a04565b600083015250602061377384828501613694565b602083015250604061378784828501613694565b604083015250606061379b848285016139d8565b6060830152505b92915050565b600060a082840312156137bb5760006000fd5b6137c560a061490e565b905060006137d584828501613a04565b60008301525060206137e984828501613694565b602083015250604082013567ffffffffffffffff81111561380a5760006000fd5b613816848285016136c0565b604083015250606082013567ffffffffffffffff8111156138375760006000fd5b613843848285016135c9565b6060830152506080613857848285016139d8565b6080830152505b92915050565b600060a082840312156138775760006000fd5b61388160a061490e565b9050600061389184828501613a1a565b60008301525060206138a584828501613a04565b60208301525060406138b984828501613544565b604083015250606082013567ffffffffffffffff8111156138da5760006000fd5b6138e684828501613704565b60608301525060806138fa848285016139ac565b6080830152505b92915050565b60006101a0828403121561391b5760006000fd5b61392560a061490e565b9050600061393584828501613732565b600083015250608082013567ffffffffffffffff8111156139565760006000fd5b61396284828501613650565b60208301525060a061397684828501613625565b60408301525060e061398a84828501613570565b60608301525061016061399f84828501613625565b6080830152505b92915050565b6000813590506139bb81614d29565b5b92915050565b6000815190506139d181614d29565b5b92915050565b6000813590506139e781614d44565b5b92915050565b6000815190506139fd81614d44565b5b92915050565b600081359050613a1381614d5f565b5b92915050565b600081359050613a2981614d7a565b5b92915050565b600060208284031215613a435760006000fd5b6000613a5184828501613544565b9150505b92915050565b600060208284031215613a6e5760006000fd5b6000613a7c8482850161355a565b9150505b92915050565b600060208284031215613a995760006000fd5b600082013567ffffffffffffffff811115613ab45760006000fd5b613ac0848285016135f7565b9150505b92915050565b600060208284031215613add5760006000fd5b6000613aeb8482850161367e565b9150505b92915050565b600060208284031215613b085760006000fd5b6000613b16848285016136aa565b9150505b92915050565b6000600060408385031215613b355760006000fd5b6000613b4385828601613694565b925050602083013567ffffffffffffffff811115613b615760006000fd5b613b6d858286016137a8565b9150505b9250929050565b600060006000600060808587031215613b915760006000fd5b6000613b9f878288016136ee565b9450506020613bb087828801613544565b9350506040613bc1878288016139ac565b9250506060613bd2878288016139ac565b9150505b92959194509250565b600060808284031215613bf25760006000fd5b6000613c0084828501613732565b9150505b92915050565b6000600060a08385031215613c1f5760006000fd5b6000613c2d85828601613732565b925050608083013567ffffffffffffffff811115613c4b5760006000fd5b613c578582860161359b565b9150505b9250929050565b600060208284031215613c755760006000fd5b6000613c83848285016139c2565b9150505b92915050565b600060208284031215613ca05760006000fd5b6000613cae848285016139d8565b9150505b92915050565b600060208284031215613ccb5760006000fd5b6000613cd9848285016139ee565b9150505b92915050565b600060208284031215613cf65760006000fd5b6000613d0484828501613a04565b9150505b92915050565b60006000600060608486031215613d255760006000fd5b6000613d3386828701613a04565b935050602084013567ffffffffffffffff811115613d515760006000fd5b613d5d86828701613704565b9250506040613d6e868287016139ac565b9150505b9250925092565b613d8281614b80565b82525b5050565b613d9281614ada565b82525b5050565b613da281614aed565b82525b5050565b613db281614afa565b82525b5050565b613dc281614afa565b82525b5050565b613dda613dd582614afa565b614c70565b82525b5050565b6000613dec82614aa4565b613df68185614abc565b9350613e06818560208601614c3b565b8084019150505b92915050565b613e1c81614b93565b82525b5050565b613e2c81614bb9565b82525b5050565b613e3c81614bdf565b82525b5050565b6000613e4e82614ab0565b613e588185614ac8565b9350613e68818560208601614c3b565b613e7181614c9d565b84019150505b92915050565b6000613e8a601183614ac8565b91507f696e76616c69642074696d657374616d7000000000000000000000000000000060008301526020820190505b919050565b6000613ecb601383614ac8565b91507f626c6f636b206e6f7420636f6d6d69747465640000000000000000000000000060008301526020820190505b919050565b6000613f0c600183614ac8565b91507f370000000000000000000000000000000000000000000000000000000000000060008301526020820190505b919050565b6000613f4d601083614ac8565b91507f696e76616c69642061737365742069640000000000000000000000000000000060008301526020820190505b919050565b6000613f8e601483614ac8565b91507f696e76616c6964207061796d656e74207479706500000000000000000000000060008301526020820190505b919050565b6000613fcf601483614ac8565b91507f7472616e73666572206572633230206572726f7200000000000000000000000060008301526020820190505b919050565b6000614010601883614ac8565b91507f696e76616c696420616d6f756e74206f6620617373657473000000000000000060008301526020820190505b919050565b6000614051601283614ac8565b91507f696e76616c6964206c61737420626c6f636b000000000000000000000000000060008301526020820190505b919050565b6000614092601483614ac8565b91507f696e76616c696420626c6f636b206e756d62657200000000000000000000000060008301526020820190505b919050565b60006140d3601483614ac8565b91507f6e6f7420656e6f75676820616c6c6f77616e636500000000000000000000000060008301526020820190505b919050565b6000614114601d83614ac8565b91507f6f6e2d636861696e206f7065726174696f6e206e6f742065786973747300000060008301526020820190505b919050565b6000614155600083614abc565b91506000820190505b919050565b6000614170601183614ac8565b91507f696e76616c6964206e657720626c6f636b00000000000000000000000000000060008301526020820190505b919050565b60006141b1600183614ac8565b91507f350000000000000000000000000000000000000000000000000000000000000060008301526020820190505b919050565b60006141f2601683614ac8565b91507f696e76616c6964206f7065726174696f6e20747970650000000000000000000060008301526020820190505b919050565b6000614233600183614ac8565b91507f360000000000000000000000000000000000000000000000000000000000000060008301526020820190505b919050565b6000614274601083614ac8565b91507f696e76616c6964206f70657261746f720000000000000000000000000000000060008301526020820190505b919050565b60006142b5601883614ac8565b91507f696e76616c6964207472616e73616374696f6e2074797065000000000000000060008301526020820190505b919050565b6080820160008201516142ff6000850182614387565b5060208201516143126020850182613da9565b5060408201516143256040850182613da9565b506060820151614338606085018261434f565b50505b5050565b61434881614b18565b82525b5050565b61435881614b56565b82525b5050565b61436881614b56565b82525b5050565b61438061437b82614b56565b614c7b565b82525b5050565b61439081614b61565b82525b5050565b6143a081614b61565b82525b5050565b6143b86143b382614b61565b614c86565b82525b5050565b6143c881614b72565b82525b5050565b60006143db8284613dc9565b6020820191508190505b92915050565b60006143f78288613dc9565b60208201915061440782876143a7565b6004820191506144178286613dc9565b6020820191506144278285613de1565b9150614433828461436f565b6020820191508190505b9695505050505050565b60006144538284613de1565b91508190505b92915050565b600061446a82614148565b91508190505b919050565b600060208201905061448a6000830184613d89565b5b92915050565b60006020820190506144a66000830184613d79565b5b92915050565b60006040820190506144c26000830185613d79565b6144cf6020830184613d89565b5b9392505050565b60006020820190506144ec6000830184613d99565b5b92915050565b60006020820190506145086000830184613db9565b5b92915050565b60006080820190506145246000830187613e13565b6145316020830186613d89565b61453e604083018561433f565b61454b606083018461433f565b5b95945050505050565b600060208201905061456a6000830184613e23565b5b92915050565b60006020820190506145866000830184613e33565b5b92915050565b600060208201905081810360008301526145a681613e7d565b90505b919050565b600060208201905081810360008301526145c781613ebe565b90505b919050565b600060208201905081810360008301526145e881613eff565b90505b919050565b6000602082019050818103600083015261460981613f40565b90505b919050565b6000602082019050818103600083015261462a81613f81565b90505b919050565b6000602082019050818103600083015261464b81613fc2565b90505b919050565b6000602082019050818103600083015261466c81614003565b90505b919050565b6000602082019050818103600083015261468d81614044565b90505b919050565b600060208201905081810360008301526146ae81614085565b90505b919050565b600060208201905081810360008301526146cf816140c6565b90505b919050565b600060208201905081810360008301526146f081614107565b90505b919050565b6000602082019050818103600083015261471181614163565b90505b919050565b60006020820190508181036000830152614732816141a4565b90505b919050565b60006020820190508181036000830152614753816141e5565b90505b919050565b6000602082019050818103600083015261477481614226565b90505b919050565b6000602082019050818103600083015261479581614267565b90505b919050565b600060208201905081810360008301526147b6816142a8565b90505b919050565b60006080820190506147d360008301846142e9565b5b92915050565b60006020820190506147ef600083018461433f565b5b92915050565b600060208201905061480b600083018461435f565b5b92915050565b6000608082019050614827600083018761435f565b6148346020830186614397565b81810360408301526148468185613e43565b9050614855606083018461433f565b5b95945050505050565b60006020820190506148746000830184614397565b5b92915050565b60006060820190506148906000830186614397565b61489d6020830185613d89565b6148aa604083018461433f565b5b949350505050565b600060a0820190506148c860008301886143bf565b6148d56020830187614397565b6148e26040830186613d89565b81810360608301526148f48185613e43565b9050614903608083018461433f565b5b9695505050505050565b6000604051905081810181811067ffffffffffffffff8211171561493557614934614c99565b5b80604052505b919050565b600067ffffffffffffffff82111561495b5761495a614c99565b5b6020820290505b919050565b600067ffffffffffffffff82111561498257614981614c99565b5b6020820290506020810190505b919050565b600067ffffffffffffffff8211156149af576149ae614c99565b5b6020820290506020810190505b919050565b600067ffffffffffffffff8211156149dc576149db614c99565b5b6020820290506020810190505b919050565b600067ffffffffffffffff821115614a0957614a08614c99565b5b6020820290505b919050565b600067ffffffffffffffff821115614a3057614a2f614c99565b5b6020820290506020810190505b919050565b600067ffffffffffffffff821115614a5d57614a5c614c99565b5b601f19601f83011690506020810190505b919050565b600067ffffffffffffffff821115614a8e57614a8d614c99565b5b601f19601f83011690506020810190505b919050565b6000815190505b919050565b6000815190505b919050565b60008190505b92915050565b60008282526020820190505b92915050565b6000614ae582614b35565b90505b919050565b600081151590505b919050565b60008190505b919050565b6000614b1082614ada565b90505b919050565b60006fffffffffffffffffffffffffffffffff821690505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b600063ffffffff821690505b919050565b600060ff821690505b919050565b6000614b8b82614c05565b90505b919050565b6000614b9e82614ba6565b90505b919050565b6000614bb182614b35565b90505b919050565b6000614bc482614bcc565b90505b919050565b6000614bd782614b35565b90505b919050565b6000614bea82614bf2565b90505b919050565b6000614bfd82614b35565b90505b919050565b6000614c1082614c18565b90505b919050565b6000614c2382614b35565b90505b919050565b828183376000838301525b505050565b60005b83811015614c5a5780820151818401525b602081019050614c3e565b83811115614c69576000848401525b505b505050565b60008190505b919050565b60008190505b919050565b6000614c9182614caf565b90505b919050565bfe5b565b6000601f19601f83011690505b919050565b60008160e01b90505b919050565b614cc681614ada565b81141515614cd45760006000fd5b5b50565b614ce181614aed565b81141515614cef5760006000fd5b5b50565b614cfc81614afa565b81141515614d0a5760006000fd5b5b50565b614d1781614b05565b81141515614d255760006000fd5b5b50565b614d3281614b18565b81141515614d405760006000fd5b5b50565b614d4d81614b56565b81141515614d5b5760006000fd5b5b50565b614d6881614b61565b81141515614d765760006000fd5b5b50565b614d8381614b72565b81141515614d915760006000fd5b5b50565bfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212202318b45797eb36478d22e1cfdf2d02f587e4817e1f56297a7fbd8f299c045a7a64736f6c63430007060033"

// DeployZecrey deploys a new Ethereum contract, binding an instance of Zecrey to it.
func DeployZecrey(auth *bind.TransactOpts, backend bind.ContractBackend, _verifierAddress common.Address, _governanceAddress common.Address) (common.Address, *types.Transaction, *Zecrey, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ZecreyBin), backend, _verifierAddress, _governanceAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// Zecrey is an auto generated Go binding around an Ethereum contract.
type Zecrey struct {
	ZecreyCaller     // Read-only binding to the contract
	ZecreyTransactor // Write-only binding to the contract
	ZecreyFilterer   // Log filterer for contract events
}

// ZecreyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZecreyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZecreyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZecreyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZecreySession struct {
	Contract     *Zecrey           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZecreyCallerSession struct {
	Contract *ZecreyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ZecreyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZecreyTransactorSession struct {
	Contract     *ZecreyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZecreyRaw struct {
	Contract *Zecrey // Generic contract binding to access the raw methods on
}

// ZecreyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZecreyCallerRaw struct {
	Contract *ZecreyCaller // Generic read-only contract binding to access the raw methods on
}

// ZecreyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZecreyTransactorRaw struct {
	Contract *ZecreyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZecrey creates a new instance of Zecrey, bound to a specific deployed contract.
func NewZecrey(address common.Address, backend bind.ContractBackend) (*Zecrey, error) {
	contract, err := bindZecrey(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// NewZecreyCaller creates a new read-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyCaller(address common.Address, caller bind.ContractCaller) (*ZecreyCaller, error) {
	contract, err := bindZecrey(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyCaller{contract: contract}, nil
}

// NewZecreyTransactor creates a new write-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyTransactor(address common.Address, transactor bind.ContractTransactor) (*ZecreyTransactor, error) {
	contract, err := bindZecrey(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyTransactor{contract: contract}, nil
}

// NewZecreyFilterer creates a new log filterer instance of Zecrey, bound to a specific deployed contract.
func NewZecreyFilterer(address common.Address, filterer bind.ContractFilterer) (*ZecreyFilterer, error) {
	contract, err := bindZecrey(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZecreyFilterer{contract: contract}, nil
}

// bindZecrey binds a generic wrapper to an already deployed contract.
func bindZecrey(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.ZecreyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transact(opts, method, params...)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCaller) AccountRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "accountRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreySession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// AssetETH is a free data retrieval call binding the contract method 0xbb64db2b.
//
// Solidity: function assetETH() view returns(uint32)
func (_Zecrey *ZecreyCaller) AssetETH(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "assetETH")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// AssetETH is a free data retrieval call binding the contract method 0xbb64db2b.
//
// Solidity: function assetETH() view returns(uint32)
func (_Zecrey *ZecreySession) AssetETH() (uint32, error) {
	return _Zecrey.Contract.AssetETH(&_Zecrey.CallOpts)
}

// AssetETH is a free data retrieval call binding the contract method 0xbb64db2b.
//
// Solidity: function assetETH() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) AssetETH() (uint32, error) {
	return _Zecrey.Contract.AssetETH(&_Zecrey.CallOpts)
}

// GetCommitment is a free data retrieval call binding the contract method 0x49f05457.
//
// Solidity: function getCommitment(bytes32 root, (uint32,bytes32,bytes,(uint8,uint32,address,string,uint128)[],uint256) _newBlock) pure returns(bytes32)
func (_Zecrey *ZecreyCaller) GetCommitment(opts *bind.CallOpts, root [32]byte, _newBlock ZecreyCommitBlock) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getCommitment", root, _newBlock)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetCommitment is a free data retrieval call binding the contract method 0x49f05457.
//
// Solidity: function getCommitment(bytes32 root, (uint32,bytes32,bytes,(uint8,uint32,address,string,uint128)[],uint256) _newBlock) pure returns(bytes32)
func (_Zecrey *ZecreySession) GetCommitment(root [32]byte, _newBlock ZecreyCommitBlock) ([32]byte, error) {
	return _Zecrey.Contract.GetCommitment(&_Zecrey.CallOpts, root, _newBlock)
}

// GetCommitment is a free data retrieval call binding the contract method 0x49f05457.
//
// Solidity: function getCommitment(bytes32 root, (uint32,bytes32,bytes,(uint8,uint32,address,string,uint128)[],uint256) _newBlock) pure returns(bytes32)
func (_Zecrey *ZecreyCallerSession) GetCommitment(root [32]byte, _newBlock ZecreyCommitBlock) ([32]byte, error) {
	return _Zecrey.Contract.GetCommitment(&_Zecrey.CallOpts, root, _newBlock)
}

// GetHash is a free data retrieval call binding the contract method 0x9fe85908.
//
// Solidity: function getHash((uint32,bytes32,bytes32,uint256) a) pure returns(bytes32)
func (_Zecrey *ZecreyCaller) GetHash(opts *bind.CallOpts, a StorageBlock) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getHash", a)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetHash is a free data retrieval call binding the contract method 0x9fe85908.
//
// Solidity: function getHash((uint32,bytes32,bytes32,uint256) a) pure returns(bytes32)
func (_Zecrey *ZecreySession) GetHash(a StorageBlock) ([32]byte, error) {
	return _Zecrey.Contract.GetHash(&_Zecrey.CallOpts, a)
}

// GetHash is a free data retrieval call binding the contract method 0x9fe85908.
//
// Solidity: function getHash((uint32,bytes32,bytes32,uint256) a) pure returns(bytes32)
func (_Zecrey *ZecreyCallerSession) GetHash(a StorageBlock) ([32]byte, error) {
	return _Zecrey.Contract.GetHash(&_Zecrey.CallOpts, a)
}

// GetTotalDeposited is a free data retrieval call binding the contract method 0x5a8bd54c.
//
// Solidity: function getTotalDeposited(uint32 assetId) view returns(uint256)
func (_Zecrey *ZecreyCaller) GetTotalDeposited(opts *bind.CallOpts, assetId uint32) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getTotalDeposited", assetId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalDeposited is a free data retrieval call binding the contract method 0x5a8bd54c.
//
// Solidity: function getTotalDeposited(uint32 assetId) view returns(uint256)
func (_Zecrey *ZecreySession) GetTotalDeposited(assetId uint32) (*big.Int, error) {
	return _Zecrey.Contract.GetTotalDeposited(&_Zecrey.CallOpts, assetId)
}

// GetTotalDeposited is a free data retrieval call binding the contract method 0x5a8bd54c.
//
// Solidity: function getTotalDeposited(uint32 assetId) view returns(uint256)
func (_Zecrey *ZecreyCallerSession) GetTotalDeposited(assetId uint32) (*big.Int, error) {
	return _Zecrey.Contract.GetTotalDeposited(&_Zecrey.CallOpts, assetId)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Zecrey *ZecreyCaller) Governance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "governance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Zecrey *ZecreySession) Governance() (common.Address, error) {
	return _Zecrey.Contract.Governance(&_Zecrey.CallOpts)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Zecrey *ZecreyCallerSession) Governance() (common.Address, error) {
	return _Zecrey.Contract.Governance(&_Zecrey.CallOpts)
}

// OnchainOperations is a free data retrieval call binding the contract method 0xe21cc0b7.
//
// Solidity: function onchainOperations(uint256 ) view returns(uint8 txType, uint32 assetId, address nativeAddr, string zecreyAddr, uint128 amount)
func (_Zecrey *ZecreyCaller) OnchainOperations(opts *bind.CallOpts, arg0 *big.Int) (struct {
	TxType     uint8
	AssetId    uint32
	NativeAddr common.Address
	ZecreyAddr string
	Amount     *big.Int
}, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOperations", arg0)

	outstruct := new(struct {
		TxType     uint8
		AssetId    uint32
		NativeAddr common.Address
		ZecreyAddr string
		Amount     *big.Int
	})

	outstruct.TxType = out[0].(uint8)
	outstruct.AssetId = out[1].(uint32)
	outstruct.NativeAddr = out[2].(common.Address)
	outstruct.ZecreyAddr = out[3].(string)
	outstruct.Amount = out[4].(*big.Int)

	return *outstruct, err

}

// OnchainOperations is a free data retrieval call binding the contract method 0xe21cc0b7.
//
// Solidity: function onchainOperations(uint256 ) view returns(uint8 txType, uint32 assetId, address nativeAddr, string zecreyAddr, uint128 amount)
func (_Zecrey *ZecreySession) OnchainOperations(arg0 *big.Int) (struct {
	TxType     uint8
	AssetId    uint32
	NativeAddr common.Address
	ZecreyAddr string
	Amount     *big.Int
}, error) {
	return _Zecrey.Contract.OnchainOperations(&_Zecrey.CallOpts, arg0)
}

// OnchainOperations is a free data retrieval call binding the contract method 0xe21cc0b7.
//
// Solidity: function onchainOperations(uint256 ) view returns(uint8 txType, uint32 assetId, address nativeAddr, string zecreyAddr, uint128 amount)
func (_Zecrey *ZecreyCallerSession) OnchainOperations(arg0 *big.Int) (struct {
	TxType     uint8
	AssetId    uint32
	NativeAddr common.Address
	ZecreyAddr string
	Amount     *big.Int
}, error) {
	return _Zecrey.Contract.OnchainOperations(&_Zecrey.CallOpts, arg0)
}

// OnchainOperationsCount is a free data retrieval call binding the contract method 0x987f5f7a.
//
// Solidity: function onchainOperationsCount() view returns(uint256)
func (_Zecrey *ZecreyCaller) OnchainOperationsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOperationsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OnchainOperationsCount is a free data retrieval call binding the contract method 0x987f5f7a.
//
// Solidity: function onchainOperationsCount() view returns(uint256)
func (_Zecrey *ZecreySession) OnchainOperationsCount() (*big.Int, error) {
	return _Zecrey.Contract.OnchainOperationsCount(&_Zecrey.CallOpts)
}

// OnchainOperationsCount is a free data retrieval call binding the contract method 0x987f5f7a.
//
// Solidity: function onchainOperationsCount() view returns(uint256)
func (_Zecrey *ZecreyCallerSession) OnchainOperationsCount() (*big.Int, error) {
	return _Zecrey.Contract.OnchainOperationsCount(&_Zecrey.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Zecrey *ZecreyCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Zecrey *ZecreySession) Owner() (common.Address, error) {
	return _Zecrey.Contract.Owner(&_Zecrey.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Zecrey *ZecreyCallerSession) Owner() (common.Address, error) {
	return _Zecrey.Contract.Owner(&_Zecrey.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Zecrey *ZecreyCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Zecrey *ZecreySession) Paused() (bool, error) {
	return _Zecrey.Contract.Paused(&_Zecrey.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Zecrey *ZecreyCallerSession) Paused() (bool, error) {
	return _Zecrey.Contract.Paused(&_Zecrey.CallOpts)
}

// StoredBlockHashes is a free data retrieval call binding the contract method 0x9ba0d146.
//
// Solidity: function storedBlockHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCaller) StoredBlockHashes(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "storedBlockHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StoredBlockHashes is a free data retrieval call binding the contract method 0x9ba0d146.
//
// Solidity: function storedBlockHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreySession) StoredBlockHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHashes(&_Zecrey.CallOpts, arg0)
}

// StoredBlockHashes is a free data retrieval call binding the contract method 0x9ba0d146.
//
// Solidity: function storedBlockHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) StoredBlockHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHashes(&_Zecrey.CallOpts, arg0)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksCommitted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksCommitted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksProcessed is a free data retrieval call binding the contract method 0x9640ebde.
//
// Solidity: function totalBlocksProcessed() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksProcessed(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksProcessed")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksProcessed is a free data retrieval call binding the contract method 0x9640ebde.
//
// Solidity: function totalBlocksProcessed() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksProcessed() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksProcessed(&_Zecrey.CallOpts)
}

// TotalBlocksProcessed is a free data retrieval call binding the contract method 0x9640ebde.
//
// Solidity: function totalBlocksProcessed() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksProcessed() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksProcessed(&_Zecrey.CallOpts)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xc6c62390.
//
// Solidity: function totalDeposited(uint256 ) view returns(uint256)
func (_Zecrey *ZecreyCaller) TotalDeposited(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalDeposited", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalDeposited is a free data retrieval call binding the contract method 0xc6c62390.
//
// Solidity: function totalDeposited(uint256 ) view returns(uint256)
func (_Zecrey *ZecreySession) TotalDeposited(arg0 *big.Int) (*big.Int, error) {
	return _Zecrey.Contract.TotalDeposited(&_Zecrey.CallOpts, arg0)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xc6c62390.
//
// Solidity: function totalDeposited(uint256 ) view returns(uint256)
func (_Zecrey *ZecreyCallerSession) TotalDeposited(arg0 *big.Int) (*big.Int, error) {
	return _Zecrey.Contract.TotalDeposited(&_Zecrey.CallOpts, arg0)
}

// TotalWithdrawn is a free data retrieval call binding the contract method 0xa009f7e4.
//
// Solidity: function totalWithdrawn(uint256 ) view returns(uint256)
func (_Zecrey *ZecreyCaller) TotalWithdrawn(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalWithdrawn", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawn is a free data retrieval call binding the contract method 0xa009f7e4.
//
// Solidity: function totalWithdrawn(uint256 ) view returns(uint256)
func (_Zecrey *ZecreySession) TotalWithdrawn(arg0 *big.Int) (*big.Int, error) {
	return _Zecrey.Contract.TotalWithdrawn(&_Zecrey.CallOpts, arg0)
}

// TotalWithdrawn is a free data retrieval call binding the contract method 0xa009f7e4.
//
// Solidity: function totalWithdrawn(uint256 ) view returns(uint256)
func (_Zecrey *ZecreyCallerSession) TotalWithdrawn(arg0 *big.Int) (*big.Int, error) {
	return _Zecrey.Contract.TotalWithdrawn(&_Zecrey.CallOpts, arg0)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Zecrey *ZecreyCaller) Verifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Zecrey *ZecreySession) Verifier() (common.Address, error) {
	return _Zecrey.Contract.Verifier(&_Zecrey.CallOpts)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Zecrey *ZecreyCallerSession) Verifier() (common.Address, error) {
	return _Zecrey.Contract.Verifier(&_Zecrey.CallOpts)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactor) TransferERC20(opts *bind.TransactOpts, _token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "_transferERC20", _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreySession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactorSession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x358ca6d4.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256) _lastCommittedBlockData, (uint32,bytes32,bytes,(uint8,uint32,address,string,uint128)[],uint256)[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactor) CommitBlocks(opts *bind.TransactOpts, _lastCommittedBlockData StorageBlock, _newBlocksData []ZecreyCommitBlock) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "commitBlocks", _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x358ca6d4.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256) _lastCommittedBlockData, (uint32,bytes32,bytes,(uint8,uint32,address,string,uint128)[],uint256)[] _newBlocksData) returns()
func (_Zecrey *ZecreySession) CommitBlocks(_lastCommittedBlockData StorageBlock, _newBlocksData []ZecreyCommitBlock) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x358ca6d4.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256) _lastCommittedBlockData, (uint32,bytes32,bytes,(uint8,uint32,address,string,uint128)[],uint256)[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactorSession) CommitBlocks(_lastCommittedBlockData StorageBlock, _newBlocksData []ZecreyCommitBlock) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// Deposit is a paid mutator transaction binding the contract method 0x6567be15.
//
// Solidity: function deposit(uint32 assetId, string zecreyAddr, uint128 amount) payable returns()
func (_Zecrey *ZecreyTransactor) Deposit(opts *bind.TransactOpts, assetId uint32, zecreyAddr string, amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "deposit", assetId, zecreyAddr, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x6567be15.
//
// Solidity: function deposit(uint32 assetId, string zecreyAddr, uint128 amount) payable returns()
func (_Zecrey *ZecreySession) Deposit(assetId uint32, zecreyAddr string, amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.Deposit(&_Zecrey.TransactOpts, assetId, zecreyAddr, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x6567be15.
//
// Solidity: function deposit(uint32 assetId, string zecreyAddr, uint128 amount) payable returns()
func (_Zecrey *ZecreyTransactorSession) Deposit(assetId uint32, zecreyAddr string, amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.Deposit(&_Zecrey.TransactOpts, assetId, zecreyAddr, amount)
}

// ProcessBlocks is a paid mutator transaction binding the contract method 0x53daf596.
//
// Solidity: function processBlocks(((uint32,bytes32,bytes32,uint256),uint256[],uint256[2],uint256[2][2],uint256[2])[] _blocks) returns()
func (_Zecrey *ZecreyTransactor) ProcessBlocks(opts *bind.TransactOpts, _blocks []ZecreyProcessBlock) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "processBlocks", _blocks)
}

// ProcessBlocks is a paid mutator transaction binding the contract method 0x53daf596.
//
// Solidity: function processBlocks(((uint32,bytes32,bytes32,uint256),uint256[],uint256[2],uint256[2][2],uint256[2])[] _blocks) returns()
func (_Zecrey *ZecreySession) ProcessBlocks(_blocks []ZecreyProcessBlock) (*types.Transaction, error) {
	return _Zecrey.Contract.ProcessBlocks(&_Zecrey.TransactOpts, _blocks)
}

// ProcessBlocks is a paid mutator transaction binding the contract method 0x53daf596.
//
// Solidity: function processBlocks(((uint32,bytes32,bytes32,uint256),uint256[],uint256[2],uint256[2][2],uint256[2])[] _blocks) returns()
func (_Zecrey *ZecreyTransactorSession) ProcessBlocks(_blocks []ZecreyProcessBlock) (*types.Transaction, error) {
	return _Zecrey.Contract.ProcessBlocks(&_Zecrey.TransactOpts, _blocks)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Zecrey *ZecreyTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Zecrey *ZecreySession) RenounceOwnership() (*types.Transaction, error) {
	return _Zecrey.Contract.RenounceOwnership(&_Zecrey.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Zecrey *ZecreyTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Zecrey.Contract.RenounceOwnership(&_Zecrey.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Zecrey *ZecreyTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Zecrey *ZecreySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferOwnership(&_Zecrey.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Zecrey *ZecreyTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferOwnership(&_Zecrey.TransactOpts, newOwner)
}

// UpdateGovernance is a paid mutator transaction binding the contract method 0xb2561263.
//
// Solidity: function updateGovernance(address _governanceAddress) returns()
func (_Zecrey *ZecreyTransactor) UpdateGovernance(opts *bind.TransactOpts, _governanceAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "updateGovernance", _governanceAddress)
}

// UpdateGovernance is a paid mutator transaction binding the contract method 0xb2561263.
//
// Solidity: function updateGovernance(address _governanceAddress) returns()
func (_Zecrey *ZecreySession) UpdateGovernance(_governanceAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.UpdateGovernance(&_Zecrey.TransactOpts, _governanceAddress)
}

// UpdateGovernance is a paid mutator transaction binding the contract method 0xb2561263.
//
// Solidity: function updateGovernance(address _governanceAddress) returns()
func (_Zecrey *ZecreyTransactorSession) UpdateGovernance(_governanceAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.UpdateGovernance(&_Zecrey.TransactOpts, _governanceAddress)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifierAddress) returns()
func (_Zecrey *ZecreyTransactor) UpdateVerifier(opts *bind.TransactOpts, _verifierAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "updateVerifier", _verifierAddress)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifierAddress) returns()
func (_Zecrey *ZecreySession) UpdateVerifier(_verifierAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.UpdateVerifier(&_Zecrey.TransactOpts, _verifierAddress)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifierAddress) returns()
func (_Zecrey *ZecreyTransactorSession) UpdateVerifier(_verifierAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.UpdateVerifier(&_Zecrey.TransactOpts, _verifierAddress)
}

// ZecreyBlockCommitIterator is returned from FilterBlockCommit and is used to iterate over the raw logs and unpacked data for BlockCommit events raised by the Zecrey contract.
type ZecreyBlockCommitIterator struct {
	Event *ZecreyBlockCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockCommit represents a BlockCommit event raised by the Zecrey contract.
type ZecreyBlockCommit struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockCommit is a free log retrieval operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockCommit(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockCommitIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockCommit", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockCommitIterator{contract: _Zecrey.contract, event: "BlockCommit", logs: logs, sub: sub}, nil
}

// WatchBlockCommit is a free log subscription operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockCommit(opts *bind.WatchOpts, sink chan<- *ZecreyBlockCommit, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockCommit", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockCommit)
				if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockCommit is a log parse operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockCommit(log types.Log) (*ZecreyBlockCommit, error) {
	event := new(ZecreyBlockCommit)
	if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlockProcessedIterator is returned from FilterBlockProcessed and is used to iterate over the raw logs and unpacked data for BlockProcessed events raised by the Zecrey contract.
type ZecreyBlockProcessedIterator struct {
	Event *ZecreyBlockProcessed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockProcessedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockProcessed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockProcessed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockProcessedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockProcessedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockProcessed represents a BlockProcessed event raised by the Zecrey contract.
type ZecreyBlockProcessed struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockProcessed is a free log retrieval operation binding the contract event 0x374928a3faa7ad4f822f66c97ea5736e1a6b41ede9b1ee7f21cc268646fec9f2.
//
// Solidity: event BlockProcessed(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockProcessed(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockProcessedIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockProcessed", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockProcessedIterator{contract: _Zecrey.contract, event: "BlockProcessed", logs: logs, sub: sub}, nil
}

// WatchBlockProcessed is a free log subscription operation binding the contract event 0x374928a3faa7ad4f822f66c97ea5736e1a6b41ede9b1ee7f21cc268646fec9f2.
//
// Solidity: event BlockProcessed(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockProcessed(opts *bind.WatchOpts, sink chan<- *ZecreyBlockProcessed, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockProcessed", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockProcessed)
				if err := _Zecrey.contract.UnpackLog(event, "BlockProcessed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockProcessed is a log parse operation binding the contract event 0x374928a3faa7ad4f822f66c97ea5736e1a6b41ede9b1ee7f21cc268646fec9f2.
//
// Solidity: event BlockProcessed(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockProcessed(log types.Log) (*ZecreyBlockProcessed, error) {
	event := new(ZecreyBlockProcessed)
	if err := _Zecrey.contract.UnpackLog(event, "BlockProcessed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Zecrey contract.
type ZecreyDepositIterator struct {
	Event *ZecreyDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDeposit represents a Deposit event raised by the Zecrey contract.
type ZecreyDeposit struct {
	OpIndex       *big.Int
	AssetId       uint32
	ZecreyAddr    string
	DepositAmount *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xb8d82369bab3adee97c3101ea8c2a393ccdc2709e79d5b8053144134e49565fc.
//
// Solidity: event Deposit(uint256 opIndex, uint32 assetId, string zecreyAddr, uint128 depositAmount)
func (_Zecrey *ZecreyFilterer) FilterDeposit(opts *bind.FilterOpts) (*ZecreyDepositIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositIterator{contract: _Zecrey.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xb8d82369bab3adee97c3101ea8c2a393ccdc2709e79d5b8053144134e49565fc.
//
// Solidity: event Deposit(uint256 opIndex, uint32 assetId, string zecreyAddr, uint128 depositAmount)
func (_Zecrey *ZecreyFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *ZecreyDeposit) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDeposit)
				if err := _Zecrey.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xb8d82369bab3adee97c3101ea8c2a393ccdc2709e79d5b8053144134e49565fc.
//
// Solidity: event Deposit(uint256 opIndex, uint32 assetId, string zecreyAddr, uint128 depositAmount)
func (_Zecrey *ZecreyFilterer) ParseDeposit(log types.Log) (*ZecreyDeposit, error) {
	event := new(ZecreyDeposit)
	if err := _Zecrey.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyGovernanceUpdatedIterator is returned from FilterGovernanceUpdated and is used to iterate over the raw logs and unpacked data for GovernanceUpdated events raised by the Zecrey contract.
type ZecreyGovernanceUpdatedIterator struct {
	Event *ZecreyGovernanceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyGovernanceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyGovernanceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyGovernanceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyGovernanceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyGovernanceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyGovernanceUpdated represents a GovernanceUpdated event raised by the Zecrey contract.
type ZecreyGovernanceUpdated struct {
	GovernanceAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterGovernanceUpdated is a free log retrieval operation binding the contract event 0x9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab.
//
// Solidity: event GovernanceUpdated(address indexed governanceAddress)
func (_Zecrey *ZecreyFilterer) FilterGovernanceUpdated(opts *bind.FilterOpts, governanceAddress []common.Address) (*ZecreyGovernanceUpdatedIterator, error) {

	var governanceAddressRule []interface{}
	for _, governanceAddressItem := range governanceAddress {
		governanceAddressRule = append(governanceAddressRule, governanceAddressItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "GovernanceUpdated", governanceAddressRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyGovernanceUpdatedIterator{contract: _Zecrey.contract, event: "GovernanceUpdated", logs: logs, sub: sub}, nil
}

// WatchGovernanceUpdated is a free log subscription operation binding the contract event 0x9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab.
//
// Solidity: event GovernanceUpdated(address indexed governanceAddress)
func (_Zecrey *ZecreyFilterer) WatchGovernanceUpdated(opts *bind.WatchOpts, sink chan<- *ZecreyGovernanceUpdated, governanceAddress []common.Address) (event.Subscription, error) {

	var governanceAddressRule []interface{}
	for _, governanceAddressItem := range governanceAddress {
		governanceAddressRule = append(governanceAddressRule, governanceAddressItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "GovernanceUpdated", governanceAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyGovernanceUpdated)
				if err := _Zecrey.contract.UnpackLog(event, "GovernanceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernanceUpdated is a log parse operation binding the contract event 0x9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab.
//
// Solidity: event GovernanceUpdated(address indexed governanceAddress)
func (_Zecrey *ZecreyFilterer) ParseGovernanceUpdated(log types.Log) (*ZecreyGovernanceUpdated, error) {
	event := new(ZecreyGovernanceUpdated)
	if err := _Zecrey.contract.UnpackLog(event, "GovernanceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Zecrey contract.
type ZecreyOwnershipTransferredIterator struct {
	Event *ZecreyOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyOwnershipTransferred represents a OwnershipTransferred event raised by the Zecrey contract.
type ZecreyOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Zecrey *ZecreyFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ZecreyOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyOwnershipTransferredIterator{contract: _Zecrey.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Zecrey *ZecreyFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ZecreyOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyOwnershipTransferred)
				if err := _Zecrey.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Zecrey *ZecreyFilterer) ParseOwnershipTransferred(log types.Log) (*ZecreyOwnershipTransferred, error) {
	event := new(ZecreyOwnershipTransferred)
	if err := _Zecrey.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Zecrey contract.
type ZecreyPausedIterator struct {
	Event *ZecreyPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyPaused represents a Paused event raised by the Zecrey contract.
type ZecreyPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Zecrey *ZecreyFilterer) FilterPaused(opts *bind.FilterOpts) (*ZecreyPausedIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ZecreyPausedIterator{contract: _Zecrey.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Zecrey *ZecreyFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ZecreyPaused) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyPaused)
				if err := _Zecrey.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Zecrey *ZecreyFilterer) ParsePaused(log types.Log) (*ZecreyPaused, error) {
	event := new(ZecreyPaused)
	if err := _Zecrey.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Zecrey contract.
type ZecreyUnpausedIterator struct {
	Event *ZecreyUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyUnpaused represents a Unpaused event raised by the Zecrey contract.
type ZecreyUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Zecrey *ZecreyFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ZecreyUnpausedIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ZecreyUnpausedIterator{contract: _Zecrey.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Zecrey *ZecreyFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ZecreyUnpaused) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyUnpaused)
				if err := _Zecrey.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Zecrey *ZecreyFilterer) ParseUnpaused(log types.Log) (*ZecreyUnpaused, error) {
	event := new(ZecreyUnpaused)
	if err := _Zecrey.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyVerifierUpdatedIterator is returned from FilterVerifierUpdated and is used to iterate over the raw logs and unpacked data for VerifierUpdated events raised by the Zecrey contract.
type ZecreyVerifierUpdatedIterator struct {
	Event *ZecreyVerifierUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyVerifierUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyVerifierUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyVerifierUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyVerifierUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyVerifierUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyVerifierUpdated represents a VerifierUpdated event raised by the Zecrey contract.
type ZecreyVerifierUpdated struct {
	VerifierAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterVerifierUpdated is a free log retrieval operation binding the contract event 0xd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee327.
//
// Solidity: event VerifierUpdated(address indexed verifierAddress)
func (_Zecrey *ZecreyFilterer) FilterVerifierUpdated(opts *bind.FilterOpts, verifierAddress []common.Address) (*ZecreyVerifierUpdatedIterator, error) {

	var verifierAddressRule []interface{}
	for _, verifierAddressItem := range verifierAddress {
		verifierAddressRule = append(verifierAddressRule, verifierAddressItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "VerifierUpdated", verifierAddressRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyVerifierUpdatedIterator{contract: _Zecrey.contract, event: "VerifierUpdated", logs: logs, sub: sub}, nil
}

// WatchVerifierUpdated is a free log subscription operation binding the contract event 0xd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee327.
//
// Solidity: event VerifierUpdated(address indexed verifierAddress)
func (_Zecrey *ZecreyFilterer) WatchVerifierUpdated(opts *bind.WatchOpts, sink chan<- *ZecreyVerifierUpdated, verifierAddress []common.Address) (event.Subscription, error) {

	var verifierAddressRule []interface{}
	for _, verifierAddressItem := range verifierAddress {
		verifierAddressRule = append(verifierAddressRule, verifierAddressItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "VerifierUpdated", verifierAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyVerifierUpdated)
				if err := _Zecrey.contract.UnpackLog(event, "VerifierUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifierUpdated is a log parse operation binding the contract event 0xd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee327.
//
// Solidity: event VerifierUpdated(address indexed verifierAddress)
func (_Zecrey *ZecreyFilterer) ParseVerifierUpdated(log types.Log) (*ZecreyVerifierUpdated, error) {
	event := new(ZecreyVerifierUpdated)
	if err := _Zecrey.contract.UnpackLog(event, "VerifierUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Zecrey contract.
type ZecreyWithdrawIterator struct {
	Event *ZecreyWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdraw represents a Withdraw event raised by the Zecrey contract.
type ZecreyWithdraw struct {
	AssetId        uint32
	NativeAddr     common.Address
	WithdrawAmount *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x1cda6b03be2faab4c7e14e89e87c872b8548c10e69d81efd1ba5f0a219e04037.
//
// Solidity: event Withdraw(uint32 assetId, address nativeAddr, uint128 withdrawAmount)
func (_Zecrey *ZecreyFilterer) FilterWithdraw(opts *bind.FilterOpts) (*ZecreyWithdrawIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawIterator{contract: _Zecrey.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x1cda6b03be2faab4c7e14e89e87c872b8548c10e69d81efd1ba5f0a219e04037.
//
// Solidity: event Withdraw(uint32 assetId, address nativeAddr, uint128 withdrawAmount)
func (_Zecrey *ZecreyFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *ZecreyWithdraw) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdraw)
				if err := _Zecrey.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x1cda6b03be2faab4c7e14e89e87c872b8548c10e69d81efd1ba5f0a219e04037.
//
// Solidity: event Withdraw(uint32 assetId, address nativeAddr, uint128 withdrawAmount)
func (_Zecrey *ZecreyFilterer) ParseWithdraw(log types.Log) (*ZecreyWithdraw, error) {
	event := new(ZecreyWithdraw)
	if err := _Zecrey.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
