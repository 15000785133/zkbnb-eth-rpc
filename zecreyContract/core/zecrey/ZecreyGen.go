// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package zecrey

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StorageBlock is an auto generated low-level Go binding around an user-defined struct.
type StorageBlock struct {
	BlockNumber uint32
	AccountRoot [32]byte
	Commitment  [32]byte
	Timestamp   *big.Int
}

// ZecreyCommitBlock is an auto generated low-level Go binding around an user-defined struct.
type ZecreyCommitBlock struct {
	BlockNumber        uint32
	NewAccountRoot     [32]byte
	PublicData         []byte
	WithdrawOperations []ZecreyOperation
	Timestamp          *big.Int
}

// ZecreyOperation is an auto generated low-level Go binding around an user-defined struct.
type ZecreyOperation struct {
	ChainId    uint8
	TxType     uint8
	AssetId    uint32
	NativeAddr common.Address
	ZecreyAddr string
	Amount     *big.Int
}

// ZecreyProcessBlock is an auto generated low-level Go binding around an user-defined struct.
type ZecreyProcessBlock struct {
	BlockInfo StorageBlock
	A         [2]*big.Int
	B         [2][2]*big.Int
	C         [2]*big.Int
}

// ZecreyABI is the input ABI used to generate the binding from.
const ZecreyABI = "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_chainId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"depositAmount\",\"type\":\"uint128\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"VerifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"withdrawAmount\",\"type\":\"uint128\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxAmount\",\"type\":\"uint128\"}],\"name\":\"_transferERC20\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetETH\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structStorage.Block\",\"name\":\"_lastCommittedBlockData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"newAccountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"publicData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"chainId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"structZecrey.Operation[]\",\"name\":\"withdrawOperations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structZecrey.CommitBlock[]\",\"name\":\"_newBlocksData\",\"type\":\"tuple[]\"}],\"name\":\"commitBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"newAccountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"publicData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"chainId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"structZecrey.Operation[]\",\"name\":\"withdrawOperations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structZecrey.CommitBlock\",\"name\":\"_newBlock\",\"type\":\"tuple\"}],\"name\":\"getCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structStorage.Block\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"}],\"name\":\"getTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contractIGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onchainOperations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"chainId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"nativeAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"zecreyAddr\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onchainOperationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOperationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"structStorage.Block\",\"name\":\"blockInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"structZecrey.ProcessBlock[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"}],\"name\":\"processBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"storedBlockHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksCommitted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksProcessed\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"name\":\"updateGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"}],\"name\":\"updateVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contractIVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ZecreyBin is the compiled bytecode used for deploying new contracts.
var ZecreyBin = "0x60806040527f38723a2e5e8a17aa7950dc008209944e898f69a7bd10a23c839d341e935fd5ca60001b60006000509060001916905560006202000560005090905560006202000660005090905560006202000760006101000a81548160ff021916908360ff16021790555060016202000760016101000a81548160ff021916908360ff16021790555060026202000760026101000a81548160ff021916908360ff16021790555060036202000760036101000a81548160ff021916908360ff16021790555060046202000760046101000a81548160ff021916908360ff16021790555060056202000760056101000a81548160ff021916908360ff1602179055503480156200010e5760006000fd5b506040516200538e3803806200538e833981810160405281019062000134919062000375565b5b5b5b6000620001496200033260201b60201c565b9050806202000360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505b60006202000360146101000a81548160ff0219169083151502179055505b826202000760006101000a81548160ff021916908360ff160217905550806202000760066101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816202000860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006000505460016000506000600063ffffffff168152602001908152602001600020600050819090600019169055506000600360005060006201000081101515620002f457fe5b90900160005b50819090905550600062010003600050600062010000811015156200031b57fe5b90900160005b508190909055505b5050506200044f565b60003390506200033d565b90566200044e565b600081519050620003568162000412565b5b92915050565b6000815190506200036e8162000430565b5b92915050565b600060006000606084860312156200038d5760006000fd5b60006200039d868287016200035d565b9350506020620003b08682870162000345565b9250506040620003c38682870162000345565b9150505b9250925092565b6000620003db82620003e3565b90505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b600060ff821690505b919050565b6200041d81620003ce565b811415156200042c5760006000fd5b5b50565b6200043b8162000404565b811415156200044a5760006000fd5b5b50565b5b614f2f806200045f6000396000f3fe6080604052600436106101855760003560e01c8063987f5f7a116100d1578063b25612631161008a578063c6c6239011610064578063c6c6239014610593578063e21cc0b7146105d1578063f2fde38b14610614578063faf4d8cb1461063e57610185565b8063b256126314610511578063b6ebb1331461053b578063bb64db2b1461056757610185565b8063987f5f7a146103d35780639a8a0592146103ff5780639ba0d1461461042b5780639fe8590814610469578063a009f7e4146104a7578063a7ccec2f146104e557610185565b80636567be151161013e5780638da5cb5b116101185780638da5cb5b146103135780638ee1a74e1461033f5780639640ebde1461037d57806397fc007c146103a957610185565b80636567be15146102b55780636a15c5a4146102d1578063715018a6146102fb57610185565b80630a2661f81461018b5780632b7ac3f3146101c957806359e5157e146101f55780635a8bd54c1461021f5780635aa6e6751461025d5780635c975abb1461028957610185565b60006000fd5b3480156101985760006000fd5b506101b360048036038101906101ae9190613c60565b61066a565b6040516101c09190614633565b60405180910390f35b3480156101d65760006000fd5b506101df610689565b6040516101ec91906146b1565b60405180910390f35b3480156102025760006000fd5b5061021d60048036038101906102189190613bc6565b6106b1565b005b34801561022c5760006000fd5b5061024760048036038101906102429190613e23565b6107d1565b6040516102549190614936565b60405180910390f35b34801561026a5760006000fd5b50610273610801565b6040516102809190614695565b60405180910390f35b3480156102965760006000fd5b5061029f610829565b6040516102ac9190614617565b60405180910390f35b6102cf60048036038101906102ca9190613e4e565b610847565b005b3480156102de5760006000fd5b506102f960048036038101906102f49190613d4a565b610e1b565b005b3480156103085760006000fd5b5061031161112c565b005b3480156103205760006000fd5b506103296112b3565b60405161033691906145b5565b60405180910390f35b34801561034c5760006000fd5b5061036760048036038101906103629190613cb8565b6112e4565b604051610374919061491a565b60405180910390f35b34801561038a5760006000fd5b5061039361156a565b6040516103a09190614952565b60405180910390f35b3480156103b65760006000fd5b506103d160048036038101906103cc9190613b70565b611580565b005b3480156103e05760006000fd5b506103e96116cb565b6040516103f69190614936565b60405180910390f35b34801561040c5760006000fd5b506104156116d6565b60405161042291906149f3565b60405180910390f35b3480156104385760006000fd5b50610453600480360381019061044e9190613e23565b6116eb565b6040516104609190614633565b60405180910390f35b3480156104765760006000fd5b50610491600480360381019061048c9190613d1f565b611706565b60405161049e9190614633565b60405180910390f35b3480156104b45760006000fd5b506104cf60048036038101906104ca9190613dcd565b611723565b6040516104dc9190614936565b60405180910390f35b3480156104f25760006000fd5b506104fb611748565b6040516105089190614633565b60405180910390f35b34801561051e5760006000fd5b5061053960048036038101906105349190613b70565b611751565b005b3480156105485760006000fd5b5061055161189c565b60405161055e9190614936565b60405180910390f35b3480156105745760006000fd5b5061057d6118a7565b60405161058a9190614952565b60405180910390f35b3480156105a05760006000fd5b506105bb60048036038101906105b69190613dcd565b6118ac565b6040516105c89190614936565b60405180910390f35b3480156105de5760006000fd5b506105f960048036038101906105f49190613dcd565b6118cf565b60405161060b96959493929190614a0f565b60405180910390f35b3480156106215760006000fd5b5061063c60048036038101906106379190613b70565b611a11565b005b34801561064b5760006000fd5b50610654611c1f565b6040516106619190614952565b60405180910390f35b600061067c8383611c3563ffffffff16565b9050610683565b92915050565b6202000760069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106bf61082963ffffffff16565b151515610737576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081526020015060200191505060405180910390fd5b6000600090505b81518163ffffffff16101561078657610778828263ffffffff1681518110151561076457fe5b602002602001015182611d5863ffffffff16565b5b808060010191505061073e565b5061079781516122fc63ffffffff16565b600260048282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff1602179055505b5b50565b600060036000508263ffffffff1662010000811015156107ed57fe5b90900160005b505490506107fc565b919050565b6202000860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006202000360149054906101000a900460ff169050610844565b90565b61085561082963ffffffff16565b1515156108cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081526020015060200191505060405180910390fd5b600063ffffffff168363ffffffff16141561095e57806fffffffffffffffffffffffffffffffff1634141515610938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092f90614793565b60405180910390fd5b6109593360008461094e3461238a63ffffffff16565b61242463ffffffff16565b610e14565b6000341415156109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099a90614751565b60405180910390fd5b6202000860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b7df2b9846040518263ffffffff1660e01b8152600401610a009190614952565b60206040518083038186803b158015610a195760006000fd5b505afa158015610a2e573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a529190613c0a565b1515610a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8a90614730565b60405180910390fd5b60006202000860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e53cea33856040518263ffffffff1660e01b8152600401610af29190614952565b60206040518083038186803b158015610b0b5760006000fd5b505afa158015610b20573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b449190613b9b565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610b889291906145ed565b60206040518083038186803b158015610ba15760006000fd5b505afa158015610bb6573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bda9190613df8565b9050836fffffffffffffffffffffffffffffffff168110151515610c33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2a906147f6565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c6e91906145b5565b60206040518083038186803b158015610c875760006000fd5b505afa158015610c9c573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc09190613df8565b9050610d06833330610ce9896fffffffffffffffffffffffffffffffff1661238a63ffffffff16565b6fffffffffffffffffffffffffffffffff1661269463ffffffff16565b1515610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e90614772565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d8291906145b5565b60206040518083038186803b158015610d9b5760006000fd5b505afa158015610db0573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd49190613df8565b90506000610df9610dee848461287390919063ffffffff16565b61238a63ffffffff16565b9050610e0d338a8a8461242463ffffffff16565b5050505050505b5b5b505050565b610e2961082963ffffffff16565b151515610ea1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081526020015060200191505060405180910390fd5b6202000860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2d53d7c336040518263ffffffff1660e01b8152600401610efe91906145d1565b60206040518083038186803b158015610f175760006000fd5b505afa158015610f2c573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f509190613c0a565b1515610f91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f88906148bc565b60405180910390fd5b610fa08261290063ffffffff16565b6000191660016000506000600260009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020016000206000505460001916141515611022576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611019906147b4565b60405180910390fd5b6000600090505b81518163ffffffff1610156110ee5761106383838363ffffffff1681518110151561105057fe5b602002602001015161297e63ffffffff16565b925082506110768361290063ffffffff16565b60016000506000856000015163ffffffff1663ffffffff16815260200190815260200160002060005081909060001916905550826000015163ffffffff167f81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b626842460405160405180910390a25b8080600101915050611029565b508051600260008282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff1602179055505b5b5050565b61113a612aa663ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1661115e6112b363ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff161415156111ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281526020015060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166202000360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360006202000360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b565b60006202000360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506112e1565b90565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134d90614859565b60405180910390fd5b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161139191906145b5565b60206040518083038186803b1580156113aa5760006000fd5b505afa1580156113bf573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e39190613df8565b90506114088686866fffffffffffffffffffffffffffffffff16612ab363ffffffff16565b1515611449576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114409061489b565b60405180910390fd5b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161148491906145b5565b60206040518083038186803b15801561149d5760006000fd5b505afa1580156114b2573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d69190613df8565b905060006114ed828461287390919063ffffffff16565b9050846fffffffffffffffffffffffffffffffff168111151515611546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153d9061470f565b60405180910390fd5b6115558161238a63ffffffff16565b9350505050611562565050505b949350505050565b600260049054906101000a900463ffffffff1681565b61158e612aa663ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff166115b26112b363ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16141515611640576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281526020015060200191505060405180910390fd5b806202000760066101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee32760405160405180910390a25b5b50565b620200056000505481565b6202000760009054906101000a900460ff1681565b60016000506020528060005260406000206000915090505481565b60006117178261290063ffffffff16565b905061171e565b919050565b620100036000508162010000811061173a57600080fd5b90900160005b915090505481565b60006000505481565b61175f612aa663ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff166117836112b363ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16141515611811576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281526020015060200191505060405180910390fd5b806202000860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab60405160405180910390a25b5b50565b620200066000505481565b600081565b6003600050816201000081106118c157600080fd5b90900160005b915090505481565b620200046000506020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900463ffffffff16908060000160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119e55780601f106119ba576101008083540402835291602001916119e5565b820191906000526020600020905b8154815290600101906020018083116119c857829003601f168201915b5050505050908060020160009054906101000a90046fffffffffffffffffffffffffffffffff16905086565b611a1f612aa663ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16611a436112b363ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16141515611ad1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281526020015060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180614ed46026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166202000360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806202000360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b600260009054906101000a900463ffffffff1681565b60006000600284604051602001611c4c919061450f565b604051602081830303815290604052604051611c689190614587565b602060405180830381855afa158015611c86573d600060003e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ca99190613c35565b90506002818460000151856020015186604001518760800151604051602001611cd695949392919061452b565b604051602081830303815290604052604051611cf29190614587565b602060405180830381855afa158015611d10573d600060003e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611d339190613c35565b905080506000836040015190508051808252508192505050611d525650505b92915050565b6001600050600083600001516000015163ffffffff1663ffffffff1681526020019081526020016000206000505460001916611d9d836000015161290063ffffffff16565b60001916141515611de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dda906146ee565b60405180910390fd5b600181600260049054906101000a900463ffffffff16010163ffffffff1682600001516000015163ffffffff16141515611e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e49906147d5565b60405180910390fd5b60006202000660005054620200056000505403905060008190505b62020005600050548110156122a25760006202000460005060008381526020019081526020016000206000506040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160069054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182016000508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ff65780601f10611fcb57610100808354040283529160200191611ff6565b820191906000526020600020905b815481529060010190602001808311611fd957829003601f168201915b505050505081526020016002820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001505090506000816020015160ff161415151561209b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209290614817565b60405180910390fd5b6202000760029054906101000a900460ff1660ff16816020015160ff161415612191576202000660008181505480929190600190039190509090555062020004600050600083815260200190815260200160002060006000820160006101000a81549060ff02191690556000820160016101000a81549060ff02191690556000820160026101000a81549063ffffffff02191690556000820160066101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006121679190613315565b6002820160006101000a8154906fffffffffffffffffffffffffffffffff02191690555050612293565b6202000760059054906101000a900460ff1660ff16816020015160ff161415612292576121c381612c7363ffffffff16565b6202000660008181505480929190600190039190509090555062020004600050600083815260200190815260200160002060006000820160006101000a81549060ff02191690556000820160016101000a81549060ff02191690556000820160026101000a81549063ffffffff02191690556000820160066101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600061226c9190613315565b6002820160006101000a8154906fffffffffffffffffffffffffffffffff021916905550505b5b505b8080600101915050611e6d565b5082600001516020015160006000508190906000191690555082600001516000015163ffffffff167f374928a3faa7ad4f822f66c97ea5736e1a6b41ede9b1ee7f21cc268646fec9f260405160405180910390a2505b5050565b60006401000000008210151561237d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f313800000000000000000000000000000000000000000000000000000000000081526020015060200191505060405180910390fd5b819050612385565b919050565b600070010000000000000000000000000000000082101515612417576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f313600000000000000000000000000000000000000000000000000000000000081526020015060200191505060405180910390fd5b81905061241f565b919050565b6040518060c001604052806202000760009054906101000a900460ff1660ff1681526020016202000760029054906101000a900460ff1660ff1681526020018463ffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001838152602001826fffffffffffffffffffffffffffffffff168152602001506202000460005060006202000560005054815260200190815260200160002060005060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548163ffffffff021916908363ffffffff16021790555060608201518160000160066101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550608082015181600101600050908051906020019061259b92919061335d565b5060a08201518160020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550905050806fffffffffffffffffffffffffffffffff1660036000508463ffffffff16620100008110151561260b57fe5b90900160005b8282825054019250508190909055506202000560008181505480929190600101919050909055506202000660008181505480929190600101919050909055507f985c84346e3bff1de514922d1bf88270b4a50c525b86443aeeb1441c842e381583858484604051612685949392919061496e565b60405180910390a15b50505050565b6000600060008673ffffffffffffffffffffffffffffffffffffffff16868686604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040516020818303038152906040527f23b872dd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831015156127b157805182525b60208201915060208101905060208303925061278b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612813576040519150601f19603f3d011682016040523d82523d6000602084013e612818565b606091505b5091509150600060008251148061285257508180602001905160208110156128405760006000fd5b81019080805190602001909291905050505b905082801561285e5750805b935050505061286b565050505b949350505050565b60008282111515156128f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081526020015060200191505060405180910390fd5b81830390506128fa565b92915050565b600060028260405160200161291591906148fe565b6040516020818303038152906040526040516129319190614587565b602060405180830381855afa15801561294f573d600060003e3d6000fd5b5050506040513d601f19601f820116820180604052508101906129729190613c35565b9050612979565b919050565b6129866133f0565b600183600001510163ffffffff16826000015163ffffffff161415156129e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d890614838565b60405180910390fd5b8260600151826080015110151515612a2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a25906146cd565b60405180910390fd5b612a41826060015161302b63ffffffff16565b6000612a57846020015184611c3563ffffffff16565b90506040518060800160405280846000015163ffffffff1681526020018460200151600019168152602001826000191681526020018460800151815260200150915050612aa056505b92915050565b6000339050612ab0565b90565b6000600060008573ffffffffffffffffffffffffffffffffffffffff168585604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083101515612bb257805182525b602082019150602081019050602083039250612b8c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612c14576040519150601f19603f3d011682016040523d82523d6000602084013e612c19565b606091505b50915091506000600082511480612c535750818060200190516020811015612c415760006000fd5b81019080805190602001909291905050505b9050828015612c5f5750805b9350505050612c6c565050505b9392505050565b6202000760059054906101000a900460ff1660ff16816020015160ff16141515612cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc99061487a565b60405180910390fd5b6202000860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b7df2b982604001516040518263ffffffff1660e01b8152600401612d339190614952565b60206040518083038186803b158015612d4c5760006000fd5b505afa158015612d61573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d859190613c0a565b1515612dc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dbd90614730565b60405180910390fd5b600060009050600063ffffffff16826040015163ffffffff161415612e1e57600082606001519050612e14818460a001516fffffffffffffffffffffffffffffffff1661329263ffffffff16565b9150815050612f8c565b60006202000860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e53cea3384604001516040518263ffffffff1660e01b8152600401612e819190614952565b60206040518083038186803b158015612e9a5760006000fd5b505afa158015612eaf573d600060003e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed39190613b9b565b90503073ffffffffffffffffffffffffffffffffffffffff16638ee1a74e62030d408386606001518760a001518860a001516040518663ffffffff1660e01b8152600401612f24949392919061464f565b602060405180830381600088803b158015612f3f5760006000fd5b5087f193505050508015612f7157506040513d601f19601f82011682018060405250810190612f6e9190613da2565b60015b612f82575b6000915081505b612f8a565b506001915081505b505b8015613026578160a001516fffffffffffffffffffffffffffffffff1662010003600050836040015163ffffffff166201000081101515612fc957fe5b90900160005b8282825054019250508190909055507f1cda6b03be2faab4c7e14e89e87c872b8548c10e69d81efd1ba5f0a219e04037826040015183606001518460a0015160405161301d939291906149bb565b60405180910390a15b505b50565b6000600090505b81518163ffffffff16101561328d576202000760059054906101000a900460ff1660ff16828263ffffffff1681518110151561306a57fe5b60200260200101516020015160ff161415156130bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130b2906148dd565b60405180910390fd5b6202000760009054906101000a900460ff1660ff16828263ffffffff168151811015156130e457fe5b60200260200101516000015160ff161415156130ff57613280565b818163ffffffff1681518110151561311357fe5b60200260200101516202000460005060006202000560005054815260200190815260200160002060005060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548163ffffffff021916908363ffffffff16021790555060608201518160000160066101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550608082015181600101600050908051906020019061320c92919061335d565b5060a08201518160020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050506202000560008181505480929190600101919050909055506202000660008181505480929190600101919050909055505b8080600101915050613032565b505b50565b600060008373ffffffffffffffffffffffffffffffffffffffff1662030d40846040516132be9061459f565b600060405180830381858888f193505050503d80600081146132fc576040519150601f19603f3d011682016040523d82523d6000602084013e613301565b606091505b505090508091505061330f56505b92915050565b50805460018160011615610100020316600290046000825580601f1061333b575061335a565b601f0160209004906000526020600020908101906133599190613429565b5b50565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261339357600085556133df565b82601f106133ac57805160ff19168380011785556133df565b828001600101855582156133df579182015b828111156133de57825182600050909055916020019190600101906133be565b5b5090506133ec9190613429565b5090565b6040518060800160405280600063ffffffff16815260200160006000191681526020016000600019168152602001600081526020015090565b61342e565b80821115613448576000818150600090555060010161342e565b509056614ed2565b600061346361345e84614aaa565b614a78565b9050808285604086028201111561347a5760006000fd5b60005b858110156134ab578161349088826137ac565b8452602084019350604083019250505b60018101905061347d565b5050505b9392505050565b60006134c96134c484614ad1565b614a78565b9050808382526020820190508260005b8581101561350a57813585016134ef8882613901565b8452602084019350602083019250505b6001810190506134d9565b5050505b9392505050565b600061352861352384614afe565b614a78565b9050808382526020820190508260005b85811015613569578135850161354e88826139bd565b8452602084019350602083019250505b600181019050613538565b5050505b9392505050565b600061358761358284614b2b565b614a78565b90508083825260208201905082856101808602820111156135a85760006000fd5b60005b858110156135da57816135be8882613a74565b845260208401935061018083019250505b6001810190506135ab565b5050505b9392505050565b60006135f86135f384614b58565b614a78565b9050808285602086028201111561360f5760006000fd5b60005b8581101561364057816136258882613b18565b8452602084019350602083019250505b600181019050613612565b5050505b9392505050565b600061365e61365984614b7f565b614a78565b9050828152602081018484840111156136775760006000fd5b613682848285614d68565b505b9392505050565b600061369e61369984614bb0565b614a78565b9050828152602081018484840111156136b75760006000fd5b6136c2848285614d68565b505b9392505050565b6000813590506136da81614dfa565b5b92915050565b6000815190506136f081614dfa565b5b92915050565b600082601f830112151561370b5760006000fd5b6002613718848285613450565b9150505b92915050565b600082601f83011215156137365760006000fd5b81356137468482602086016134b6565b9150505b92915050565b600082601f83011215156137645760006000fd5b8135613774848260208601613515565b9150505b92915050565b600082601f83011215156137925760006000fd5b81356137a2848260208601613574565b9150505b92915050565b600082601f83011215156137c05760006000fd5b60026137cd8482856135e5565b9150505b92915050565b6000815190506137e681614e15565b5b92915050565b6000813590506137fc81614e30565b5b92915050565b60008151905061381281614e30565b5b92915050565b600082601f830112151561382d5760006000fd5b813561383d84826020860161364b565b9150505b92915050565b60008135905061385681614e4b565b5b92915050565b600082601f83011215156138715760006000fd5b813561388184826020860161368b565b9150505b92915050565b60006080828403121561389e5760006000fd5b6138a86080614a78565b905060006138b884828501613b44565b60008301525060206138cc848285016137ed565b60208301525060406138e0848285016137ed565b60408301525060606138f484828501613b18565b6060830152505b92915050565b600060a082840312156139145760006000fd5b61391e60a0614a78565b9050600061392e84828501613b44565b6000830152506020613942848285016137ed565b602083015250604082013567ffffffffffffffff8111156139635760006000fd5b61396f84828501613819565b604083015250606082013567ffffffffffffffff8111156139905760006000fd5b61399c84828501613750565b60608301525060806139b084828501613b18565b6080830152505b92915050565b600060c082840312156139d05760006000fd5b6139da60c0614a78565b905060006139ea84828501613b5a565b60008301525060206139fe84828501613b5a565b6020830152506040613a1284828501613b44565b6040830152506060613a26848285016136cb565b606083015250608082013567ffffffffffffffff811115613a475760006000fd5b613a538482850161385d565b60808301525060a0613a6784828501613aec565b60a0830152505b92915050565b60006101808284031215613a885760006000fd5b613a926080614a78565b90506000613aa28482850161388b565b6000830152506080613ab6848285016137ac565b60208301525060c0613aca848285016136f7565b604083015250610140613adf848285016137ac565b6060830152505b92915050565b600081359050613afb81614e66565b5b92915050565b600081519050613b1181614e66565b5b92915050565b600081359050613b2781614e81565b5b92915050565b600081519050613b3d81614e81565b5b92915050565b600081359050613b5381614e9c565b5b92915050565b600081359050613b6981614eb7565b5b92915050565b600060208284031215613b835760006000fd5b6000613b91848285016136cb565b9150505b92915050565b600060208284031215613bae5760006000fd5b6000613bbc848285016136e1565b9150505b92915050565b600060208284031215613bd95760006000fd5b600082013567ffffffffffffffff811115613bf45760006000fd5b613c008482850161377e565b9150505b92915050565b600060208284031215613c1d5760006000fd5b6000613c2b848285016137d7565b9150505b92915050565b600060208284031215613c485760006000fd5b6000613c5684828501613803565b9150505b92915050565b6000600060408385031215613c755760006000fd5b6000613c83858286016137ed565b925050602083013567ffffffffffffffff811115613ca15760006000fd5b613cad85828601613901565b9150505b9250929050565b600060006000600060808587031215613cd15760006000fd5b6000613cdf87828801613847565b9450506020613cf0878288016136cb565b9350506040613d0187828801613aec565b9250506060613d1287828801613aec565b9150505b92959194509250565b600060808284031215613d325760006000fd5b6000613d408482850161388b565b9150505b92915050565b6000600060a08385031215613d5f5760006000fd5b6000613d6d8582860161388b565b925050608083013567ffffffffffffffff811115613d8b5760006000fd5b613d9785828601613722565b9150505b9250929050565b600060208284031215613db55760006000fd5b6000613dc384828501613b02565b9150505b92915050565b600060208284031215613de05760006000fd5b6000613dee84828501613b18565b9150505b92915050565b600060208284031215613e0b5760006000fd5b6000613e1984828501613b2e565b9150505b92915050565b600060208284031215613e365760006000fd5b6000613e4484828501613b44565b9150505b92915050565b60006000600060608486031215613e655760006000fd5b6000613e7386828701613b44565b935050602084013567ffffffffffffffff811115613e915760006000fd5b613e9d8682870161385d565b9250506040613eae86828701613aec565b9150505b9250925092565b613ec281614cbd565b82525b5050565b613ed281614c17565b82525b5050565b613ee281614c2a565b82525b5050565b613ef281614c37565b82525b5050565b613f0281614c37565b82525b5050565b613f1a613f1582614c37565b614dad565b82525b5050565b6000613f2c82614be1565b613f368185614bf9565b9350613f46818560208601614d78565b8084019150505b92915050565b613f5c81614cd0565b82525b5050565b613f6c81614cf6565b82525b5050565b613f7c81614d1c565b82525b5050565b6000613f8e82614bed565b613f988185614c05565b9350613fa8818560208601614d78565b613fb181614dda565b84019150505b92915050565b6000613fca601183614c05565b91507f696e76616c69642074696d657374616d7000000000000000000000000000000060008301526020820190505b919050565b600061400b601383614c05565b91507f626c6f636b206e6f7420636f6d6d69747465640000000000000000000000000060008301526020820190505b919050565b600061404c600183614c05565b91507f370000000000000000000000000000000000000000000000000000000000000060008301526020820190505b919050565b600061408d601083614c05565b91507f696e76616c69642061737365742069640000000000000000000000000000000060008301526020820190505b919050565b60006140ce601483614c05565b91507f696e76616c6964207061796d656e74207479706500000000000000000000000060008301526020820190505b919050565b600061410f601483614c05565b91507f7472616e73666572206572633230206572726f7200000000000000000000000060008301526020820190505b919050565b6000614150601883614c05565b91507f696e76616c696420616d6f756e74206f6620617373657473000000000000000060008301526020820190505b919050565b6000614191601283614c05565b91507f696e76616c6964206c61737420626c6f636b000000000000000000000000000060008301526020820190505b919050565b60006141d2601483614c05565b91507f696e76616c696420626c6f636b206e756d62657200000000000000000000000060008301526020820190505b919050565b6000614213601483614c05565b91507f6e6f7420656e6f75676820616c6c6f77616e636500000000000000000000000060008301526020820190505b919050565b6000614254601d83614c05565b91507f6f6e2d636861696e206f7065726174696f6e206e6f742065786973747300000060008301526020820190505b919050565b6000614295600083614bf9565b91506000820190505b919050565b60006142b0601183614c05565b91507f696e76616c6964206e657720626c6f636b00000000000000000000000000000060008301526020820190505b919050565b60006142f1600183614c05565b91507f350000000000000000000000000000000000000000000000000000000000000060008301526020820190505b919050565b6000614332601683614c05565b91507f696e76616c6964206f7065726174696f6e20747970650000000000000000000060008301526020820190505b919050565b6000614373600183614c05565b91507f360000000000000000000000000000000000000000000000000000000000000060008301526020820190505b919050565b60006143b4601083614c05565b91507f696e76616c6964206f70657261746f720000000000000000000000000000000060008301526020820190505b919050565b60006143f5601883614c05565b91507f696e76616c6964207472616e73616374696f6e2074797065000000000000000060008301526020820190505b919050565b60808201600082015161443f60008501826144c7565b5060208201516144526020850182613ee9565b5060408201516144656040850182613ee9565b506060820151614478606085018261448f565b50505b5050565b61448881614c55565b82525b5050565b61449881614c93565b82525b5050565b6144a881614c93565b82525b5050565b6144c06144bb82614c93565b614db8565b82525b5050565b6144d081614c9e565b82525b5050565b6144e081614c9e565b82525b5050565b6144f86144f382614c9e565b614dc3565b82525b5050565b61450881614caf565b82525b5050565b600061451b8284613f09565b6020820191508190505b92915050565b60006145378288613f09565b60208201915061454782876144e7565b6004820191506145578286613f09565b6020820191506145678285613f21565b915061457382846144af565b6020820191508190505b9695505050505050565b60006145938284613f21565b91508190505b92915050565b60006145aa82614288565b91508190505b919050565b60006020820190506145ca6000830184613ec9565b5b92915050565b60006020820190506145e66000830184613eb9565b5b92915050565b60006040820190506146026000830185613eb9565b61460f6020830184613ec9565b5b9392505050565b600060208201905061462c6000830184613ed9565b5b92915050565b60006020820190506146486000830184613ef9565b5b92915050565b60006080820190506146646000830187613f53565b6146716020830186613ec9565b61467e604083018561447f565b61468b606083018461447f565b5b95945050505050565b60006020820190506146aa6000830184613f63565b5b92915050565b60006020820190506146c66000830184613f73565b5b92915050565b600060208201905081810360008301526146e681613fbd565b90505b919050565b6000602082019050818103600083015261470781613ffe565b90505b919050565b600060208201905081810360008301526147288161403f565b90505b919050565b6000602082019050818103600083015261474981614080565b90505b919050565b6000602082019050818103600083015261476a816140c1565b90505b919050565b6000602082019050818103600083015261478b81614102565b90505b919050565b600060208201905081810360008301526147ac81614143565b90505b919050565b600060208201905081810360008301526147cd81614184565b90505b919050565b600060208201905081810360008301526147ee816141c5565b90505b919050565b6000602082019050818103600083015261480f81614206565b90505b919050565b6000602082019050818103600083015261483081614247565b90505b919050565b60006020820190508181036000830152614851816142a3565b90505b919050565b60006020820190508181036000830152614872816142e4565b90505b919050565b6000602082019050818103600083015261489381614325565b90505b919050565b600060208201905081810360008301526148b481614366565b90505b919050565b600060208201905081810360008301526148d5816143a7565b90505b919050565b600060208201905081810360008301526148f6816143e8565b90505b919050565b60006080820190506149136000830184614429565b5b92915050565b600060208201905061492f600083018461447f565b5b92915050565b600060208201905061494b600083018461449f565b5b92915050565b600060208201905061496760008301846144d7565b5b92915050565b600060808201905061498360008301876144d7565b6149906020830186613ec9565b81810360408301526149a28185613f83565b90506149b1606083018461447f565b5b95945050505050565b60006060820190506149d060008301866144d7565b6149dd6020830185613ec9565b6149ea604083018461447f565b5b949350505050565b6000602082019050614a0860008301846144ff565b5b92915050565b600060c082019050614a2460008301896144ff565b614a3160208301886144ff565b614a3e60408301876144d7565b614a4b6060830186613ec9565b8181036080830152614a5d8185613f83565b9050614a6c60a083018461447f565b5b979650505050505050565b6000604051905081810181811067ffffffffffffffff82111715614a9f57614a9e614dd6565b5b80604052505b919050565b600067ffffffffffffffff821115614ac557614ac4614dd6565b5b6020820290505b919050565b600067ffffffffffffffff821115614aec57614aeb614dd6565b5b6020820290506020810190505b919050565b600067ffffffffffffffff821115614b1957614b18614dd6565b5b6020820290506020810190505b919050565b600067ffffffffffffffff821115614b4657614b45614dd6565b5b6020820290506020810190505b919050565b600067ffffffffffffffff821115614b7357614b72614dd6565b5b6020820290505b919050565b600067ffffffffffffffff821115614b9a57614b99614dd6565b5b601f19601f83011690506020810190505b919050565b600067ffffffffffffffff821115614bcb57614bca614dd6565b5b601f19601f83011690506020810190505b919050565b6000815190505b919050565b6000815190505b919050565b60008190505b92915050565b60008282526020820190505b92915050565b6000614c2282614c72565b90505b919050565b600081151590505b919050565b60008190505b919050565b6000614c4d82614c17565b90505b919050565b60006fffffffffffffffffffffffffffffffff821690505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b600063ffffffff821690505b919050565b600060ff821690505b919050565b6000614cc882614d42565b90505b919050565b6000614cdb82614ce3565b90505b919050565b6000614cee82614c72565b90505b919050565b6000614d0182614d09565b90505b919050565b6000614d1482614c72565b90505b919050565b6000614d2782614d2f565b90505b919050565b6000614d3a82614c72565b90505b919050565b6000614d4d82614d55565b90505b919050565b6000614d6082614c72565b90505b919050565b828183376000838301525b505050565b60005b83811015614d975780820151818401525b602081019050614d7b565b83811115614da6576000848401525b505b505050565b60008190505b919050565b60008190505b919050565b6000614dce82614dec565b90505b919050565bfe5b565b6000601f19601f83011690505b919050565b60008160e01b90505b919050565b614e0381614c17565b81141515614e115760006000fd5b5b50565b614e1e81614c2a565b81141515614e2c5760006000fd5b5b50565b614e3981614c37565b81141515614e475760006000fd5b5b50565b614e5481614c42565b81141515614e625760006000fd5b5b50565b614e6f81614c55565b81141515614e7d5760006000fd5b5b50565b614e8a81614c93565b81141515614e985760006000fd5b5b50565b614ea581614c9e565b81141515614eb35760006000fd5b5b50565b614ec081614caf565b81141515614ece5760006000fd5b5b50565bfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220b55fc472ddeba616bb6b6b9a2cbd5647ab02a63a685d064bc59c51dd1c75820c64736f6c63430007060033"

// DeployZecrey deploys a new Ethereum contract, binding an instance of Zecrey to it.
func DeployZecrey(auth *bind.TransactOpts, backend bind.ContractBackend, _chainId uint8, _governanceAddress common.Address, _verifierAddress common.Address) (common.Address, *types.Transaction, *Zecrey, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ZecreyBin), backend, _chainId, _governanceAddress, _verifierAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// Zecrey is an auto generated Go binding around an Ethereum contract.
type Zecrey struct {
	ZecreyCaller     // Read-only binding to the contract
	ZecreyTransactor // Write-only binding to the contract
	ZecreyFilterer   // Log filterer for contract events
}

// ZecreyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZecreyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZecreyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZecreyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZecreySession struct {
	Contract     *Zecrey           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZecreyCallerSession struct {
	Contract *ZecreyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ZecreyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZecreyTransactorSession struct {
	Contract     *ZecreyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZecreyRaw struct {
	Contract *Zecrey // Generic contract binding to access the raw methods on
}

// ZecreyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZecreyCallerRaw struct {
	Contract *ZecreyCaller // Generic read-only contract binding to access the raw methods on
}

// ZecreyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZecreyTransactorRaw struct {
	Contract *ZecreyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZecrey creates a new instance of Zecrey, bound to a specific deployed contract.
func NewZecrey(address common.Address, backend bind.ContractBackend) (*Zecrey, error) {
	contract, err := bindZecrey(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Zecrey{ZecreyCaller: ZecreyCaller{contract: contract}, ZecreyTransactor: ZecreyTransactor{contract: contract}, ZecreyFilterer: ZecreyFilterer{contract: contract}}, nil
}

// NewZecreyCaller creates a new read-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyCaller(address common.Address, caller bind.ContractCaller) (*ZecreyCaller, error) {
	contract, err := bindZecrey(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyCaller{contract: contract}, nil
}

// NewZecreyTransactor creates a new write-only instance of Zecrey, bound to a specific deployed contract.
func NewZecreyTransactor(address common.Address, transactor bind.ContractTransactor) (*ZecreyTransactor, error) {
	contract, err := bindZecrey(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyTransactor{contract: contract}, nil
}

// NewZecreyFilterer creates a new log filterer instance of Zecrey, bound to a specific deployed contract.
func NewZecreyFilterer(address common.Address, filterer bind.ContractFilterer) (*ZecreyFilterer, error) {
	contract, err := bindZecrey(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZecreyFilterer{contract: contract}, nil
}

// bindZecrey binds a generic wrapper to an already deployed contract.
func bindZecrey(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.ZecreyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.ZecreyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Zecrey *ZecreyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Zecrey.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Zecrey *ZecreyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Zecrey *ZecreyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Zecrey.Contract.contract.Transact(opts, method, params...)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCaller) AccountRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "accountRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreySession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) AccountRoot() ([32]byte, error) {
	return _Zecrey.Contract.AccountRoot(&_Zecrey.CallOpts)
}

// AssetETH is a free data retrieval call binding the contract method 0xbb64db2b.
//
// Solidity: function assetETH() view returns(uint32)
func (_Zecrey *ZecreyCaller) AssetETH(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "assetETH")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// AssetETH is a free data retrieval call binding the contract method 0xbb64db2b.
//
// Solidity: function assetETH() view returns(uint32)
func (_Zecrey *ZecreySession) AssetETH() (uint32, error) {
	return _Zecrey.Contract.AssetETH(&_Zecrey.CallOpts)
}

// AssetETH is a free data retrieval call binding the contract method 0xbb64db2b.
//
// Solidity: function assetETH() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) AssetETH() (uint32, error) {
	return _Zecrey.Contract.AssetETH(&_Zecrey.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint8)
func (_Zecrey *ZecreyCaller) ChainId(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "chainId")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint8)
func (_Zecrey *ZecreySession) ChainId() (uint8, error) {
	return _Zecrey.Contract.ChainId(&_Zecrey.CallOpts)
}

// ChainId is a free data retrieval call binding the contract method 0x9a8a0592.
//
// Solidity: function chainId() view returns(uint8)
func (_Zecrey *ZecreyCallerSession) ChainId() (uint8, error) {
	return _Zecrey.Contract.ChainId(&_Zecrey.CallOpts)
}

// GetCommitment is a free data retrieval call binding the contract method 0x0a2661f8.
//
// Solidity: function getCommitment(bytes32 root, (uint32,bytes32,bytes,(uint8,uint8,uint32,address,string,uint128)[],uint256) _newBlock) pure returns(bytes32)
func (_Zecrey *ZecreyCaller) GetCommitment(opts *bind.CallOpts, root [32]byte, _newBlock ZecreyCommitBlock) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getCommitment", root, _newBlock)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetCommitment is a free data retrieval call binding the contract method 0x0a2661f8.
//
// Solidity: function getCommitment(bytes32 root, (uint32,bytes32,bytes,(uint8,uint8,uint32,address,string,uint128)[],uint256) _newBlock) pure returns(bytes32)
func (_Zecrey *ZecreySession) GetCommitment(root [32]byte, _newBlock ZecreyCommitBlock) ([32]byte, error) {
	return _Zecrey.Contract.GetCommitment(&_Zecrey.CallOpts, root, _newBlock)
}

// GetCommitment is a free data retrieval call binding the contract method 0x0a2661f8.
//
// Solidity: function getCommitment(bytes32 root, (uint32,bytes32,bytes,(uint8,uint8,uint32,address,string,uint128)[],uint256) _newBlock) pure returns(bytes32)
func (_Zecrey *ZecreyCallerSession) GetCommitment(root [32]byte, _newBlock ZecreyCommitBlock) ([32]byte, error) {
	return _Zecrey.Contract.GetCommitment(&_Zecrey.CallOpts, root, _newBlock)
}

// GetHash is a free data retrieval call binding the contract method 0x9fe85908.
//
// Solidity: function getHash((uint32,bytes32,bytes32,uint256) a) pure returns(bytes32)
func (_Zecrey *ZecreyCaller) GetHash(opts *bind.CallOpts, a StorageBlock) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getHash", a)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetHash is a free data retrieval call binding the contract method 0x9fe85908.
//
// Solidity: function getHash((uint32,bytes32,bytes32,uint256) a) pure returns(bytes32)
func (_Zecrey *ZecreySession) GetHash(a StorageBlock) ([32]byte, error) {
	return _Zecrey.Contract.GetHash(&_Zecrey.CallOpts, a)
}

// GetHash is a free data retrieval call binding the contract method 0x9fe85908.
//
// Solidity: function getHash((uint32,bytes32,bytes32,uint256) a) pure returns(bytes32)
func (_Zecrey *ZecreyCallerSession) GetHash(a StorageBlock) ([32]byte, error) {
	return _Zecrey.Contract.GetHash(&_Zecrey.CallOpts, a)
}

// GetTotalDeposited is a free data retrieval call binding the contract method 0x5a8bd54c.
//
// Solidity: function getTotalDeposited(uint32 assetId) view returns(uint256)
func (_Zecrey *ZecreyCaller) GetTotalDeposited(opts *bind.CallOpts, assetId uint32) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "getTotalDeposited", assetId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalDeposited is a free data retrieval call binding the contract method 0x5a8bd54c.
//
// Solidity: function getTotalDeposited(uint32 assetId) view returns(uint256)
func (_Zecrey *ZecreySession) GetTotalDeposited(assetId uint32) (*big.Int, error) {
	return _Zecrey.Contract.GetTotalDeposited(&_Zecrey.CallOpts, assetId)
}

// GetTotalDeposited is a free data retrieval call binding the contract method 0x5a8bd54c.
//
// Solidity: function getTotalDeposited(uint32 assetId) view returns(uint256)
func (_Zecrey *ZecreyCallerSession) GetTotalDeposited(assetId uint32) (*big.Int, error) {
	return _Zecrey.Contract.GetTotalDeposited(&_Zecrey.CallOpts, assetId)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Zecrey *ZecreyCaller) Governance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "governance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Zecrey *ZecreySession) Governance() (common.Address, error) {
	return _Zecrey.Contract.Governance(&_Zecrey.CallOpts)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Zecrey *ZecreyCallerSession) Governance() (common.Address, error) {
	return _Zecrey.Contract.Governance(&_Zecrey.CallOpts)
}

// OnchainOperations is a free data retrieval call binding the contract method 0xe21cc0b7.
//
// Solidity: function onchainOperations(uint256 ) view returns(uint8 chainId, uint8 txType, uint32 assetId, address nativeAddr, string zecreyAddr, uint128 amount)
func (_Zecrey *ZecreyCaller) OnchainOperations(opts *bind.CallOpts, arg0 *big.Int) (struct {
	ChainId    uint8
	TxType     uint8
	AssetId    uint32
	NativeAddr common.Address
	ZecreyAddr string
	Amount     *big.Int
}, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOperations", arg0)

	outstruct := new(struct {
		ChainId    uint8
		TxType     uint8
		AssetId    uint32
		NativeAddr common.Address
		ZecreyAddr string
		Amount     *big.Int
	})

	outstruct.ChainId = out[0].(uint8)
	outstruct.TxType = out[1].(uint8)
	outstruct.AssetId = out[2].(uint32)
	outstruct.NativeAddr = out[3].(common.Address)
	outstruct.ZecreyAddr = out[4].(string)
	outstruct.Amount = out[5].(*big.Int)

	return *outstruct, err

}

// OnchainOperations is a free data retrieval call binding the contract method 0xe21cc0b7.
//
// Solidity: function onchainOperations(uint256 ) view returns(uint8 chainId, uint8 txType, uint32 assetId, address nativeAddr, string zecreyAddr, uint128 amount)
func (_Zecrey *ZecreySession) OnchainOperations(arg0 *big.Int) (struct {
	ChainId    uint8
	TxType     uint8
	AssetId    uint32
	NativeAddr common.Address
	ZecreyAddr string
	Amount     *big.Int
}, error) {
	return _Zecrey.Contract.OnchainOperations(&_Zecrey.CallOpts, arg0)
}

// OnchainOperations is a free data retrieval call binding the contract method 0xe21cc0b7.
//
// Solidity: function onchainOperations(uint256 ) view returns(uint8 chainId, uint8 txType, uint32 assetId, address nativeAddr, string zecreyAddr, uint128 amount)
func (_Zecrey *ZecreyCallerSession) OnchainOperations(arg0 *big.Int) (struct {
	ChainId    uint8
	TxType     uint8
	AssetId    uint32
	NativeAddr common.Address
	ZecreyAddr string
	Amount     *big.Int
}, error) {
	return _Zecrey.Contract.OnchainOperations(&_Zecrey.CallOpts, arg0)
}

// OnchainOperationsCount is a free data retrieval call binding the contract method 0x987f5f7a.
//
// Solidity: function onchainOperationsCount() view returns(uint256)
func (_Zecrey *ZecreyCaller) OnchainOperationsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "onchainOperationsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OnchainOperationsCount is a free data retrieval call binding the contract method 0x987f5f7a.
//
// Solidity: function onchainOperationsCount() view returns(uint256)
func (_Zecrey *ZecreySession) OnchainOperationsCount() (*big.Int, error) {
	return _Zecrey.Contract.OnchainOperationsCount(&_Zecrey.CallOpts)
}

// OnchainOperationsCount is a free data retrieval call binding the contract method 0x987f5f7a.
//
// Solidity: function onchainOperationsCount() view returns(uint256)
func (_Zecrey *ZecreyCallerSession) OnchainOperationsCount() (*big.Int, error) {
	return _Zecrey.Contract.OnchainOperationsCount(&_Zecrey.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Zecrey *ZecreyCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Zecrey *ZecreySession) Owner() (common.Address, error) {
	return _Zecrey.Contract.Owner(&_Zecrey.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Zecrey *ZecreyCallerSession) Owner() (common.Address, error) {
	return _Zecrey.Contract.Owner(&_Zecrey.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Zecrey *ZecreyCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Zecrey *ZecreySession) Paused() (bool, error) {
	return _Zecrey.Contract.Paused(&_Zecrey.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Zecrey *ZecreyCallerSession) Paused() (bool, error) {
	return _Zecrey.Contract.Paused(&_Zecrey.CallOpts)
}

// PendingOperationsCount is a free data retrieval call binding the contract method 0xb6ebb133.
//
// Solidity: function pendingOperationsCount() view returns(uint256)
func (_Zecrey *ZecreyCaller) PendingOperationsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "pendingOperationsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PendingOperationsCount is a free data retrieval call binding the contract method 0xb6ebb133.
//
// Solidity: function pendingOperationsCount() view returns(uint256)
func (_Zecrey *ZecreySession) PendingOperationsCount() (*big.Int, error) {
	return _Zecrey.Contract.PendingOperationsCount(&_Zecrey.CallOpts)
}

// PendingOperationsCount is a free data retrieval call binding the contract method 0xb6ebb133.
//
// Solidity: function pendingOperationsCount() view returns(uint256)
func (_Zecrey *ZecreyCallerSession) PendingOperationsCount() (*big.Int, error) {
	return _Zecrey.Contract.PendingOperationsCount(&_Zecrey.CallOpts)
}

// StoredBlockHashes is a free data retrieval call binding the contract method 0x9ba0d146.
//
// Solidity: function storedBlockHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCaller) StoredBlockHashes(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "storedBlockHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StoredBlockHashes is a free data retrieval call binding the contract method 0x9ba0d146.
//
// Solidity: function storedBlockHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreySession) StoredBlockHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHashes(&_Zecrey.CallOpts, arg0)
}

// StoredBlockHashes is a free data retrieval call binding the contract method 0x9ba0d146.
//
// Solidity: function storedBlockHashes(uint32 ) view returns(bytes32)
func (_Zecrey *ZecreyCallerSession) StoredBlockHashes(arg0 uint32) ([32]byte, error) {
	return _Zecrey.Contract.StoredBlockHashes(&_Zecrey.CallOpts, arg0)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksCommitted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksCommitted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksCommitted() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksCommitted(&_Zecrey.CallOpts)
}

// TotalBlocksProcessed is a free data retrieval call binding the contract method 0x9640ebde.
//
// Solidity: function totalBlocksProcessed() view returns(uint32)
func (_Zecrey *ZecreyCaller) TotalBlocksProcessed(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalBlocksProcessed")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksProcessed is a free data retrieval call binding the contract method 0x9640ebde.
//
// Solidity: function totalBlocksProcessed() view returns(uint32)
func (_Zecrey *ZecreySession) TotalBlocksProcessed() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksProcessed(&_Zecrey.CallOpts)
}

// TotalBlocksProcessed is a free data retrieval call binding the contract method 0x9640ebde.
//
// Solidity: function totalBlocksProcessed() view returns(uint32)
func (_Zecrey *ZecreyCallerSession) TotalBlocksProcessed() (uint32, error) {
	return _Zecrey.Contract.TotalBlocksProcessed(&_Zecrey.CallOpts)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xc6c62390.
//
// Solidity: function totalDeposited(uint256 ) view returns(uint256)
func (_Zecrey *ZecreyCaller) TotalDeposited(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalDeposited", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalDeposited is a free data retrieval call binding the contract method 0xc6c62390.
//
// Solidity: function totalDeposited(uint256 ) view returns(uint256)
func (_Zecrey *ZecreySession) TotalDeposited(arg0 *big.Int) (*big.Int, error) {
	return _Zecrey.Contract.TotalDeposited(&_Zecrey.CallOpts, arg0)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xc6c62390.
//
// Solidity: function totalDeposited(uint256 ) view returns(uint256)
func (_Zecrey *ZecreyCallerSession) TotalDeposited(arg0 *big.Int) (*big.Int, error) {
	return _Zecrey.Contract.TotalDeposited(&_Zecrey.CallOpts, arg0)
}

// TotalWithdrawn is a free data retrieval call binding the contract method 0xa009f7e4.
//
// Solidity: function totalWithdrawn(uint256 ) view returns(uint256)
func (_Zecrey *ZecreyCaller) TotalWithdrawn(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "totalWithdrawn", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalWithdrawn is a free data retrieval call binding the contract method 0xa009f7e4.
//
// Solidity: function totalWithdrawn(uint256 ) view returns(uint256)
func (_Zecrey *ZecreySession) TotalWithdrawn(arg0 *big.Int) (*big.Int, error) {
	return _Zecrey.Contract.TotalWithdrawn(&_Zecrey.CallOpts, arg0)
}

// TotalWithdrawn is a free data retrieval call binding the contract method 0xa009f7e4.
//
// Solidity: function totalWithdrawn(uint256 ) view returns(uint256)
func (_Zecrey *ZecreyCallerSession) TotalWithdrawn(arg0 *big.Int) (*big.Int, error) {
	return _Zecrey.Contract.TotalWithdrawn(&_Zecrey.CallOpts, arg0)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Zecrey *ZecreyCaller) Verifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Zecrey.contract.Call(opts, &out, "verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Zecrey *ZecreySession) Verifier() (common.Address, error) {
	return _Zecrey.Contract.Verifier(&_Zecrey.CallOpts)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Zecrey *ZecreyCallerSession) Verifier() (common.Address, error) {
	return _Zecrey.Contract.Verifier(&_Zecrey.CallOpts)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactor) TransferERC20(opts *bind.TransactOpts, _token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "_transferERC20", _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreySession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_Zecrey *ZecreyTransactorSession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferERC20(&_Zecrey.TransactOpts, _token, _to, _amount, _maxAmount)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x6a15c5a4.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256) _lastCommittedBlockData, (uint32,bytes32,bytes,(uint8,uint8,uint32,address,string,uint128)[],uint256)[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactor) CommitBlocks(opts *bind.TransactOpts, _lastCommittedBlockData StorageBlock, _newBlocksData []ZecreyCommitBlock) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "commitBlocks", _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x6a15c5a4.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256) _lastCommittedBlockData, (uint32,bytes32,bytes,(uint8,uint8,uint32,address,string,uint128)[],uint256)[] _newBlocksData) returns()
func (_Zecrey *ZecreySession) CommitBlocks(_lastCommittedBlockData StorageBlock, _newBlocksData []ZecreyCommitBlock) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0x6a15c5a4.
//
// Solidity: function commitBlocks((uint32,bytes32,bytes32,uint256) _lastCommittedBlockData, (uint32,bytes32,bytes,(uint8,uint8,uint32,address,string,uint128)[],uint256)[] _newBlocksData) returns()
func (_Zecrey *ZecreyTransactorSession) CommitBlocks(_lastCommittedBlockData StorageBlock, _newBlocksData []ZecreyCommitBlock) (*types.Transaction, error) {
	return _Zecrey.Contract.CommitBlocks(&_Zecrey.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// Deposit is a paid mutator transaction binding the contract method 0x6567be15.
//
// Solidity: function deposit(uint32 assetId, string zecreyAddr, uint128 amount) payable returns()
func (_Zecrey *ZecreyTransactor) Deposit(opts *bind.TransactOpts, assetId uint32, zecreyAddr string, amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "deposit", assetId, zecreyAddr, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x6567be15.
//
// Solidity: function deposit(uint32 assetId, string zecreyAddr, uint128 amount) payable returns()
func (_Zecrey *ZecreySession) Deposit(assetId uint32, zecreyAddr string, amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.Deposit(&_Zecrey.TransactOpts, assetId, zecreyAddr, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x6567be15.
//
// Solidity: function deposit(uint32 assetId, string zecreyAddr, uint128 amount) payable returns()
func (_Zecrey *ZecreyTransactorSession) Deposit(assetId uint32, zecreyAddr string, amount *big.Int) (*types.Transaction, error) {
	return _Zecrey.Contract.Deposit(&_Zecrey.TransactOpts, assetId, zecreyAddr, amount)
}

// ProcessBlocks is a paid mutator transaction binding the contract method 0x59e5157e.
//
// Solidity: function processBlocks(((uint32,bytes32,bytes32,uint256),uint256[2],uint256[2][2],uint256[2])[] _blocks) returns()
func (_Zecrey *ZecreyTransactor) ProcessBlocks(opts *bind.TransactOpts, _blocks []ZecreyProcessBlock) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "processBlocks", _blocks)
}

// ProcessBlocks is a paid mutator transaction binding the contract method 0x59e5157e.
//
// Solidity: function processBlocks(((uint32,bytes32,bytes32,uint256),uint256[2],uint256[2][2],uint256[2])[] _blocks) returns()
func (_Zecrey *ZecreySession) ProcessBlocks(_blocks []ZecreyProcessBlock) (*types.Transaction, error) {
	return _Zecrey.Contract.ProcessBlocks(&_Zecrey.TransactOpts, _blocks)
}

// ProcessBlocks is a paid mutator transaction binding the contract method 0x59e5157e.
//
// Solidity: function processBlocks(((uint32,bytes32,bytes32,uint256),uint256[2],uint256[2][2],uint256[2])[] _blocks) returns()
func (_Zecrey *ZecreyTransactorSession) ProcessBlocks(_blocks []ZecreyProcessBlock) (*types.Transaction, error) {
	return _Zecrey.Contract.ProcessBlocks(&_Zecrey.TransactOpts, _blocks)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Zecrey *ZecreyTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Zecrey *ZecreySession) RenounceOwnership() (*types.Transaction, error) {
	return _Zecrey.Contract.RenounceOwnership(&_Zecrey.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Zecrey *ZecreyTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Zecrey.Contract.RenounceOwnership(&_Zecrey.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Zecrey *ZecreyTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Zecrey *ZecreySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferOwnership(&_Zecrey.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Zecrey *ZecreyTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.TransferOwnership(&_Zecrey.TransactOpts, newOwner)
}

// UpdateGovernance is a paid mutator transaction binding the contract method 0xb2561263.
//
// Solidity: function updateGovernance(address _governanceAddress) returns()
func (_Zecrey *ZecreyTransactor) UpdateGovernance(opts *bind.TransactOpts, _governanceAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "updateGovernance", _governanceAddress)
}

// UpdateGovernance is a paid mutator transaction binding the contract method 0xb2561263.
//
// Solidity: function updateGovernance(address _governanceAddress) returns()
func (_Zecrey *ZecreySession) UpdateGovernance(_governanceAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.UpdateGovernance(&_Zecrey.TransactOpts, _governanceAddress)
}

// UpdateGovernance is a paid mutator transaction binding the contract method 0xb2561263.
//
// Solidity: function updateGovernance(address _governanceAddress) returns()
func (_Zecrey *ZecreyTransactorSession) UpdateGovernance(_governanceAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.UpdateGovernance(&_Zecrey.TransactOpts, _governanceAddress)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifierAddress) returns()
func (_Zecrey *ZecreyTransactor) UpdateVerifier(opts *bind.TransactOpts, _verifierAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.contract.Transact(opts, "updateVerifier", _verifierAddress)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifierAddress) returns()
func (_Zecrey *ZecreySession) UpdateVerifier(_verifierAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.UpdateVerifier(&_Zecrey.TransactOpts, _verifierAddress)
}

// UpdateVerifier is a paid mutator transaction binding the contract method 0x97fc007c.
//
// Solidity: function updateVerifier(address _verifierAddress) returns()
func (_Zecrey *ZecreyTransactorSession) UpdateVerifier(_verifierAddress common.Address) (*types.Transaction, error) {
	return _Zecrey.Contract.UpdateVerifier(&_Zecrey.TransactOpts, _verifierAddress)
}

// ZecreyBlockCommitIterator is returned from FilterBlockCommit and is used to iterate over the raw logs and unpacked data for BlockCommit events raised by the Zecrey contract.
type ZecreyBlockCommitIterator struct {
	Event *ZecreyBlockCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockCommit represents a BlockCommit event raised by the Zecrey contract.
type ZecreyBlockCommit struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockCommit is a free log retrieval operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockCommit(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockCommitIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockCommit", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockCommitIterator{contract: _Zecrey.contract, event: "BlockCommit", logs: logs, sub: sub}, nil
}

// WatchBlockCommit is a free log subscription operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockCommit(opts *bind.WatchOpts, sink chan<- *ZecreyBlockCommit, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockCommit", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockCommit)
				if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockCommit is a log parse operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockCommit(log types.Log) (*ZecreyBlockCommit, error) {
	event := new(ZecreyBlockCommit)
	if err := _Zecrey.contract.UnpackLog(event, "BlockCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyBlockProcessedIterator is returned from FilterBlockProcessed and is used to iterate over the raw logs and unpacked data for BlockProcessed events raised by the Zecrey contract.
type ZecreyBlockProcessedIterator struct {
	Event *ZecreyBlockProcessed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyBlockProcessedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyBlockProcessed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyBlockProcessed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyBlockProcessedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyBlockProcessedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyBlockProcessed represents a BlockProcessed event raised by the Zecrey contract.
type ZecreyBlockProcessed struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockProcessed is a free log retrieval operation binding the contract event 0x374928a3faa7ad4f822f66c97ea5736e1a6b41ede9b1ee7f21cc268646fec9f2.
//
// Solidity: event BlockProcessed(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) FilterBlockProcessed(opts *bind.FilterOpts, blockNumber []uint32) (*ZecreyBlockProcessedIterator, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "BlockProcessed", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyBlockProcessedIterator{contract: _Zecrey.contract, event: "BlockProcessed", logs: logs, sub: sub}, nil
}

// WatchBlockProcessed is a free log subscription operation binding the contract event 0x374928a3faa7ad4f822f66c97ea5736e1a6b41ede9b1ee7f21cc268646fec9f2.
//
// Solidity: event BlockProcessed(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) WatchBlockProcessed(opts *bind.WatchOpts, sink chan<- *ZecreyBlockProcessed, blockNumber []uint32) (event.Subscription, error) {

	var blockNumberRule []interface{}
	for _, blockNumberItem := range blockNumber {
		blockNumberRule = append(blockNumberRule, blockNumberItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "BlockProcessed", blockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyBlockProcessed)
				if err := _Zecrey.contract.UnpackLog(event, "BlockProcessed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockProcessed is a log parse operation binding the contract event 0x374928a3faa7ad4f822f66c97ea5736e1a6b41ede9b1ee7f21cc268646fec9f2.
//
// Solidity: event BlockProcessed(uint32 indexed blockNumber)
func (_Zecrey *ZecreyFilterer) ParseBlockProcessed(log types.Log) (*ZecreyBlockProcessed, error) {
	event := new(ZecreyBlockProcessed)
	if err := _Zecrey.contract.UnpackLog(event, "BlockProcessed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Zecrey contract.
type ZecreyDepositIterator struct {
	Event *ZecreyDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyDeposit represents a Deposit event raised by the Zecrey contract.
type ZecreyDeposit struct {
	AssetId       uint32
	NativeAddr    common.Address
	ZecreyAddr    string
	DepositAmount *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x985c84346e3bff1de514922d1bf88270b4a50c525b86443aeeb1441c842e3815.
//
// Solidity: event Deposit(uint32 assetId, address nativeAddr, string zecreyAddr, uint128 depositAmount)
func (_Zecrey *ZecreyFilterer) FilterDeposit(opts *bind.FilterOpts) (*ZecreyDepositIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &ZecreyDepositIterator{contract: _Zecrey.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x985c84346e3bff1de514922d1bf88270b4a50c525b86443aeeb1441c842e3815.
//
// Solidity: event Deposit(uint32 assetId, address nativeAddr, string zecreyAddr, uint128 depositAmount)
func (_Zecrey *ZecreyFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *ZecreyDeposit) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyDeposit)
				if err := _Zecrey.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x985c84346e3bff1de514922d1bf88270b4a50c525b86443aeeb1441c842e3815.
//
// Solidity: event Deposit(uint32 assetId, address nativeAddr, string zecreyAddr, uint128 depositAmount)
func (_Zecrey *ZecreyFilterer) ParseDeposit(log types.Log) (*ZecreyDeposit, error) {
	event := new(ZecreyDeposit)
	if err := _Zecrey.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyGovernanceUpdatedIterator is returned from FilterGovernanceUpdated and is used to iterate over the raw logs and unpacked data for GovernanceUpdated events raised by the Zecrey contract.
type ZecreyGovernanceUpdatedIterator struct {
	Event *ZecreyGovernanceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyGovernanceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyGovernanceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyGovernanceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyGovernanceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyGovernanceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyGovernanceUpdated represents a GovernanceUpdated event raised by the Zecrey contract.
type ZecreyGovernanceUpdated struct {
	GovernanceAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterGovernanceUpdated is a free log retrieval operation binding the contract event 0x9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab.
//
// Solidity: event GovernanceUpdated(address indexed governanceAddress)
func (_Zecrey *ZecreyFilterer) FilterGovernanceUpdated(opts *bind.FilterOpts, governanceAddress []common.Address) (*ZecreyGovernanceUpdatedIterator, error) {

	var governanceAddressRule []interface{}
	for _, governanceAddressItem := range governanceAddress {
		governanceAddressRule = append(governanceAddressRule, governanceAddressItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "GovernanceUpdated", governanceAddressRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyGovernanceUpdatedIterator{contract: _Zecrey.contract, event: "GovernanceUpdated", logs: logs, sub: sub}, nil
}

// WatchGovernanceUpdated is a free log subscription operation binding the contract event 0x9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab.
//
// Solidity: event GovernanceUpdated(address indexed governanceAddress)
func (_Zecrey *ZecreyFilterer) WatchGovernanceUpdated(opts *bind.WatchOpts, sink chan<- *ZecreyGovernanceUpdated, governanceAddress []common.Address) (event.Subscription, error) {

	var governanceAddressRule []interface{}
	for _, governanceAddressItem := range governanceAddress {
		governanceAddressRule = append(governanceAddressRule, governanceAddressItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "GovernanceUpdated", governanceAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyGovernanceUpdated)
				if err := _Zecrey.contract.UnpackLog(event, "GovernanceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernanceUpdated is a log parse operation binding the contract event 0x9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab.
//
// Solidity: event GovernanceUpdated(address indexed governanceAddress)
func (_Zecrey *ZecreyFilterer) ParseGovernanceUpdated(log types.Log) (*ZecreyGovernanceUpdated, error) {
	event := new(ZecreyGovernanceUpdated)
	if err := _Zecrey.contract.UnpackLog(event, "GovernanceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Zecrey contract.
type ZecreyOwnershipTransferredIterator struct {
	Event *ZecreyOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyOwnershipTransferred represents a OwnershipTransferred event raised by the Zecrey contract.
type ZecreyOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Zecrey *ZecreyFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ZecreyOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyOwnershipTransferredIterator{contract: _Zecrey.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Zecrey *ZecreyFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ZecreyOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyOwnershipTransferred)
				if err := _Zecrey.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Zecrey *ZecreyFilterer) ParseOwnershipTransferred(log types.Log) (*ZecreyOwnershipTransferred, error) {
	event := new(ZecreyOwnershipTransferred)
	if err := _Zecrey.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Zecrey contract.
type ZecreyPausedIterator struct {
	Event *ZecreyPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyPaused represents a Paused event raised by the Zecrey contract.
type ZecreyPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Zecrey *ZecreyFilterer) FilterPaused(opts *bind.FilterOpts) (*ZecreyPausedIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ZecreyPausedIterator{contract: _Zecrey.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Zecrey *ZecreyFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ZecreyPaused) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyPaused)
				if err := _Zecrey.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Zecrey *ZecreyFilterer) ParsePaused(log types.Log) (*ZecreyPaused, error) {
	event := new(ZecreyPaused)
	if err := _Zecrey.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Zecrey contract.
type ZecreyUnpausedIterator struct {
	Event *ZecreyUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyUnpaused represents a Unpaused event raised by the Zecrey contract.
type ZecreyUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Zecrey *ZecreyFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ZecreyUnpausedIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ZecreyUnpausedIterator{contract: _Zecrey.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Zecrey *ZecreyFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ZecreyUnpaused) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyUnpaused)
				if err := _Zecrey.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Zecrey *ZecreyFilterer) ParseUnpaused(log types.Log) (*ZecreyUnpaused, error) {
	event := new(ZecreyUnpaused)
	if err := _Zecrey.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyVerifierUpdatedIterator is returned from FilterVerifierUpdated and is used to iterate over the raw logs and unpacked data for VerifierUpdated events raised by the Zecrey contract.
type ZecreyVerifierUpdatedIterator struct {
	Event *ZecreyVerifierUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyVerifierUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyVerifierUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyVerifierUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyVerifierUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyVerifierUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyVerifierUpdated represents a VerifierUpdated event raised by the Zecrey contract.
type ZecreyVerifierUpdated struct {
	VerifierAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterVerifierUpdated is a free log retrieval operation binding the contract event 0xd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee327.
//
// Solidity: event VerifierUpdated(address indexed verifierAddress)
func (_Zecrey *ZecreyFilterer) FilterVerifierUpdated(opts *bind.FilterOpts, verifierAddress []common.Address) (*ZecreyVerifierUpdatedIterator, error) {

	var verifierAddressRule []interface{}
	for _, verifierAddressItem := range verifierAddress {
		verifierAddressRule = append(verifierAddressRule, verifierAddressItem)
	}

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "VerifierUpdated", verifierAddressRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyVerifierUpdatedIterator{contract: _Zecrey.contract, event: "VerifierUpdated", logs: logs, sub: sub}, nil
}

// WatchVerifierUpdated is a free log subscription operation binding the contract event 0xd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee327.
//
// Solidity: event VerifierUpdated(address indexed verifierAddress)
func (_Zecrey *ZecreyFilterer) WatchVerifierUpdated(opts *bind.WatchOpts, sink chan<- *ZecreyVerifierUpdated, verifierAddress []common.Address) (event.Subscription, error) {

	var verifierAddressRule []interface{}
	for _, verifierAddressItem := range verifierAddress {
		verifierAddressRule = append(verifierAddressRule, verifierAddressItem)
	}

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "VerifierUpdated", verifierAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyVerifierUpdated)
				if err := _Zecrey.contract.UnpackLog(event, "VerifierUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifierUpdated is a log parse operation binding the contract event 0xd24015cc99cc1700cafca3042840a1d8ac1e3964fd2e0e37ea29c654056ee327.
//
// Solidity: event VerifierUpdated(address indexed verifierAddress)
func (_Zecrey *ZecreyFilterer) ParseVerifierUpdated(log types.Log) (*ZecreyVerifierUpdated, error) {
	event := new(ZecreyVerifierUpdated)
	if err := _Zecrey.contract.UnpackLog(event, "VerifierUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Zecrey contract.
type ZecreyWithdrawIterator struct {
	Event *ZecreyWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyWithdraw represents a Withdraw event raised by the Zecrey contract.
type ZecreyWithdraw struct {
	AssetId        uint32
	NativeAddr     common.Address
	WithdrawAmount *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x1cda6b03be2faab4c7e14e89e87c872b8548c10e69d81efd1ba5f0a219e04037.
//
// Solidity: event Withdraw(uint32 assetId, address nativeAddr, uint128 withdrawAmount)
func (_Zecrey *ZecreyFilterer) FilterWithdraw(opts *bind.FilterOpts) (*ZecreyWithdrawIterator, error) {

	logs, sub, err := _Zecrey.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &ZecreyWithdrawIterator{contract: _Zecrey.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x1cda6b03be2faab4c7e14e89e87c872b8548c10e69d81efd1ba5f0a219e04037.
//
// Solidity: event Withdraw(uint32 assetId, address nativeAddr, uint128 withdrawAmount)
func (_Zecrey *ZecreyFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *ZecreyWithdraw) (event.Subscription, error) {

	logs, sub, err := _Zecrey.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyWithdraw)
				if err := _Zecrey.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x1cda6b03be2faab4c7e14e89e87c872b8548c10e69d81efd1ba5f0a219e04037.
//
// Solidity: event Withdraw(uint32 assetId, address nativeAddr, uint128 withdrawAmount)
func (_Zecrey *ZecreyFilterer) ParseWithdraw(log types.Log) (*ZecreyWithdraw, error) {
	event := new(ZecreyWithdraw)
	if err := _Zecrey.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
