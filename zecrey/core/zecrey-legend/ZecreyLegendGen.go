// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package zecreyLegend

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StorageBlockHeader is an auto generated low-level Go binding around an user-defined struct.
type StorageBlockHeader struct {
	BlockNumber                  uint32
	PriorityOperations           uint64
	PendingOnchainOperationsHash [32]byte
	Timestamp                    *big.Int
	AccountRoot                  [32]byte
	Commitment                   [32]byte
}

// ZecreyLegendCommitBlockInfo is an auto generated low-level Go binding around an user-defined struct.
type ZecreyLegendCommitBlockInfo struct {
	NewAccountRoot    [32]byte
	PublicData        []byte
	Timestamp         *big.Int
	PublicDataOffsets []uint32
	BlockNumber       uint32
}

// ZecreyLegendVerifyBlockInfo is an auto generated low-level Go binding around an user-defined struct.
type ZecreyLegendVerifyBlockInfo struct {
	BlockHeader              StorageBlockHeader
	PendingOnchainOpsPubdata [][]byte
}

// ZecreyLegendABI is the input ABI used to generate the binding from.
const ZecreyLegendABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockVerification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksVerified\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksCommitted\",\"type\":\"uint32\"}],\"name\":\"BlocksRevert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zecreyBlockNumber\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"DepositCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountNameHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"DepositNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DesertMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zecreyBlockId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"FullExitCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"serialId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enumTxTypes.TxType\",\"name\":\"txType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"name\":\"NewPriorityRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNoticePeriod\",\"type\":\"uint256\"}],\"name\":\"NoticePeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nameHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"zecreyPubKey\",\"type\":\"bytes32\"}],\"name\":\"RegisterZNS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountNameHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"nftType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"assetId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"WithdrawalPending\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ACCOUNT_INDEX\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT_OF_REGISTERED_ASSETS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FUNGIBLE_ASSET_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECURITY_COUNCIL_MEMBERS_NUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPECIAL_ACCOUNT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPECIAL_ACCOUNT_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_NOTICE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxAmount\",\"type\":\"uint128\"}],\"name\":\"_transferERC20\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateDesertMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"priorityOperations\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pendingOnchainOperationsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader\",\"name\":\"_lastCommittedBlockData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"newAccountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"publicData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"publicDataOffsets\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"internalType\":\"structZecreyLegend.CommitBlockInfo[]\",\"name\":\"_newBlocksData\",\"type\":\"tuple[]\"}],\"name\":\"commitBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cutUpgradeNoticePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint104\",\"name\":\"_amount\",\"type\":\"uint104\"},{\"internalType\":\"bytes32\",\"name\":\"_accountNameHash\",\"type\":\"bytes32\"}],\"name\":\"depositBEP20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_accountNameHash\",\"type\":\"bytes32\"}],\"name\":\"depositBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_accountNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"enumTxTypes.NftType\",\"name\":\"_nftType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_amount\",\"type\":\"uint32\"}],\"name\":\"depositNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"desertMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstPriorityRequestId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"accountNameHash\",\"type\":\"bytes32\"}],\"name\":\"getAddressByAccountNameHash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNoticePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetAddr\",\"type\":\"address\"}],\"name\":\"getPendingBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializationParameters\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReadyForUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_zecreyPubKey\",\"type\":\"bytes32\"}],\"name\":\"registerZNS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_accountNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"requestFullExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_accountNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_nftIndex\",\"type\":\"uint32\"}],\"name\":\"requestFullExitNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"newAccountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"publicData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"publicDataOffsets\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"internalType\":\"structZecreyLegend.CommitBlockInfo[]\",\"name\":\"_blocksToRevert\",\"type\":\"tuple[]\"}],\"name\":\"revertBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"storedBlockHeaderHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksCommitted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksVerified\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOpenPriorityRequests\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"upgradeParameters\",\"type\":\"bytes\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeFinishes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeNoticePeriodStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradePreparationStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"priorityOperations\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pendingOnchainOperationsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"structStorage.BlockHeader\",\"name\":\"blockHeader\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"pendingOnchainOpsPubdata\",\"type\":\"bytes[]\"}],\"internalType\":\"structZecreyLegend.VerifyBlockInfo[]\",\"name\":\"_blocks\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_proofs\",\"type\":\"uint256[]\"}],\"name\":\"verifyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"withdrawPendingBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ZecreyLegendBin is the compiled bytecode used for deploying new contracts.
var ZecreyLegendBin = "0x608060405234801561001057600080fd5b5061561f80620000216000396000f3fe6080604052600436106102305760003560e01c80634c34a9821161012e578063a7ccec2f116100ab578063c701f9551161006f578063c701f955146105c8578063cc375fb7146105dd578063d514da50146105f2578063d7757da114610612578063faf4d8cb1461063257610230565b8063a7ccec2f1461055e578063aad1820e14610573578063b269b9ae14610514578063b77a1ef514610593578063c57b22be146105b357610230565b806378b91e70116100f257806378b91e70146104ea5780637ea399c1146104ff578063871b8ff1146105145780638773334c146105295780638ee1a74e1461053e57610230565b80634c34a982146104465780635aca41f6146104685780635fa8fc891461048857806367708dae146104a85780636cc08908146104ca57610230565b806333e23dd6116101bc5780634242d5b3116101805780634242d5b3146103e7578063437545f9146103fc578063437da02f146103fc578063439fab91146104115780634a51a71f1461043157610230565b806333e23dd61461036a5780633b154b731461038a5780633d0029261461039f5780633e71e1e7146103b25780634167d002146103c757610230565b8063200a7d2011610203578063200a7d20146102d157806322b22256146102f157806325394645146103065780632a3174f4146103265780632d24006c1461034857610230565b806302cfb5631461023557806303892c3c146102605780630b8f1c0c146102825780630d360b7f146102af575b600080fd5b34801561024157600080fd5b5061024a610647565b6040516102579190614f7d565b60405180910390f35b34801561026c57600080fd5b5061028061027b366004614ade565b610650565b005b34801561028e57600080fd5b506102a261029d366004614971565b610a22565b6040516102579190614e85565b3480156102bb57600080fd5b506102c4610aab565b60405161025791906154e9565b3480156102dd57600080fd5b506102806102ec366004614794565b610ab1565b3480156102fd57600080fd5b5061024a610abc565b34801561031257600080fd5b50610280610321366004614a44565b610b74565b34801561033257600080fd5b5061033b610ba8565b6040516102579190614f88565b34801561035457600080fd5b5061035d610baf565b604051610257919061553a565b34801561037657600080fd5b50610280610385366004614a22565b610bc2565b34801561039657600080fd5b50610280610d86565b6102806103ad366004614971565b610d8c565b3480156103be57600080fd5b50610280610e61565b3480156103d357600080fd5b5061033b6103e2366004614c0d565b610e6b565b3480156103f357600080fd5b5061035d610e7d565b34801561040857600080fd5b5061035d610e82565b34801561041d57600080fd5b5061028061042c366004614a44565b610e8a565b34801561043d57600080fd5b5061033b610fdc565b34801561045257600080fd5b5061045b610fe1565b60405161025791906154d5565b34801561047457600080fd5b5061045b61048336600461475c565b610fec565b34801561049457600080fd5b506102806104a33660046149a1565b6110bb565b3480156104b457600080fd5b506104bd6112f4565b604051610257919061554b565b3480156104d657600080fd5b506102806104e53660046149c5565b611303565b3480156104f657600080fd5b506102806114da565b34801561050b57600080fd5b506102a2611508565b34801561052057600080fd5b50610280611513565b34801561053557600080fd5b5061024a61151b565b34801561054a57600080fd5b5061045b610559366004614a83565b611525565b34801561056a57600080fd5b5061033b6116c4565b34801561057f57600080fd5b5061028061058e366004614b83565b6116ca565b34801561059f57600080fd5b506102806105ae3660046147c6565b6118fa565b3480156105bf57600080fd5b506104bd611cf0565b3480156105d457600080fd5b5061033b611d06565b3480156105e957600080fd5b5061033b611d0d565b3480156105fe57600080fd5b5061028061060d366004614712565b611d14565b34801561061e57600080fd5b5061028061062d366004614b29565b611f3e565b34801561063e57600080fd5b5061035d61212e565b60105460ff1681565b6000805160206155ca833981519152546001811461066d57600080fd5b60026000805160206155ca833981519152556001600160681b0383166106ae5760405162461bcd60e51b81526004016106a59061514c565b60405180910390fd5b6106b6612141565b600a54604051638050373d60e01b81526001600160a01b0390911690638050373d906106e6908590600401614f88565b60206040518083038186803b1580156106fe57600080fd5b505afa158015610712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107369190614951565b6107525760405162461bcd60e51b81526004016106a590615183565b600954604051639bd7760960e01b81526000916001600160a01b031690639bd7760990610783908890600401614e85565b60206040518083038186803b15801561079b57600080fd5b505afa1580156107af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d39190614beb565b6009546040516331d8687b60e01b81529192506001600160a01b0316906331d8687b906108049084906004016154e9565b60206040518083038186803b15801561081c57600080fd5b505afa158015610830573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108549190614951565b156108715760405162461bcd60e51b81526004016106a590615368565b6040516370a0823160e01b81526000906001600160a01b038716906370a08231906108a0903090600401614e85565b60206040518083038186803b1580156108b857600080fd5b505afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190614989565b905061091886333061090a896001600160681b0316612164565b6001600160801b03166121a7565b6109345760405162461bcd60e51b81526004016106a590615116565b6040516370a0823160e01b81526000906001600160a01b038816906370a0823190610963903090600401614e85565b60206040518083038186803b15801561097b57600080fd5b505afa15801561098f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b39190614989565b905060006109c96109c483856122d3565b612164565b90506001600160681b036001600160801b03821611156109fb5760405162461bcd60e51b81526004016106a5906150fb565b610a06848288612300565b5050505060016000805160206155ca8339815191525550505050565b600a54604051636f5c98d160e11b81526000916001600160a01b03169063deb931a290610a53908590600401614f88565b60206040518083038186803b158015610a6b57600080fd5b505afa158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa3919061467e565b90505b919050565b61ffff81565b610ab961238f565b50565b600e546001600160401b039081166000908152600760205260408120549091600191600160a01b9004164310801590610b185750600e546001600160401b03908116600090815260076020526040902054600160a01b90041615155b90508015610b6b5760105460ff16610b61576010805460ff191660011790556040517f9f7e400a81dddbf1c18b1c37f82aa303d166295ca4b577eb2a7c23d4b704ba8990600090a15b6001915050610b71565b60009150505b90565b6000805160206155ca8339815191525460018114610b9157600080fd5b505060016000805160206155ca8339815191525550565b6224ea0090565b600d54600160c01b900463ffffffff1681565b6000805160206155ca8339815191525460018114610bdf57600080fd5b60026000805160206155ca83398151915255610bf9612141565b600a54604051638050373d60e01b81526001600160a01b0390911690638050373d90610c29908690600401614f88565b60206040518083038186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190614951565b610c955760405162461bcd60e51b81526004016106a590615183565b63ffffffff82811610610cba5760405162461bcd60e51b81526004016106a59061527b565b6000610cc584610a22565b9050336001600160a01b03821614610cef5760405162461bcd60e51b81526004016106a590615237565b6040805161016081018252600f81526000602082018190529181018690526060810182905263ffffffff8516608082015260a0810182905260c0810182905260e0810182905261010081018290526001600160a01b038316610120820152610140810182905290610d5f826123ca565b9050610d6c600f82612418565b50505060016000805160206155ca83398151915255505050565b42600355565b34610da95760405162461bcd60e51b81526004016106a59061514c565b610db1612141565b600a54604051638050373d60e01b81526001600160a01b0390911690638050373d90610de1908490600401614f88565b60206040518083038186803b158015610df957600080fd5b505afa158015610e0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e319190614951565b610e4d5760405162461bcd60e51b81526004016106a590615183565b610ab96000610e5b34612164565b83612300565b610e6961238f565b565b600f6020526000908152604090205481565b600081565b63ffffffff81565b610e92612580565b60008080808080610ea58789018961469a565b600880546001600160a01b03199081166001600160a01b0388811691909117909255600980548216898416179055600d80548216878416179055600a80548216868416179055600b80549091169184169190911790556040805160c0810182526000808252602082018190527fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47092820192909252606081018290526080810183905260a0810191909152959b50939950919750955093509150610f67816125ce565b60008052600f6020527ff4803e074bd026baaf6ed2e288c9515f68c72fb7216eebdd7cae1718a53ec375556224ea0060028190556040517ff2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a148391610fc991614f88565b60405180910390a1505050505050505050565b600381565b6001600160681b0381565b6000806001600160a01b0383161561108157600954604051639bd7760960e01b81526001600160a01b0390911690639bd776099061102e908690600401614e85565b60206040518083038186803b15801561104657600080fd5b505afa15801561105a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107e9190614beb565b90505b600c600061108f86846125fe565b6001600160501b03191681526020810191909152604001600020546001600160801b0316949350505050565b6000805160206155ca83398151915254600181146110d857600080fd5b60026000805160206155ca833981519152556110f2612141565b600a54604051638050373d60e01b81526001600160a01b0390911690638050373d90611122908690600401614f88565b60206040518083038186803b15801561113a57600080fd5b505afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111729190614951565b61118e5760405162461bcd60e51b81526004016106a590615183565b600061119984610a22565b9050336001600160a01b038216146111c35760405162461bcd60e51b81526004016106a590615237565b60006001600160a01b0384166111db5750600061125e565b600954604051639bd7760960e01b81526001600160a01b0390911690639bd776099061120b908790600401614e85565b60206040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b9190614beb565b90505b6040805160a081018252600e815260006020820181905291810187905261ffff8316606082015260808101829052906112968261261b565b90506112a3600e82612418565b60006112af33856125fe565b6001600160501b0319166000908152600c60205260409020805460ff60801b191660ff60801b179055505060016000805160206155ca83398151915255505050505050565b600e546001600160401b031681565b6000805160206155ca833981519152546001811461132057600080fd5b60026000805160206155ca8339815191525561133a612141565b600a54604051638050373d60e01b81526001600160a01b0390911690638050373d9061136a908990600401614f88565b60206040518083038186803b15801561138257600080fd5b505afa158015611396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ba9190614951565b6113d65760405162461bcd60e51b81526004016106a590615183565b60006113e6333087898888612644565b9050806114055760405162461bcd60e51b81526004016106a59061531f565b6040805160e081018252600381526000602082018190529181018990526001600160a01b03881660608201526080810187600181111561144157fe5b60ff1681526020018681526020018563ffffffff1681525090506000611466826128b4565b9050611473600482612418565b7fe3e733a7166bd1d00bf0b2de13986638d450cf81e56507e3e3365c9df77065c089898960018111156114a257fe5b89896040516114b5959493929190614fd8565b60405180910390a150505060016000805160206155ca83398151915255505050505050565b6000805460ff191660019081179091554290556002546003546114fc916128ec565b421015610e6957600080fd5b6001600160a01b0381565b610e6961292b565b60105460ff161590565b60003330146115465760405162461bcd60e51b81526004016106a590615383565b6040516370a0823160e01b81526000906001600160a01b038716906370a0823190611575903090600401614e85565b60206040518083038186803b15801561158d57600080fd5b505afa1580156115a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c59190614989565b90506115db8686866001600160801b03166129ae565b6115f75760405162461bcd60e51b81526004016106a5906153fb565b6040516370a0823160e01b81526000906001600160a01b038816906370a0823190611626903090600401614e85565b60206040518083038186803b15801561163e57600080fd5b505afa158015611652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116769190614989565b9050600061168483836122d3565b9050846001600160801b03168111156116af5760405162461bcd60e51b81526004016106a5906151e2565b6116b881612164565b98975050505050505050565b60065481565b6000805160206155ca83398151915254600181146116e757600080fd5b60026000805160206155ca83398151915255611701612141565b600954604051634b18bd0f60e01b81526001600160a01b0390911690634b18bd0f90611731903390600401614e85565b60006040518083038186803b15801561174957600080fd5b505afa15801561175d573d6000803e3d6000fd5b5050505061176a836125ce565b600d54600160a01b900463ffffffff166000908152600f6020526040902054146117a65760405162461bcd60e51b81526004016106a590615431565b60005b82518163ffffffff161015611879576117db84848363ffffffff16815181106117ce57fe5b6020026020010151612ad4565b6020810151600e80546001600160401b03600160801b80830482169094011690920267ffffffffffffffff60801b19909216919091179055935061181e846125ce565b845163ffffffff166000908152600f60205260409081902091909155845190517f81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424916118699161553a565b60405180910390a16001016117a9565b508151600d805463ffffffff600160a01b80830482169094011690920263ffffffff60a01b19909216919091179055600e546001600160401b03600160401b82048116600160801b9092041611156118e35760405162461bcd60e51b81526004016106a59061534d565b60016000805160206155ca83398151915255505050565b6000805160206155ca833981519152546001811461191757600080fd5b60026000805160206155ca83398151915255611931612141565b600954604051634b18bd0f60e01b81526001600160a01b0390911690634b18bd0f90611961903390600401614e85565b60006040518083038186803b15801561197957600080fd5b505afa15801561198d573d6000803e3d6000fd5b5050845160009250905081600382026001600160401b03811180156119b157600080fd5b506040519080825280602002602001820160405280156119db578160200160208202803683370190505b50905060005b86518161ffff161015611b6a57611a13878261ffff1681518110611a0157fe5b60200260200101518261ffff16612ba4565b868161ffff1681518110611a2357fe5b602002602001015160000151602001518401935060065460001c828260030261ffff1681518110611a5057fe5b602002602001018181525050868161ffff1681518110611a6c57fe5b6020026020010151600001516080015160001c828260030260010161ffff1681518110611a9557fe5b602002602001018181525050868161ffff1681518110611ab157fe5b60200260200101516000015160a0015160001c828260030260020161ffff1681518110611ada57fe5b602002602001018181525050868161ffff1681518110611af657fe5b602002602001015160000151608001516006819055507f0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413878261ffff1681518110611b3d57fe5b60200260200101516000015160000151604051611b5a919061553a565b60405180910390a16001016119e1565b50600854865160405163c50e826360e01b81526000926001600160a01b03169163c50e826391611ba1918a91879190600401614f47565b60206040518083038186803b158015611bb957600080fd5b505afa158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf19190614951565b905080611c105760405162461bcd60e51b81526004016106a59061539e565b600e805467ffffffffffffffff60401b1967ffffffffffffffff60801b1967ffffffffffffffff1983166001600160401b039384168901841617908116600160801b918290048416899003841690910217908116600160401b91829004831688900390921602179055600d805463ffffffff60c01b198116600160c01b9182900463ffffffff9081168701811683029190911792839055600160a01b83048116919092049091161115611cd55760405162461bcd60e51b81526004016106a5906151c7565b5050505060016000805160206155ca83398151915255505050565b600e54600160401b90046001600160401b031681565b620186a081565b6224ea0081565b6000805160206155ca8339815191525460018114611d3157600080fd5b60026000805160206155ca833981519152556001600160a01b038316611de857611d5d60008386612ea0565b6000846001600160a01b0316836001600160801b0316604051611d7f90610b71565b60006040518083038185875af1925050503d8060008114611dbc576040519150601f19603f3d011682016040523d82523d6000602084013e611dc1565b606091505b5050905080611de25760405162461bcd60e51b81526004016106a59061544c565b50611f26565b600954604051639bd7760960e01b81526000916001600160a01b031690639bd7760990611e19908790600401614e85565b60206040518083038186803b158015611e3157600080fd5b505afa158015611e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e699190614beb565b90506000611e7786836125fe565b6001600160501b031981166000908152600c6020526040808220549051634770d3a760e11b81529293506001600160801b0316913090638ee1a74e90611ec7908a908c908b90889060040161503b565b602060405180830381600087803b158015611ee157600080fd5b505af1158015611ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f199190614bcf565b9050610a0684828a612ea0565b60016000805160206155ca8339815191525550505050565b6000805160206155ca8339815191525460018114611f5b57600080fd5b60026000805160206155ca83398151915255600a54600b546040516355bcbf8f60e11b81526000926001600160a01b039081169263ab797f1e92611fab928b928b928b928b921690600401615083565b602060405180830381600087803b158015611fc557600080fd5b505af1158015611fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd9190614989565b9050600060405180608001604052806001600f81111561201957fe5b60ff16815260200173__$11d0ca9f8f048d1423c38bc842a273cf30$__63cfb519288a8a6040518363ffffffff1660e01b815260040161205a92919061506f565b60206040518083038186803b15801561207257600080fd5b505af4158015612086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120aa9190614989565b815260200183815260200185815250905060006120c682612f46565b90506120d3600182612418565b7f8f3bddba5ebbeea69f799226d7c87c68ca4c0e45fe9131cf1c43fa29239be932888885898960405161210a9594939291906150c1565b60405180910390a150505060016000805160206155ca833981519152555050505050565b600d54600160a01b900463ffffffff1681565b60105460ff1615610e695760405162461bcd60e51b81526004016106a590615296565b6000600160801b82106121a3576040805162461bcd60e51b8152602060048201526002602482015261189b60f11b604482015290519081900360640190fd5b5090565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094859485948b16939092909182918083835b6020831061222d5780518252601f19909201916020918201910161220e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461228f576040519150601f19603f3d011682016040523d82523d6000602084013e612294565b606091505b509150915060008151600014806122be57508180602001905160208110156122bb57600080fd5b50515b90508280156116b85750979650505050505050565b60006122f98383604051806040016040528060018152602001603b60f91b815250612f6f565b9392505050565b6040805160a0810182526002815260006020820181905291810183905261ffff851660608201526001600160801b03841660808201529061234082613006565b905061234d600282612418565b7faa46d46658f805449ac7eaaf11d3eaebb6f508930128d276dfefcc8dc02a13c7858486604051612380939291906154f8565b60405180910390a15050505050565b600d546040516001600160a01b039091169036600082376000803683855af43d806000843e8180156123bf578184f35b8184fd5b5050505050565b805160408083015160808401516101208501519251606094612402949093600093909284928391829182918291908290602001614de5565b6040516020818303038152906040529050919050565b600e5443619d8001906001600160401b03808216600160401b9092041601600061244184613032565b90506040518060600160405280826bffffffffffffffffffffffff19168152602001846001600160401b0316815260200186600f81111561247e57fe5b90526001600160401b038084166000908152600760209081526040918290208451815492860151909416600160a01b0267ffffffffffffffff60a01b1960609590951c6001600160a01b03199093169290921793909316178083559083015190829060ff60e01b1916600160e01b83600f8111156124f857fe5b02179055509050507fd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b683033838787876001600160401b0316604051612540959493929190614e99565b60405180910390a15050600e805460016001600160401b03600160401b808404821692909201160267ffffffffffffffff60401b19909116179055505050565b6000805160206155ca833981519152805460019091558015610ab9576040805162461bcd60e51b815260206004820152600260248201526118a160f11b604482015290519081900360640190fd5b6000816040516020016125e19190615482565b604051602081830303815290604052805190602001209050919050565b60a01b61ffff60a01b166001600160a01b03919091161760501b90565b606081600001516000836040015184606001516000604051602001612402959493929190614d8c565b600063ffffffff8216612659575060006128aa565b600085600181111561266757fe5b1415612778576060846001600160a01b031663f242432a89898787866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b031681526020018481526020018363ffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156126ff5781810151838201526020016126e7565b50505050905090810190601f16801561272c5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561274f57600080fd5b505af1925050508015612760575060015b61276d5760009150612772565b600191505b506128aa565b600185600181111561278657fe5b141561286a578163ffffffff166001146127dc576040805162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a59081b999d08185b5bdd5b9d60721b604482015290519081900360640190fd5b836001600160a01b03166342842e0e8888866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561284457600080fd5b505af1925050508015612855575060015b61286157506000612865565b5060015b6128aa565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c6964206e6674207479706560801b604482015290519081900360640190fd5b9695505050505050565b6060816000015160008360400151846060015185608001518660a001518760c001516040516020016124029796959493929190614d22565b6000828201838110156122f9576040805162461bcd60e51b81526020600482015260026024820152610c4d60f21b604482015290519081900360640190fd5b6000805460ff191681556001556224ea0060028190556040517ff2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a14839161296f91614f88565b60405180910390a1600060038190555b60038110156129a6576000818152600460205260409020805460ff1916905560010161297f565b506000600555565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17815292518251600094859485948a16939092909182918083835b60208310612a2c5780518252601f199092019160209182019101612a0d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612a8e576040519150601f19603f3d011682016040523d82523d6000602084013e612a93565b606091505b50915091506000815160001480612abd5750818060200190516020811015612aba57600080fd5b50515b9050828015612ac95750805b979650505050505050565b612adc6141dd565b826000015160010163ffffffff16826080015163ffffffff1614612b125760405162461bcd60e51b81526004016106a5906153c5565b826060015182604001511015612b3a5760405162461bcd60e51b81526004016106a590615131565b600080612b4684613040565b915091506000612b5686866132b2565b6040805160c08101825260808089015163ffffffff1682526001600160401b0390951660208201528082019590955286015160608501528551928401929092525060a0820152905092915050565b81515163ffffffff166000908152600f60205260409020548251612bc7906125ce565b14612be45760405162461bcd60e51b81526004016106a5906151fd565b600d54825151600160c01b90910463ffffffff90811683016001018116911614612c205760405162461bcd60e51b81526004016106a590615467565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060005b8360200151518163ffffffff161015612e7657600084602001518263ffffffff1681518110612c6f57fe5b60200260200101519050600081600081518110612c8857fe5b016020015160f81c600f811115612c9b57fe5b9050600981600f811115612cab57fe5b1415612d09576000612cbc83613303565b905063ffffffff8016816060015161ffff161115612cec5760405162461bcd60e51b81526004016106a5906152b1565b612d038160600151826040015183608001516133d4565b50612e5d565b600e81600f811115612d1757fe5b1415612d83576000612d288361359a565b905063ffffffff8016816060015161ffff161115612d585760405162461bcd60e51b81526004016106a5906152b1565b6000612d678260400151610a22565b9050612d7c82606001518284608001516133d4565b5050612e5d565b600f81600f811115612d9157fe5b1415612df8576000612da28361361b565b905080610100015163ffffffff16600014612d0357612d0381604001518260c00151836101200151846101400151856060015160ff166001811115612de357fe5b8660e001518761010001518860a00151613723565b600d81600f811115612e0657fe5b1415612e45576000612e178361381e565b9050612d0381604001518260c00151836101200151846101400151856060015160ff166001811115612de357fe5b60405162461bcd60e51b81526004016106a59061521c565b612e678483613934565b93505050806001019050612c44565b508251604001518114612e9b5760405162461bcd60e51b81526004016106a5906153e0565b505050565b6000612eac82856125fe565b6001600160501b031981166000908152600c60205260409020549091506001600160801b0316612edc8185613943565b6001600160501b031983166000908152600c60205260409081902080546001600160801b0319166001600160801b039390931692909217909155517ff4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a8079393315490612380908790879061551d565b606081600001518260200151836040015184606001516040516020016124029493929190614cf8565b60008184841115612ffe5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fc3578181015183820152602001612fab565b50505050905090810190601f168015612ff05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b606081600001516000836040015184606001518560800151604051602001612402959493929190614d8c565b805160209091012060601b90565b6020810151600e547fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470916000916001600160401b03808216600160801b9092041601825b8560600151518161ffff1610156132aa57600086606001518261ffff16815181106130ab57fe5b6020026020010151905083518163ffffffff16106130db5760405162461bcd60e51b81526004016106a5906151ab565b6000848263ffffffff16815181106130ef57fe5b016020015160f81c600f81111561310257fe5b9050600181600f81111561311257fe5b141561315457600061312c8663ffffffff8516606161396a565b9050600061313982613a26565b905061314781898801613a83565b50506001909501946132a0565b600281600f81111561316257fe5b141561319757600061317c8663ffffffff8516603761396a565b905060006131898261359a565b905061314781898801613b19565b6060600982600f8111156131a757fe5b14156131c6576131bf8663ffffffff8516603361396a565b9050613292565b600d82600f8111156131d457fe5b14156131ec576131bf8663ffffffff851660b361396a565b600e82600f8111156131fa57fe5b1415613239576132128663ffffffff8516603761396a565b9050600061321f8261359a565b905061322d81898801613b8d565b50600190960195613292565b600f82600f81111561324757fe5b141561327a5761325f8663ffffffff851660ab61396a565b9050600061326c8261361b565b905061322d81898801613c1d565b60405162461bcd60e51b81526004016106a590615416565b61329c8882613934565b9750505b5050600101613084565b505050915091565b815163ffffffff166000908152600f602090815260408083205460808501518584015192516132e594929391920161500d565b60405160208183030381529060405280519060200120905092915050565b61330b614212565b60016133178382613c91565b63ffffffff166020840152905061332e8382613caa565b6001600160a01b0316604084015290506133488382613cba565b61ffff166060840152905061335d8382613cca565b6001600160801b0316608084015290506133778382613c91565b63ffffffff1660a0840152905061338e8382613cba565b61ffff1660c084015290506133a38382613cba565b61ffff1660e08401529050603381146133ce5760405162461bcd60e51b81526004016106a590615260565b50919050565b60006133e083856125fe565b9050600061ffff85166134095783613401816001600160801b038616613cda565b91505061351b565b60095460405163dbfc296760e01b81526000916001600160a01b03169063dbfc29679061343a9089906004016154e9565b60206040518083038186803b15801561345257600080fd5b505afa158015613466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348a919061467e565b604051634770d3a760e11b81529091503090638ee1a74e90620186a0906134bb9085908a908a90819060040161503b565b602060405180830381600088803b1580156134d557600080fd5b5087f193505050508015613506575060408051601f3d908101601f1916820190925261350391810190614bcf565b60015b6135135760009150613519565b50600191505b505b801561355f577ff4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154858460405161355292919061551d565b60405180910390a16123c3565b6135698284613d46565b7fd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688858460405161238092919061551d565b6135a2614256565b60016135ae8382613c91565b63ffffffff16602084015290506135c58382613de4565b604084015290506135d68382613cba565b61ffff16606084015290506135eb8382613cca565b6001600160801b031660808401529050603781146133ce5760405162461bcd60e51b81526004016106a590615260565b613623614284565b600161362f8382613c91565b63ffffffff16602084015290506136468382613de4565b604084015290506136578382613df4565b60ff166060840152905061366b8382613e20565b64ffffffffff16608084015290506136838382613de4565b60a084015290506136948382613caa565b6001600160a01b031660c084015290506136ae8382613e30565b60e084015290506136bf8382613c91565b63ffffffff1661010084015290506136d78382613caa565b6001600160a01b031661012084015290506136f28382613caa565b6001600160a01b0316610140840152905060ab81146133ce5760405162461bcd60e51b81526004016106a590615260565b600061372e89610a22565b9050606060006001600160a01b038a161561375857613751838a898d8a8a612644565b90506137a6565b6001600160a01b0388161561377657613751838a8a89898988613e40565b8463ffffffff166001141561379457613751838a8a89898988613e40565b6137a3838a8a89898988613e40565b90505b806137c35760405162461bcd60e51b81526004016106a59061531f565b7fbdfffb78607d94f197dcb7d6db768a952b833cec21822eaade053a657b0b84ef8b8b8b8b8b60018111156137f457fe5b8b8b6040516138099796959493929190614f91565b60405180910390a15050505050505050505050565b6138266142e0565b60016138328382613c91565b63ffffffff16602084015290506138498382613de4565b6040840152905061385a8382613df4565b60ff166060840152905061386e8382613e20565b64ffffffffff16608084015290506138868382613de4565b60a084015290506138978382613caa565b6001600160a01b031660c084015290506138b18382613e30565b60e084015290506138c28382613c91565b63ffffffff1661010084015290506138da8382613c91565b63ffffffff1661016084015290506138f28382613cba565b61ffff1661018084015290506139088382613cba565b61ffff166101a0840152905060b381146133ce5760405162461bcd60e51b81526004016106a590615260565b80519181526020909101902090565b60006122f9838360405180604001604052806002815260200161616160f01b815250613ed2565b6060818301845110156139a8576040805162461bcd60e51b81526020600482015260016024820152602d60f91b604482015290519081900360640190fd5b6000826001600160401b03811180156139c057600080fd5b506040519080825280601f01601f1916602001820160405280156139eb576020820181803683370190505b5090508215613a1e57602081018381016020860187015b81831015613a1a578051835260209283019201613a02565b5050505b949350505050565b613a2e614354565b6001613a3a8382613de4565b60208401529050613a4b8382613de4565b60408401529050613a5c8382613de4565b60608401529050606181146133ce5760405162461bcd60e51b81526004016106a590615260565b6001600160401b038116600090815260076020526040902054600160e01b900460ff16600181600f811115613ab457fe5b14613ad15760405162461bcd60e51b81526004016106a590615168565b6001600160401b03821660009081526007602052604090205460601b613af78482613f37565b613b135760405162461bcd60e51b81526004016106a5906152ce565b50505050565b6001600160401b038116600090815260076020526040902054600160e01b900460ff16600281600f811115613b4a57fe5b14613b675760405162461bcd60e51b81526004016106a590615168565b6001600160401b03821660009081526007602052604090205460601b613af78482613f67565b6001600160401b038116600090815260076020526040902054600160e01b900460ff16600e81600f811115613bbe57fe5b14613bdb5760405162461bcd60e51b81526004016106a5906152e9565b6001600160401b03821660009081526007602052604090205460601b613c018482613f80565b613b135760405162461bcd60e51b81526004016106a590615304565b6001600160401b038116600090815260076020526040902054600160e01b900460ff16600f81600f811115613c4e57fe5b14613c6b5760405162461bcd60e51b81526004016106a5906152e9565b6001600160401b03821660009081526007602052604090205460601b613c018482613f99565b600481016000613ca18484613fb2565b90509250929050565b601481016000613ca18484614000565b600281016000613ca18484614043565b601081016000613ca18484614086565b600080836001600160a01b0316620186a084604051613cf890610b71565b600060405180830381858888f193505050503d8060008114613d36576040519150601f19603f3d011682016040523d82523d6000602084013e613d3b565b606091505b509095945050505050565b6001600160501b031982166000908152600c6020526040908190205481518083019092526001600160801b03169080613d7f83856140c9565b6001600160801b03908116825260ff60209283018190526001600160501b03199096166000908152600c835260409020835181549490930151909616600160801b0260ff60801b19929091166001600160801b03199093169290921716179092555050565b602081016000613ca18484614114565b600080826001019150838381518110613e0957fe5b602001015160f81c60f81b60f81c90509250929050565b600581016000613ca18484614157565b602081016000613ca1848461419a565b600063ffffffff8416613e5557506001612ac9565b604051632a7c58a960e11b81526001600160a01b038716906354f8b15290613e8d908b908b908b908b908b908b908b90600401614eec565b600060405180830381600087803b158015613ea757600080fd5b505af1925050508015613eb8575060015b613ec457506000612ac9565b506001979650505050505050565b6000836001600160801b0316836001600160801b031611158290612ffe5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612fc3578181015183820152602001612fab565b60006001600160601b03198216613f55613f5085612f46565b613032565b6001600160601b031916149392505050565b60006001600160601b03198216613f55613f5085613006565b60006001600160601b03198216613f55613f508561261b565b60006001600160601b03198216613f55613f50856123ca565b6000808260040190508084511015613ff5576040805162461bcd60e51b81526020600482015260016024820152602b60f91b604482015290519081900360640190fd5b929092015192915050565b6000808260140190508084511015613ff5576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b6000808260020190508084511015613ff5576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b6000808260100190508084511015613ff5576040805162461bcd60e51b81526020600482015260016024820152605760f81b604482015290519081900360640190fd5b60008282016001600160801b0380851690821610156122f9576040805162461bcd60e51b8152602060048201526002602482015261189960f11b604482015290519081900360640190fd5b6000808260200190508084511015613ff5576040805162461bcd60e51b81526020600482015260016024820152605960f81b604482015290519081900360640190fd5b6000808260050190508084511015613ff5576040805162461bcd60e51b81526020600482015260016024820152602b60f91b604482015290519081900360640190fd5b6000808260200190508084511015613ff5576040805162461bcd60e51b81526020600482015260016024820152605760f81b604482015290519081900360640190fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081019190915290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b600082601f83011261438b578081fd5b813560206143a061439b83615582565b61555f565b82815281810190858301855b8581101561446c578135880160a080601f19838d030112156143cc578889fd5b604080518281016001600160401b0382821081831117156143e957fe5b908352848a01358252848301359080821115614403578c8dfd5b6144118f8c8489010161457a565b8b8401526060915081860135848401526080860135935080841115614434578c8dfd5b506144438e8b858801016144d3565b9082015261445284840161466a565b6080820152875250505092840192908401906001016143ac565b5090979650505050505050565b600082601f830112614489578081fd5b8135602061449961439b83615582565b82815281810190858301838502870184018810156144b5578586fd5b855b8581101561446c578135845292840192908401906001016144b7565b600082601f8301126144e3578081fd5b813560206144f361439b83615582565b828152818101908583018385028701840188101561450f578586fd5b855b8581101561446c576145228261466a565b84529284019290840190600101614511565b60008083601f840112614545578182fd5b5081356001600160401b0381111561455b578182fd5b60208301915083602082850101111561457357600080fd5b9250929050565b600082601f83011261458a578081fd5b81356001600160401b0381111561459d57fe5b6145b0601f8201601f191660200161555f565b8181528460208386010111156145c4578283fd5b816020850160208301379081016020019190915292915050565b600060c082840312156145ef578081fd5b60405160c081016001600160401b03828210818311171561460c57fe5b8160405282935061461c8561466a565b835260208501359150808216821461463357600080fd5b508060208301525060408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b803563ffffffff81168114610aa657600080fd5b60006020828403121561468f578081fd5b81516122f98161559f565b60008060008060008060c087890312156146b2578182fd5b86356146bd8161559f565b955060208701356146cd8161559f565b945060408701356146dd8161559f565b935060608701356146ed8161559f565b925060808701356146fd8161559f565b8092505060a087013590509295509295509295565b600080600060608486031215614726578081fd5b83356147318161559f565b925060208401356147418161559f565b91506040840135614751816155b4565b809150509250925092565b6000806040838503121561476e578182fd5b82356147798161559f565b915060208301356147898161559f565b809150509250929050565b6000602082840312156147a5578081fd5b81356001600160401b038111156147ba578182fd5b613a1e8482850161437b565b600080604083850312156147d8578182fd5b6001600160401b03833511156147ec578182fd5b83601f8435850101126147fd578182fd5b61480d61439b8435850135615582565b83358401803582526020808301929101845b8635870135811015614924578635870182350160e0818a03601f19011215614845578687fd5b6040518060408201106001600160401b036040830111171561486357fe5b604081016040526148778a602084016145de565b81526001600160401b0360e08301351115614890578788fd5b89603f60e0840135840101126148a4578788fd5b602060e0830135830101356148bb61439b82615582565b818152602081019060e085013585016040018b5b84811015614902576148ed8f6040843560e08b01358b01010161457a565b845260209384019391909101906001016148cf565b505060208481019190915292885250509485019492909201915060010161481f565b5090935050506001600160401b0360208401351115614941578081fd5b613ca18460208501358501614479565b600060208284031215614962578081fd5b815180151581146122f9578182fd5b600060208284031215614982578081fd5b5035919050565b60006020828403121561499a578081fd5b5051919050565b600080604083850312156149b3578182fd5b8235915060208301356147898161559f565b600080600080600060a086880312156149dc578283fd5b8535945060208601356149ee8161559f565b9350604086013560028110614a01578384fd5b925060608601359150614a166080870161466a565b90509295509295909350565b60008060408385031215614a34578182fd5b82359150613ca16020840161466a565b60008060208385031215614a56578182fd5b82356001600160401b03811115614a6b578283fd5b614a7785828601614534565b90969095509350505050565b60008060008060808587031215614a98578182fd5b8435614aa38161559f565b93506020850135614ab38161559f565b92506040850135614ac3816155b4565b91506060850135614ad3816155b4565b939692955090935050565b600080600060608486031215614af2578081fd5b8335614afd8161559f565b925060208401356001600160681b0381168114614b18578182fd5b929592945050506040919091013590565b60008060008060608587031215614b3e578182fd5b84356001600160401b03811115614b53578283fd5b614b5f87828801614534565b9095509350506020850135614b738161559f565b9396929550929360400135925050565b60008060e08385031215614b95578182fd5b614b9f84846145de565b915060c08301356001600160401b03811115614bb9578182fd5b614bc58582860161437b565b9150509250929050565b600060208284031215614be0578081fd5b81516122f9816155b4565b600060208284031215614bfc578081fd5b815161ffff811681146122f9578182fd5b600060208284031215614c1e578081fd5b6122f98261466a565b60601b6001600160601b0319169052565b6000815180845260208085019450808401835b83811015614c6757815187529582019590820190600101614c4b565b509495945050505050565b60008151808452815b81811015614c9757602081850181015186830182015201614c7b565b81811115614ca85782602083870101525b50601f01601f19169290920160200192915050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60e01b6001600160e01b0319169052565b60f89490941b6001600160f81b031916845260018401929092526021830152604182015260610190565b60f897881b6001600160f81b0319908116825260e097881b6001600160e01b03199081166001840152600583019790975260609590951b6001600160601b03191660258201529290961b9092166039820152603a8101919091529290911b16605a820152605e0190565b60f89590951b6001600160f81b031916855260e09390931b6001600160e01b0319166001850152600584019190915260f01b6001600160f01b031916602583015260801b6001600160801b031916602782015260370190565b6001600160f81b031960f88d811b821683526001600160e01b031960e08e901b166001840152600583018c90528a901b1660258201526001600160d81b031960d889901b166026820152602b81018790526000614e45604b830188614c27565b85605f830152614e58607f830186614ce7565b614e656083830185614c27565b614e726097830184614c27565b5060ab019b9a5050505050505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03861681526001600160401b0385166020820152600060108510614ec057fe5b84604083015260a06060830152614eda60a0830185614c72565b90508260808301529695505050505050565b6001600160a01b0388811682528781166020830152861660408201526060810185905263ffffffff8416608082015260a0810183905260e060c08201819052600090614f3a90830184614c72565b9998505050505050505050565b600060608252614f5a6060830186614c38565b8281036020840152614f6c8186614c38565b915050826040830152949350505050565b901515815260200190565b90815260200190565b9687526001600160a01b039586166020880152938516604087015291909316606085015260ff909216608084015260a083019190915263ffffffff1660c082015260e00190565b9485526001600160a01b0393909316602085015260ff919091166040840152606083015263ffffffff16608082015260a00190565b600084825263ffffffff84166020830152606060408301526150326060830184614c72565b95945050505050565b6001600160a01b0394851681529290931660208301526001600160801b039081166040830152909116606082015260800190565b600060208252613a1e602083018486614cbd565b600060808252615097608083018789614cbd565b6001600160a01b039586166020840152604083019490945250921660609092019190915292915050565b6000608082526150d5608083018789614cbd565b6020830195909552506001600160a01b0392909216604083015260609091015292915050565b6020808252600190820152604360f81b604082015260600190565b6020808252600190820152606360f81b604082015260600190565b6020808252600190820152606760f81b604082015260600190565b602080825260029082015261696160f01b604082015260600190565b6020808252600190820152600960fb1b604082015260600190565b6020808252600e908201526d1b9bdd081c9959da5cdd195c995960921b604082015260600190565b602080825260029082015261413160f01b604082015260600190565b6020808252600190820152603760f91b604082015260600190565b6020808252600190820152603760f81b604082015260600190565b602080825260059082015264065786531360dc1b604082015260600190565b6020808252600190820152601b60fa1b604082015260600190565b6020808252600f908201526e696e76616c6964206164647265737360881b604082015260600190565b6020808252600190820152602760f91b604082015260600190565b6020808252600190820152601560fa1b604082015260600190565b6020808252600190820152601360fa1b604082015260600190565b6020808252600390820152626d663160e81b604082015260600190565b6020808252600190820152604960f81b604082015260600190565b6020808252600190820152602560f91b604082015260600190565b6020808252600190820152604b60f81b604082015260600190565b6020808252601490820152736e6674207472616e73666572206661696c75726560601b604082015260600190565b6020808252600190820152603560f91b604082015260600190565b6020808252600190820152603160f91b604082015260600190565b6020808252600190820152603560f81b604082015260600190565b6020808252600d908201526c34b73b30b634b210383937b7b360991b604082015260600190565b6020808252600190820152603360f91b604082015260600190565b6020808252600190820152606d60f81b604082015260600190565b6020808252600190820152601b60f91b604082015260600190565b6020808252600190820152602360f91b604082015260600190565b6020808252600190820152606960f81b604082015260600190565b6020808252600190820152601960fa1b604082015260600190565b6020808252600190820152606b60f81b604082015260600190565b600060c08201905063ffffffff83511682526001600160401b03602084015116602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b6001600160801b0391909116815260200190565b61ffff91909116815260200190565b61ffff93909316835260208301919091526001600160801b0316604082015260600190565b61ffff9290921682526001600160801b0316602082015260400190565b63ffffffff91909116815260200190565b6001600160401b0391909116815260200190565b6040518181016001600160401b038111828210171561557a57fe5b604052919050565b60006001600160401b0382111561559557fe5b5060209081020190565b6001600160a01b0381168114610ab957600080fd5b6001600160801b0381168114610ab957600080fdfe8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4a26469706673582212209b2c9238ca617096f404b20e0e7417af87f4e3694dcb2e9cc86c78cdbca3bb2e64736f6c63430007060033"

// DeployZecreyLegend deploys a new Ethereum contract, binding an instance of ZecreyLegend to it.
func DeployZecreyLegend(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ZecreyLegend, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyLegendABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ZecreyLegendBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ZecreyLegend{ZecreyLegendCaller: ZecreyLegendCaller{contract: contract}, ZecreyLegendTransactor: ZecreyLegendTransactor{contract: contract}, ZecreyLegendFilterer: ZecreyLegendFilterer{contract: contract}}, nil
}

// ZecreyLegend is an auto generated Go binding around an Ethereum contract.
type ZecreyLegend struct {
	ZecreyLegendCaller     // Read-only binding to the contract
	ZecreyLegendTransactor // Write-only binding to the contract
	ZecreyLegendFilterer   // Log filterer for contract events
}

// ZecreyLegendCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZecreyLegendCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyLegendTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZecreyLegendTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyLegendFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZecreyLegendFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZecreyLegendSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZecreyLegendSession struct {
	Contract     *ZecreyLegend     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZecreyLegendCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZecreyLegendCallerSession struct {
	Contract *ZecreyLegendCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ZecreyLegendTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZecreyLegendTransactorSession struct {
	Contract     *ZecreyLegendTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ZecreyLegendRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZecreyLegendRaw struct {
	Contract *ZecreyLegend // Generic contract binding to access the raw methods on
}

// ZecreyLegendCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZecreyLegendCallerRaw struct {
	Contract *ZecreyLegendCaller // Generic read-only contract binding to access the raw methods on
}

// ZecreyLegendTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZecreyLegendTransactorRaw struct {
	Contract *ZecreyLegendTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZecreyLegend creates a new instance of ZecreyLegend, bound to a specific deployed contract.
func NewZecreyLegend(address common.Address, backend bind.ContractBackend) (*ZecreyLegend, error) {
	contract, err := bindZecreyLegend(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ZecreyLegend{ZecreyLegendCaller: ZecreyLegendCaller{contract: contract}, ZecreyLegendTransactor: ZecreyLegendTransactor{contract: contract}, ZecreyLegendFilterer: ZecreyLegendFilterer{contract: contract}}, nil
}

// NewZecreyLegendCaller creates a new read-only instance of ZecreyLegend, bound to a specific deployed contract.
func NewZecreyLegendCaller(address common.Address, caller bind.ContractCaller) (*ZecreyLegendCaller, error) {
	contract, err := bindZecreyLegend(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendCaller{contract: contract}, nil
}

// NewZecreyLegendTransactor creates a new write-only instance of ZecreyLegend, bound to a specific deployed contract.
func NewZecreyLegendTransactor(address common.Address, transactor bind.ContractTransactor) (*ZecreyLegendTransactor, error) {
	contract, err := bindZecreyLegend(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendTransactor{contract: contract}, nil
}

// NewZecreyLegendFilterer creates a new log filterer instance of ZecreyLegend, bound to a specific deployed contract.
func NewZecreyLegendFilterer(address common.Address, filterer bind.ContractFilterer) (*ZecreyLegendFilterer, error) {
	contract, err := bindZecreyLegend(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendFilterer{contract: contract}, nil
}

// bindZecreyLegend binds a generic wrapper to an already deployed contract.
func bindZecreyLegend(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ZecreyLegendABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZecreyLegend *ZecreyLegendRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZecreyLegend.Contract.ZecreyLegendCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZecreyLegend *ZecreyLegendRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.ZecreyLegendTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZecreyLegend *ZecreyLegendRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.ZecreyLegendTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZecreyLegend *ZecreyLegendCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZecreyLegend.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZecreyLegend *ZecreyLegendTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZecreyLegend *ZecreyLegendTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.contract.Transact(opts, method, params...)
}

// MAXACCOUNTINDEX is a free data retrieval call binding the contract method 0x437545f9.
//
// Solidity: function MAX_ACCOUNT_INDEX() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendCaller) MAXACCOUNTINDEX(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "MAX_ACCOUNT_INDEX")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MAXACCOUNTINDEX is a free data retrieval call binding the contract method 0x437545f9.
//
// Solidity: function MAX_ACCOUNT_INDEX() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendSession) MAXACCOUNTINDEX() (uint32, error) {
	return _ZecreyLegend.Contract.MAXACCOUNTINDEX(&_ZecreyLegend.CallOpts)
}

// MAXACCOUNTINDEX is a free data retrieval call binding the contract method 0x437545f9.
//
// Solidity: function MAX_ACCOUNT_INDEX() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendCallerSession) MAXACCOUNTINDEX() (uint32, error) {
	return _ZecreyLegend.Contract.MAXACCOUNTINDEX(&_ZecreyLegend.CallOpts)
}

// MAXAMOUNTOFREGISTEREDASSETS is a free data retrieval call binding the contract method 0x0d360b7f.
//
// Solidity: function MAX_AMOUNT_OF_REGISTERED_ASSETS() view returns(uint16)
func (_ZecreyLegend *ZecreyLegendCaller) MAXAMOUNTOFREGISTEREDASSETS(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "MAX_AMOUNT_OF_REGISTERED_ASSETS")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// MAXAMOUNTOFREGISTEREDASSETS is a free data retrieval call binding the contract method 0x0d360b7f.
//
// Solidity: function MAX_AMOUNT_OF_REGISTERED_ASSETS() view returns(uint16)
func (_ZecreyLegend *ZecreyLegendSession) MAXAMOUNTOFREGISTEREDASSETS() (uint16, error) {
	return _ZecreyLegend.Contract.MAXAMOUNTOFREGISTEREDASSETS(&_ZecreyLegend.CallOpts)
}

// MAXAMOUNTOFREGISTEREDASSETS is a free data retrieval call binding the contract method 0x0d360b7f.
//
// Solidity: function MAX_AMOUNT_OF_REGISTERED_ASSETS() view returns(uint16)
func (_ZecreyLegend *ZecreyLegendCallerSession) MAXAMOUNTOFREGISTEREDASSETS() (uint16, error) {
	return _ZecreyLegend.Contract.MAXAMOUNTOFREGISTEREDASSETS(&_ZecreyLegend.CallOpts)
}

// MAXDEPOSITAMOUNT is a free data retrieval call binding the contract method 0x4c34a982.
//
// Solidity: function MAX_DEPOSIT_AMOUNT() view returns(uint128)
func (_ZecreyLegend *ZecreyLegendCaller) MAXDEPOSITAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "MAX_DEPOSIT_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXDEPOSITAMOUNT is a free data retrieval call binding the contract method 0x4c34a982.
//
// Solidity: function MAX_DEPOSIT_AMOUNT() view returns(uint128)
func (_ZecreyLegend *ZecreyLegendSession) MAXDEPOSITAMOUNT() (*big.Int, error) {
	return _ZecreyLegend.Contract.MAXDEPOSITAMOUNT(&_ZecreyLegend.CallOpts)
}

// MAXDEPOSITAMOUNT is a free data retrieval call binding the contract method 0x4c34a982.
//
// Solidity: function MAX_DEPOSIT_AMOUNT() view returns(uint128)
func (_ZecreyLegend *ZecreyLegendCallerSession) MAXDEPOSITAMOUNT() (*big.Int, error) {
	return _ZecreyLegend.Contract.MAXDEPOSITAMOUNT(&_ZecreyLegend.CallOpts)
}

// MAXFUNGIBLEASSETID is a free data retrieval call binding the contract method 0x437da02f.
//
// Solidity: function MAX_FUNGIBLE_ASSET_ID() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendCaller) MAXFUNGIBLEASSETID(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "MAX_FUNGIBLE_ASSET_ID")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MAXFUNGIBLEASSETID is a free data retrieval call binding the contract method 0x437da02f.
//
// Solidity: function MAX_FUNGIBLE_ASSET_ID() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendSession) MAXFUNGIBLEASSETID() (uint32, error) {
	return _ZecreyLegend.Contract.MAXFUNGIBLEASSETID(&_ZecreyLegend.CallOpts)
}

// MAXFUNGIBLEASSETID is a free data retrieval call binding the contract method 0x437da02f.
//
// Solidity: function MAX_FUNGIBLE_ASSET_ID() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendCallerSession) MAXFUNGIBLEASSETID() (uint32, error) {
	return _ZecreyLegend.Contract.MAXFUNGIBLEASSETID(&_ZecreyLegend.CallOpts)
}

// SECURITYCOUNCILMEMBERSNUMBER is a free data retrieval call binding the contract method 0x4a51a71f.
//
// Solidity: function SECURITY_COUNCIL_MEMBERS_NUMBER() view returns(uint256)
func (_ZecreyLegend *ZecreyLegendCaller) SECURITYCOUNCILMEMBERSNUMBER(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "SECURITY_COUNCIL_MEMBERS_NUMBER")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SECURITYCOUNCILMEMBERSNUMBER is a free data retrieval call binding the contract method 0x4a51a71f.
//
// Solidity: function SECURITY_COUNCIL_MEMBERS_NUMBER() view returns(uint256)
func (_ZecreyLegend *ZecreyLegendSession) SECURITYCOUNCILMEMBERSNUMBER() (*big.Int, error) {
	return _ZecreyLegend.Contract.SECURITYCOUNCILMEMBERSNUMBER(&_ZecreyLegend.CallOpts)
}

// SECURITYCOUNCILMEMBERSNUMBER is a free data retrieval call binding the contract method 0x4a51a71f.
//
// Solidity: function SECURITY_COUNCIL_MEMBERS_NUMBER() view returns(uint256)
func (_ZecreyLegend *ZecreyLegendCallerSession) SECURITYCOUNCILMEMBERSNUMBER() (*big.Int, error) {
	return _ZecreyLegend.Contract.SECURITYCOUNCILMEMBERSNUMBER(&_ZecreyLegend.CallOpts)
}

// SPECIALACCOUNTADDRESS is a free data retrieval call binding the contract method 0x7ea399c1.
//
// Solidity: function SPECIAL_ACCOUNT_ADDRESS() view returns(address)
func (_ZecreyLegend *ZecreyLegendCaller) SPECIALACCOUNTADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "SPECIAL_ACCOUNT_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SPECIALACCOUNTADDRESS is a free data retrieval call binding the contract method 0x7ea399c1.
//
// Solidity: function SPECIAL_ACCOUNT_ADDRESS() view returns(address)
func (_ZecreyLegend *ZecreyLegendSession) SPECIALACCOUNTADDRESS() (common.Address, error) {
	return _ZecreyLegend.Contract.SPECIALACCOUNTADDRESS(&_ZecreyLegend.CallOpts)
}

// SPECIALACCOUNTADDRESS is a free data retrieval call binding the contract method 0x7ea399c1.
//
// Solidity: function SPECIAL_ACCOUNT_ADDRESS() view returns(address)
func (_ZecreyLegend *ZecreyLegendCallerSession) SPECIALACCOUNTADDRESS() (common.Address, error) {
	return _ZecreyLegend.Contract.SPECIALACCOUNTADDRESS(&_ZecreyLegend.CallOpts)
}

// SPECIALACCOUNTID is a free data retrieval call binding the contract method 0x4242d5b3.
//
// Solidity: function SPECIAL_ACCOUNT_ID() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendCaller) SPECIALACCOUNTID(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "SPECIAL_ACCOUNT_ID")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// SPECIALACCOUNTID is a free data retrieval call binding the contract method 0x4242d5b3.
//
// Solidity: function SPECIAL_ACCOUNT_ID() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendSession) SPECIALACCOUNTID() (uint32, error) {
	return _ZecreyLegend.Contract.SPECIALACCOUNTID(&_ZecreyLegend.CallOpts)
}

// SPECIALACCOUNTID is a free data retrieval call binding the contract method 0x4242d5b3.
//
// Solidity: function SPECIAL_ACCOUNT_ID() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendCallerSession) SPECIALACCOUNTID() (uint32, error) {
	return _ZecreyLegend.Contract.SPECIALACCOUNTID(&_ZecreyLegend.CallOpts)
}

// UPGRADENOTICEPERIOD is a free data retrieval call binding the contract method 0xcc375fb7.
//
// Solidity: function UPGRADE_NOTICE_PERIOD() view returns(uint256)
func (_ZecreyLegend *ZecreyLegendCaller) UPGRADENOTICEPERIOD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "UPGRADE_NOTICE_PERIOD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UPGRADENOTICEPERIOD is a free data retrieval call binding the contract method 0xcc375fb7.
//
// Solidity: function UPGRADE_NOTICE_PERIOD() view returns(uint256)
func (_ZecreyLegend *ZecreyLegendSession) UPGRADENOTICEPERIOD() (*big.Int, error) {
	return _ZecreyLegend.Contract.UPGRADENOTICEPERIOD(&_ZecreyLegend.CallOpts)
}

// UPGRADENOTICEPERIOD is a free data retrieval call binding the contract method 0xcc375fb7.
//
// Solidity: function UPGRADE_NOTICE_PERIOD() view returns(uint256)
func (_ZecreyLegend *ZecreyLegendCallerSession) UPGRADENOTICEPERIOD() (*big.Int, error) {
	return _ZecreyLegend.Contract.UPGRADENOTICEPERIOD(&_ZecreyLegend.CallOpts)
}

// WITHDRAWALGASLIMIT is a free data retrieval call binding the contract method 0xc701f955.
//
// Solidity: function WITHDRAWAL_GAS_LIMIT() view returns(uint256)
func (_ZecreyLegend *ZecreyLegendCaller) WITHDRAWALGASLIMIT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "WITHDRAWAL_GAS_LIMIT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WITHDRAWALGASLIMIT is a free data retrieval call binding the contract method 0xc701f955.
//
// Solidity: function WITHDRAWAL_GAS_LIMIT() view returns(uint256)
func (_ZecreyLegend *ZecreyLegendSession) WITHDRAWALGASLIMIT() (*big.Int, error) {
	return _ZecreyLegend.Contract.WITHDRAWALGASLIMIT(&_ZecreyLegend.CallOpts)
}

// WITHDRAWALGASLIMIT is a free data retrieval call binding the contract method 0xc701f955.
//
// Solidity: function WITHDRAWAL_GAS_LIMIT() view returns(uint256)
func (_ZecreyLegend *ZecreyLegendCallerSession) WITHDRAWALGASLIMIT() (*big.Int, error) {
	return _ZecreyLegend.Contract.WITHDRAWALGASLIMIT(&_ZecreyLegend.CallOpts)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_ZecreyLegend *ZecreyLegendCaller) AccountRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "accountRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_ZecreyLegend *ZecreyLegendSession) AccountRoot() ([32]byte, error) {
	return _ZecreyLegend.Contract.AccountRoot(&_ZecreyLegend.CallOpts)
}

// AccountRoot is a free data retrieval call binding the contract method 0xa7ccec2f.
//
// Solidity: function accountRoot() view returns(bytes32)
func (_ZecreyLegend *ZecreyLegendCallerSession) AccountRoot() ([32]byte, error) {
	return _ZecreyLegend.Contract.AccountRoot(&_ZecreyLegend.CallOpts)
}

// DesertMode is a free data retrieval call binding the contract method 0x02cfb563.
//
// Solidity: function desertMode() view returns(bool)
func (_ZecreyLegend *ZecreyLegendCaller) DesertMode(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "desertMode")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DesertMode is a free data retrieval call binding the contract method 0x02cfb563.
//
// Solidity: function desertMode() view returns(bool)
func (_ZecreyLegend *ZecreyLegendSession) DesertMode() (bool, error) {
	return _ZecreyLegend.Contract.DesertMode(&_ZecreyLegend.CallOpts)
}

// DesertMode is a free data retrieval call binding the contract method 0x02cfb563.
//
// Solidity: function desertMode() view returns(bool)
func (_ZecreyLegend *ZecreyLegendCallerSession) DesertMode() (bool, error) {
	return _ZecreyLegend.Contract.DesertMode(&_ZecreyLegend.CallOpts)
}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_ZecreyLegend *ZecreyLegendCaller) FirstPriorityRequestId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "firstPriorityRequestId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_ZecreyLegend *ZecreyLegendSession) FirstPriorityRequestId() (uint64, error) {
	return _ZecreyLegend.Contract.FirstPriorityRequestId(&_ZecreyLegend.CallOpts)
}

// FirstPriorityRequestId is a free data retrieval call binding the contract method 0x67708dae.
//
// Solidity: function firstPriorityRequestId() view returns(uint64)
func (_ZecreyLegend *ZecreyLegendCallerSession) FirstPriorityRequestId() (uint64, error) {
	return _ZecreyLegend.Contract.FirstPriorityRequestId(&_ZecreyLegend.CallOpts)
}

// GetAddressByAccountNameHash is a free data retrieval call binding the contract method 0x0b8f1c0c.
//
// Solidity: function getAddressByAccountNameHash(bytes32 accountNameHash) view returns(address)
func (_ZecreyLegend *ZecreyLegendCaller) GetAddressByAccountNameHash(opts *bind.CallOpts, accountNameHash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "getAddressByAccountNameHash", accountNameHash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddressByAccountNameHash is a free data retrieval call binding the contract method 0x0b8f1c0c.
//
// Solidity: function getAddressByAccountNameHash(bytes32 accountNameHash) view returns(address)
func (_ZecreyLegend *ZecreyLegendSession) GetAddressByAccountNameHash(accountNameHash [32]byte) (common.Address, error) {
	return _ZecreyLegend.Contract.GetAddressByAccountNameHash(&_ZecreyLegend.CallOpts, accountNameHash)
}

// GetAddressByAccountNameHash is a free data retrieval call binding the contract method 0x0b8f1c0c.
//
// Solidity: function getAddressByAccountNameHash(bytes32 accountNameHash) view returns(address)
func (_ZecreyLegend *ZecreyLegendCallerSession) GetAddressByAccountNameHash(accountNameHash [32]byte) (common.Address, error) {
	return _ZecreyLegend.Contract.GetAddressByAccountNameHash(&_ZecreyLegend.CallOpts, accountNameHash)
}

// GetNoticePeriod is a free data retrieval call binding the contract method 0x2a3174f4.
//
// Solidity: function getNoticePeriod() pure returns(uint256)
func (_ZecreyLegend *ZecreyLegendCaller) GetNoticePeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "getNoticePeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNoticePeriod is a free data retrieval call binding the contract method 0x2a3174f4.
//
// Solidity: function getNoticePeriod() pure returns(uint256)
func (_ZecreyLegend *ZecreyLegendSession) GetNoticePeriod() (*big.Int, error) {
	return _ZecreyLegend.Contract.GetNoticePeriod(&_ZecreyLegend.CallOpts)
}

// GetNoticePeriod is a free data retrieval call binding the contract method 0x2a3174f4.
//
// Solidity: function getNoticePeriod() pure returns(uint256)
func (_ZecreyLegend *ZecreyLegendCallerSession) GetNoticePeriod() (*big.Int, error) {
	return _ZecreyLegend.Contract.GetNoticePeriod(&_ZecreyLegend.CallOpts)
}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_ZecreyLegend *ZecreyLegendCaller) GetPendingBalance(opts *bind.CallOpts, _address common.Address, _assetAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "getPendingBalance", _address, _assetAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_ZecreyLegend *ZecreyLegendSession) GetPendingBalance(_address common.Address, _assetAddr common.Address) (*big.Int, error) {
	return _ZecreyLegend.Contract.GetPendingBalance(&_ZecreyLegend.CallOpts, _address, _assetAddr)
}

// GetPendingBalance is a free data retrieval call binding the contract method 0x5aca41f6.
//
// Solidity: function getPendingBalance(address _address, address _assetAddr) view returns(uint128)
func (_ZecreyLegend *ZecreyLegendCallerSession) GetPendingBalance(_address common.Address, _assetAddr common.Address) (*big.Int, error) {
	return _ZecreyLegend.Contract.GetPendingBalance(&_ZecreyLegend.CallOpts, _address, _assetAddr)
}

// IsReadyForUpgrade is a free data retrieval call binding the contract method 0x8773334c.
//
// Solidity: function isReadyForUpgrade() view returns(bool)
func (_ZecreyLegend *ZecreyLegendCaller) IsReadyForUpgrade(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "isReadyForUpgrade")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsReadyForUpgrade is a free data retrieval call binding the contract method 0x8773334c.
//
// Solidity: function isReadyForUpgrade() view returns(bool)
func (_ZecreyLegend *ZecreyLegendSession) IsReadyForUpgrade() (bool, error) {
	return _ZecreyLegend.Contract.IsReadyForUpgrade(&_ZecreyLegend.CallOpts)
}

// IsReadyForUpgrade is a free data retrieval call binding the contract method 0x8773334c.
//
// Solidity: function isReadyForUpgrade() view returns(bool)
func (_ZecreyLegend *ZecreyLegendCallerSession) IsReadyForUpgrade() (bool, error) {
	return _ZecreyLegend.Contract.IsReadyForUpgrade(&_ZecreyLegend.CallOpts)
}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_ZecreyLegend *ZecreyLegendCaller) StoredBlockHeaderHashes(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "storedBlockHeaderHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_ZecreyLegend *ZecreyLegendSession) StoredBlockHeaderHashes(arg0 uint32) ([32]byte, error) {
	return _ZecreyLegend.Contract.StoredBlockHeaderHashes(&_ZecreyLegend.CallOpts, arg0)
}

// StoredBlockHeaderHashes is a free data retrieval call binding the contract method 0x4167d002.
//
// Solidity: function storedBlockHeaderHashes(uint32 ) view returns(bytes32)
func (_ZecreyLegend *ZecreyLegendCallerSession) StoredBlockHeaderHashes(arg0 uint32) ([32]byte, error) {
	return _ZecreyLegend.Contract.StoredBlockHeaderHashes(&_ZecreyLegend.CallOpts, arg0)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendCaller) TotalBlocksCommitted(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "totalBlocksCommitted")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendSession) TotalBlocksCommitted() (uint32, error) {
	return _ZecreyLegend.Contract.TotalBlocksCommitted(&_ZecreyLegend.CallOpts)
}

// TotalBlocksCommitted is a free data retrieval call binding the contract method 0xfaf4d8cb.
//
// Solidity: function totalBlocksCommitted() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendCallerSession) TotalBlocksCommitted() (uint32, error) {
	return _ZecreyLegend.Contract.TotalBlocksCommitted(&_ZecreyLegend.CallOpts)
}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendCaller) TotalBlocksVerified(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "totalBlocksVerified")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendSession) TotalBlocksVerified() (uint32, error) {
	return _ZecreyLegend.Contract.TotalBlocksVerified(&_ZecreyLegend.CallOpts)
}

// TotalBlocksVerified is a free data retrieval call binding the contract method 0x2d24006c.
//
// Solidity: function totalBlocksVerified() view returns(uint32)
func (_ZecreyLegend *ZecreyLegendCallerSession) TotalBlocksVerified() (uint32, error) {
	return _ZecreyLegend.Contract.TotalBlocksVerified(&_ZecreyLegend.CallOpts)
}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_ZecreyLegend *ZecreyLegendCaller) TotalOpenPriorityRequests(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ZecreyLegend.contract.Call(opts, &out, "totalOpenPriorityRequests")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_ZecreyLegend *ZecreyLegendSession) TotalOpenPriorityRequests() (uint64, error) {
	return _ZecreyLegend.Contract.TotalOpenPriorityRequests(&_ZecreyLegend.CallOpts)
}

// TotalOpenPriorityRequests is a free data retrieval call binding the contract method 0xc57b22be.
//
// Solidity: function totalOpenPriorityRequests() view returns(uint64)
func (_ZecreyLegend *ZecreyLegendCallerSession) TotalOpenPriorityRequests() (uint64, error) {
	return _ZecreyLegend.Contract.TotalOpenPriorityRequests(&_ZecreyLegend.CallOpts)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_ZecreyLegend *ZecreyLegendTransactor) TransferERC20(opts *bind.TransactOpts, _token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "_transferERC20", _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_ZecreyLegend *ZecreyLegendSession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.TransferERC20(&_ZecreyLegend.TransactOpts, _token, _to, _amount, _maxAmount)
}

// TransferERC20 is a paid mutator transaction binding the contract method 0x8ee1a74e.
//
// Solidity: function _transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns(uint128 withdrawnAmount)
func (_ZecreyLegend *ZecreyLegendTransactorSession) TransferERC20(_token common.Address, _to common.Address, _amount *big.Int, _maxAmount *big.Int) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.TransferERC20(&_ZecreyLegend.TransactOpts, _token, _to, _amount, _maxAmount)
}

// ActivateDesertMode is a paid mutator transaction binding the contract method 0x22b22256.
//
// Solidity: function activateDesertMode() returns(bool)
func (_ZecreyLegend *ZecreyLegendTransactor) ActivateDesertMode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "activateDesertMode")
}

// ActivateDesertMode is a paid mutator transaction binding the contract method 0x22b22256.
//
// Solidity: function activateDesertMode() returns(bool)
func (_ZecreyLegend *ZecreyLegendSession) ActivateDesertMode() (*types.Transaction, error) {
	return _ZecreyLegend.Contract.ActivateDesertMode(&_ZecreyLegend.TransactOpts)
}

// ActivateDesertMode is a paid mutator transaction binding the contract method 0x22b22256.
//
// Solidity: function activateDesertMode() returns(bool)
func (_ZecreyLegend *ZecreyLegendTransactorSession) ActivateDesertMode() (*types.Transaction, error) {
	return _ZecreyLegend.Contract.ActivateDesertMode(&_ZecreyLegend.TransactOpts)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0xaad1820e.
//
// Solidity: function commitBlocks((uint32,uint64,bytes32,uint256,bytes32,bytes32) _lastCommittedBlockData, (bytes32,bytes,uint256,uint32[],uint32)[] _newBlocksData) returns()
func (_ZecreyLegend *ZecreyLegendTransactor) CommitBlocks(opts *bind.TransactOpts, _lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyLegendCommitBlockInfo) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "commitBlocks", _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0xaad1820e.
//
// Solidity: function commitBlocks((uint32,uint64,bytes32,uint256,bytes32,bytes32) _lastCommittedBlockData, (bytes32,bytes,uint256,uint32[],uint32)[] _newBlocksData) returns()
func (_ZecreyLegend *ZecreyLegendSession) CommitBlocks(_lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyLegendCommitBlockInfo) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.CommitBlocks(&_ZecreyLegend.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// CommitBlocks is a paid mutator transaction binding the contract method 0xaad1820e.
//
// Solidity: function commitBlocks((uint32,uint64,bytes32,uint256,bytes32,bytes32) _lastCommittedBlockData, (bytes32,bytes,uint256,uint32[],uint32)[] _newBlocksData) returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) CommitBlocks(_lastCommittedBlockData StorageBlockHeader, _newBlocksData []ZecreyLegendCommitBlockInfo) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.CommitBlocks(&_ZecreyLegend.TransactOpts, _lastCommittedBlockData, _newBlocksData)
}

// CutUpgradeNoticePeriod is a paid mutator transaction binding the contract method 0x3e71e1e7.
//
// Solidity: function cutUpgradeNoticePeriod() returns()
func (_ZecreyLegend *ZecreyLegendTransactor) CutUpgradeNoticePeriod(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "cutUpgradeNoticePeriod")
}

// CutUpgradeNoticePeriod is a paid mutator transaction binding the contract method 0x3e71e1e7.
//
// Solidity: function cutUpgradeNoticePeriod() returns()
func (_ZecreyLegend *ZecreyLegendSession) CutUpgradeNoticePeriod() (*types.Transaction, error) {
	return _ZecreyLegend.Contract.CutUpgradeNoticePeriod(&_ZecreyLegend.TransactOpts)
}

// CutUpgradeNoticePeriod is a paid mutator transaction binding the contract method 0x3e71e1e7.
//
// Solidity: function cutUpgradeNoticePeriod() returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) CutUpgradeNoticePeriod() (*types.Transaction, error) {
	return _ZecreyLegend.Contract.CutUpgradeNoticePeriod(&_ZecreyLegend.TransactOpts)
}

// DepositBEP20 is a paid mutator transaction binding the contract method 0x03892c3c.
//
// Solidity: function depositBEP20(address _token, uint104 _amount, bytes32 _accountNameHash) returns()
func (_ZecreyLegend *ZecreyLegendTransactor) DepositBEP20(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _accountNameHash [32]byte) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "depositBEP20", _token, _amount, _accountNameHash)
}

// DepositBEP20 is a paid mutator transaction binding the contract method 0x03892c3c.
//
// Solidity: function depositBEP20(address _token, uint104 _amount, bytes32 _accountNameHash) returns()
func (_ZecreyLegend *ZecreyLegendSession) DepositBEP20(_token common.Address, _amount *big.Int, _accountNameHash [32]byte) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.DepositBEP20(&_ZecreyLegend.TransactOpts, _token, _amount, _accountNameHash)
}

// DepositBEP20 is a paid mutator transaction binding the contract method 0x03892c3c.
//
// Solidity: function depositBEP20(address _token, uint104 _amount, bytes32 _accountNameHash) returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) DepositBEP20(_token common.Address, _amount *big.Int, _accountNameHash [32]byte) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.DepositBEP20(&_ZecreyLegend.TransactOpts, _token, _amount, _accountNameHash)
}

// DepositBNB is a paid mutator transaction binding the contract method 0x3d002926.
//
// Solidity: function depositBNB(bytes32 _accountNameHash) payable returns()
func (_ZecreyLegend *ZecreyLegendTransactor) DepositBNB(opts *bind.TransactOpts, _accountNameHash [32]byte) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "depositBNB", _accountNameHash)
}

// DepositBNB is a paid mutator transaction binding the contract method 0x3d002926.
//
// Solidity: function depositBNB(bytes32 _accountNameHash) payable returns()
func (_ZecreyLegend *ZecreyLegendSession) DepositBNB(_accountNameHash [32]byte) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.DepositBNB(&_ZecreyLegend.TransactOpts, _accountNameHash)
}

// DepositBNB is a paid mutator transaction binding the contract method 0x3d002926.
//
// Solidity: function depositBNB(bytes32 _accountNameHash) payable returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) DepositBNB(_accountNameHash [32]byte) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.DepositBNB(&_ZecreyLegend.TransactOpts, _accountNameHash)
}

// DepositNFT is a paid mutator transaction binding the contract method 0x6cc08908.
//
// Solidity: function depositNFT(bytes32 _accountNameHash, address _tokenAddress, uint8 _nftType, uint256 _nftTokenId, uint32 _amount) returns()
func (_ZecreyLegend *ZecreyLegendTransactor) DepositNFT(opts *bind.TransactOpts, _accountNameHash [32]byte, _tokenAddress common.Address, _nftType uint8, _nftTokenId *big.Int, _amount uint32) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "depositNFT", _accountNameHash, _tokenAddress, _nftType, _nftTokenId, _amount)
}

// DepositNFT is a paid mutator transaction binding the contract method 0x6cc08908.
//
// Solidity: function depositNFT(bytes32 _accountNameHash, address _tokenAddress, uint8 _nftType, uint256 _nftTokenId, uint32 _amount) returns()
func (_ZecreyLegend *ZecreyLegendSession) DepositNFT(_accountNameHash [32]byte, _tokenAddress common.Address, _nftType uint8, _nftTokenId *big.Int, _amount uint32) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.DepositNFT(&_ZecreyLegend.TransactOpts, _accountNameHash, _tokenAddress, _nftType, _nftTokenId, _amount)
}

// DepositNFT is a paid mutator transaction binding the contract method 0x6cc08908.
//
// Solidity: function depositNFT(bytes32 _accountNameHash, address _tokenAddress, uint8 _nftType, uint256 _nftTokenId, uint32 _amount) returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) DepositNFT(_accountNameHash [32]byte, _tokenAddress common.Address, _nftType uint8, _nftTokenId *big.Int, _amount uint32) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.DepositNFT(&_ZecreyLegend.TransactOpts, _accountNameHash, _tokenAddress, _nftType, _nftTokenId, _amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_ZecreyLegend *ZecreyLegendTransactor) Initialize(opts *bind.TransactOpts, initializationParameters []byte) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "initialize", initializationParameters)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_ZecreyLegend *ZecreyLegendSession) Initialize(initializationParameters []byte) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.Initialize(&_ZecreyLegend.TransactOpts, initializationParameters)
}

// Initialize is a paid mutator transaction binding the contract method 0x439fab91.
//
// Solidity: function initialize(bytes initializationParameters) returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) Initialize(initializationParameters []byte) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.Initialize(&_ZecreyLegend.TransactOpts, initializationParameters)
}

// RegisterZNS is a paid mutator transaction binding the contract method 0xd7757da1.
//
// Solidity: function registerZNS(string _name, address _owner, bytes32 _zecreyPubKey) returns()
func (_ZecreyLegend *ZecreyLegendTransactor) RegisterZNS(opts *bind.TransactOpts, _name string, _owner common.Address, _zecreyPubKey [32]byte) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "registerZNS", _name, _owner, _zecreyPubKey)
}

// RegisterZNS is a paid mutator transaction binding the contract method 0xd7757da1.
//
// Solidity: function registerZNS(string _name, address _owner, bytes32 _zecreyPubKey) returns()
func (_ZecreyLegend *ZecreyLegendSession) RegisterZNS(_name string, _owner common.Address, _zecreyPubKey [32]byte) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.RegisterZNS(&_ZecreyLegend.TransactOpts, _name, _owner, _zecreyPubKey)
}

// RegisterZNS is a paid mutator transaction binding the contract method 0xd7757da1.
//
// Solidity: function registerZNS(string _name, address _owner, bytes32 _zecreyPubKey) returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) RegisterZNS(_name string, _owner common.Address, _zecreyPubKey [32]byte) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.RegisterZNS(&_ZecreyLegend.TransactOpts, _name, _owner, _zecreyPubKey)
}

// RequestFullExit is a paid mutator transaction binding the contract method 0x5fa8fc89.
//
// Solidity: function requestFullExit(bytes32 _accountNameHash, address _asset) returns()
func (_ZecreyLegend *ZecreyLegendTransactor) RequestFullExit(opts *bind.TransactOpts, _accountNameHash [32]byte, _asset common.Address) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "requestFullExit", _accountNameHash, _asset)
}

// RequestFullExit is a paid mutator transaction binding the contract method 0x5fa8fc89.
//
// Solidity: function requestFullExit(bytes32 _accountNameHash, address _asset) returns()
func (_ZecreyLegend *ZecreyLegendSession) RequestFullExit(_accountNameHash [32]byte, _asset common.Address) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.RequestFullExit(&_ZecreyLegend.TransactOpts, _accountNameHash, _asset)
}

// RequestFullExit is a paid mutator transaction binding the contract method 0x5fa8fc89.
//
// Solidity: function requestFullExit(bytes32 _accountNameHash, address _asset) returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) RequestFullExit(_accountNameHash [32]byte, _asset common.Address) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.RequestFullExit(&_ZecreyLegend.TransactOpts, _accountNameHash, _asset)
}

// RequestFullExitNFT is a paid mutator transaction binding the contract method 0x33e23dd6.
//
// Solidity: function requestFullExitNFT(bytes32 _accountNameHash, uint32 _nftIndex) returns()
func (_ZecreyLegend *ZecreyLegendTransactor) RequestFullExitNFT(opts *bind.TransactOpts, _accountNameHash [32]byte, _nftIndex uint32) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "requestFullExitNFT", _accountNameHash, _nftIndex)
}

// RequestFullExitNFT is a paid mutator transaction binding the contract method 0x33e23dd6.
//
// Solidity: function requestFullExitNFT(bytes32 _accountNameHash, uint32 _nftIndex) returns()
func (_ZecreyLegend *ZecreyLegendSession) RequestFullExitNFT(_accountNameHash [32]byte, _nftIndex uint32) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.RequestFullExitNFT(&_ZecreyLegend.TransactOpts, _accountNameHash, _nftIndex)
}

// RequestFullExitNFT is a paid mutator transaction binding the contract method 0x33e23dd6.
//
// Solidity: function requestFullExitNFT(bytes32 _accountNameHash, uint32 _nftIndex) returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) RequestFullExitNFT(_accountNameHash [32]byte, _nftIndex uint32) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.RequestFullExitNFT(&_ZecreyLegend.TransactOpts, _accountNameHash, _nftIndex)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x200a7d20.
//
// Solidity: function revertBlocks((bytes32,bytes,uint256,uint32[],uint32)[] _blocksToRevert) returns()
func (_ZecreyLegend *ZecreyLegendTransactor) RevertBlocks(opts *bind.TransactOpts, _blocksToRevert []ZecreyLegendCommitBlockInfo) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "revertBlocks", _blocksToRevert)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x200a7d20.
//
// Solidity: function revertBlocks((bytes32,bytes,uint256,uint32[],uint32)[] _blocksToRevert) returns()
func (_ZecreyLegend *ZecreyLegendSession) RevertBlocks(_blocksToRevert []ZecreyLegendCommitBlockInfo) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.RevertBlocks(&_ZecreyLegend.TransactOpts, _blocksToRevert)
}

// RevertBlocks is a paid mutator transaction binding the contract method 0x200a7d20.
//
// Solidity: function revertBlocks((bytes32,bytes,uint256,uint32[],uint32)[] _blocksToRevert) returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) RevertBlocks(_blocksToRevert []ZecreyLegendCommitBlockInfo) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.RevertBlocks(&_ZecreyLegend.TransactOpts, _blocksToRevert)
}

// Upgrade is a paid mutator transaction binding the contract method 0x25394645.
//
// Solidity: function upgrade(bytes upgradeParameters) returns()
func (_ZecreyLegend *ZecreyLegendTransactor) Upgrade(opts *bind.TransactOpts, upgradeParameters []byte) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "upgrade", upgradeParameters)
}

// Upgrade is a paid mutator transaction binding the contract method 0x25394645.
//
// Solidity: function upgrade(bytes upgradeParameters) returns()
func (_ZecreyLegend *ZecreyLegendSession) Upgrade(upgradeParameters []byte) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.Upgrade(&_ZecreyLegend.TransactOpts, upgradeParameters)
}

// Upgrade is a paid mutator transaction binding the contract method 0x25394645.
//
// Solidity: function upgrade(bytes upgradeParameters) returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) Upgrade(upgradeParameters []byte) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.Upgrade(&_ZecreyLegend.TransactOpts, upgradeParameters)
}

// UpgradeCanceled is a paid mutator transaction binding the contract method 0x871b8ff1.
//
// Solidity: function upgradeCanceled() returns()
func (_ZecreyLegend *ZecreyLegendTransactor) UpgradeCanceled(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "upgradeCanceled")
}

// UpgradeCanceled is a paid mutator transaction binding the contract method 0x871b8ff1.
//
// Solidity: function upgradeCanceled() returns()
func (_ZecreyLegend *ZecreyLegendSession) UpgradeCanceled() (*types.Transaction, error) {
	return _ZecreyLegend.Contract.UpgradeCanceled(&_ZecreyLegend.TransactOpts)
}

// UpgradeCanceled is a paid mutator transaction binding the contract method 0x871b8ff1.
//
// Solidity: function upgradeCanceled() returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) UpgradeCanceled() (*types.Transaction, error) {
	return _ZecreyLegend.Contract.UpgradeCanceled(&_ZecreyLegend.TransactOpts)
}

// UpgradeFinishes is a paid mutator transaction binding the contract method 0xb269b9ae.
//
// Solidity: function upgradeFinishes() returns()
func (_ZecreyLegend *ZecreyLegendTransactor) UpgradeFinishes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "upgradeFinishes")
}

// UpgradeFinishes is a paid mutator transaction binding the contract method 0xb269b9ae.
//
// Solidity: function upgradeFinishes() returns()
func (_ZecreyLegend *ZecreyLegendSession) UpgradeFinishes() (*types.Transaction, error) {
	return _ZecreyLegend.Contract.UpgradeFinishes(&_ZecreyLegend.TransactOpts)
}

// UpgradeFinishes is a paid mutator transaction binding the contract method 0xb269b9ae.
//
// Solidity: function upgradeFinishes() returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) UpgradeFinishes() (*types.Transaction, error) {
	return _ZecreyLegend.Contract.UpgradeFinishes(&_ZecreyLegend.TransactOpts)
}

// UpgradeNoticePeriodStarted is a paid mutator transaction binding the contract method 0x3b154b73.
//
// Solidity: function upgradeNoticePeriodStarted() returns()
func (_ZecreyLegend *ZecreyLegendTransactor) UpgradeNoticePeriodStarted(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "upgradeNoticePeriodStarted")
}

// UpgradeNoticePeriodStarted is a paid mutator transaction binding the contract method 0x3b154b73.
//
// Solidity: function upgradeNoticePeriodStarted() returns()
func (_ZecreyLegend *ZecreyLegendSession) UpgradeNoticePeriodStarted() (*types.Transaction, error) {
	return _ZecreyLegend.Contract.UpgradeNoticePeriodStarted(&_ZecreyLegend.TransactOpts)
}

// UpgradeNoticePeriodStarted is a paid mutator transaction binding the contract method 0x3b154b73.
//
// Solidity: function upgradeNoticePeriodStarted() returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) UpgradeNoticePeriodStarted() (*types.Transaction, error) {
	return _ZecreyLegend.Contract.UpgradeNoticePeriodStarted(&_ZecreyLegend.TransactOpts)
}

// UpgradePreparationStarted is a paid mutator transaction binding the contract method 0x78b91e70.
//
// Solidity: function upgradePreparationStarted() returns()
func (_ZecreyLegend *ZecreyLegendTransactor) UpgradePreparationStarted(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "upgradePreparationStarted")
}

// UpgradePreparationStarted is a paid mutator transaction binding the contract method 0x78b91e70.
//
// Solidity: function upgradePreparationStarted() returns()
func (_ZecreyLegend *ZecreyLegendSession) UpgradePreparationStarted() (*types.Transaction, error) {
	return _ZecreyLegend.Contract.UpgradePreparationStarted(&_ZecreyLegend.TransactOpts)
}

// UpgradePreparationStarted is a paid mutator transaction binding the contract method 0x78b91e70.
//
// Solidity: function upgradePreparationStarted() returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) UpgradePreparationStarted() (*types.Transaction, error) {
	return _ZecreyLegend.Contract.UpgradePreparationStarted(&_ZecreyLegend.TransactOpts)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0xb77a1ef5.
//
// Solidity: function verifyBlocks(((uint32,uint64,bytes32,uint256,bytes32,bytes32),bytes[])[] _blocks, uint256[] _proofs) returns()
func (_ZecreyLegend *ZecreyLegendTransactor) VerifyBlocks(opts *bind.TransactOpts, _blocks []ZecreyLegendVerifyBlockInfo, _proofs []*big.Int) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "verifyBlocks", _blocks, _proofs)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0xb77a1ef5.
//
// Solidity: function verifyBlocks(((uint32,uint64,bytes32,uint256,bytes32,bytes32),bytes[])[] _blocks, uint256[] _proofs) returns()
func (_ZecreyLegend *ZecreyLegendSession) VerifyBlocks(_blocks []ZecreyLegendVerifyBlockInfo, _proofs []*big.Int) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.VerifyBlocks(&_ZecreyLegend.TransactOpts, _blocks, _proofs)
}

// VerifyBlocks is a paid mutator transaction binding the contract method 0xb77a1ef5.
//
// Solidity: function verifyBlocks(((uint32,uint64,bytes32,uint256,bytes32,bytes32),bytes[])[] _blocks, uint256[] _proofs) returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) VerifyBlocks(_blocks []ZecreyLegendVerifyBlockInfo, _proofs []*big.Int) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.VerifyBlocks(&_ZecreyLegend.TransactOpts, _blocks, _proofs)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_ZecreyLegend *ZecreyLegendTransactor) WithdrawPendingBalance(opts *bind.TransactOpts, _owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ZecreyLegend.contract.Transact(opts, "withdrawPendingBalance", _owner, _token, _amount)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_ZecreyLegend *ZecreyLegendSession) WithdrawPendingBalance(_owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.WithdrawPendingBalance(&_ZecreyLegend.TransactOpts, _owner, _token, _amount)
}

// WithdrawPendingBalance is a paid mutator transaction binding the contract method 0xd514da50.
//
// Solidity: function withdrawPendingBalance(address _owner, address _token, uint128 _amount) returns()
func (_ZecreyLegend *ZecreyLegendTransactorSession) WithdrawPendingBalance(_owner common.Address, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ZecreyLegend.Contract.WithdrawPendingBalance(&_ZecreyLegend.TransactOpts, _owner, _token, _amount)
}

// ZecreyLegendBlockCommitIterator is returned from FilterBlockCommit and is used to iterate over the raw logs and unpacked data for BlockCommit events raised by the ZecreyLegend contract.
type ZecreyLegendBlockCommitIterator struct {
	Event *ZecreyLegendBlockCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendBlockCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendBlockCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendBlockCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendBlockCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendBlockCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendBlockCommit represents a BlockCommit event raised by the ZecreyLegend contract.
type ZecreyLegendBlockCommit struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockCommit is a free log retrieval operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 blockNumber)
func (_ZecreyLegend *ZecreyLegendFilterer) FilterBlockCommit(opts *bind.FilterOpts) (*ZecreyLegendBlockCommitIterator, error) {

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "BlockCommit")
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendBlockCommitIterator{contract: _ZecreyLegend.contract, event: "BlockCommit", logs: logs, sub: sub}, nil
}

// WatchBlockCommit is a free log subscription operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 blockNumber)
func (_ZecreyLegend *ZecreyLegendFilterer) WatchBlockCommit(opts *bind.WatchOpts, sink chan<- *ZecreyLegendBlockCommit) (event.Subscription, error) {

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "BlockCommit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendBlockCommit)
				if err := _ZecreyLegend.contract.UnpackLog(event, "BlockCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockCommit is a log parse operation binding the contract event 0x81a92942d0f9c33b897a438384c9c3d88be397776138efa3ba1a4fc8b6268424.
//
// Solidity: event BlockCommit(uint32 blockNumber)
func (_ZecreyLegend *ZecreyLegendFilterer) ParseBlockCommit(log types.Log) (*ZecreyLegendBlockCommit, error) {
	event := new(ZecreyLegendBlockCommit)
	if err := _ZecreyLegend.contract.UnpackLog(event, "BlockCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyLegendBlockVerificationIterator is returned from FilterBlockVerification and is used to iterate over the raw logs and unpacked data for BlockVerification events raised by the ZecreyLegend contract.
type ZecreyLegendBlockVerificationIterator struct {
	Event *ZecreyLegendBlockVerification // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendBlockVerificationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendBlockVerification)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendBlockVerification)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendBlockVerificationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendBlockVerificationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendBlockVerification represents a BlockVerification event raised by the ZecreyLegend contract.
type ZecreyLegendBlockVerification struct {
	BlockNumber uint32
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBlockVerification is a free log retrieval operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 blockNumber)
func (_ZecreyLegend *ZecreyLegendFilterer) FilterBlockVerification(opts *bind.FilterOpts) (*ZecreyLegendBlockVerificationIterator, error) {

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "BlockVerification")
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendBlockVerificationIterator{contract: _ZecreyLegend.contract, event: "BlockVerification", logs: logs, sub: sub}, nil
}

// WatchBlockVerification is a free log subscription operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 blockNumber)
func (_ZecreyLegend *ZecreyLegendFilterer) WatchBlockVerification(opts *bind.WatchOpts, sink chan<- *ZecreyLegendBlockVerification) (event.Subscription, error) {

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "BlockVerification")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendBlockVerification)
				if err := _ZecreyLegend.contract.UnpackLog(event, "BlockVerification", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockVerification is a log parse operation binding the contract event 0x0cdbd8bd7813095001c5fe7917bd69d834dc01db7c1dfcf52ca135bd20384413.
//
// Solidity: event BlockVerification(uint32 blockNumber)
func (_ZecreyLegend *ZecreyLegendFilterer) ParseBlockVerification(log types.Log) (*ZecreyLegendBlockVerification, error) {
	event := new(ZecreyLegendBlockVerification)
	if err := _ZecreyLegend.contract.UnpackLog(event, "BlockVerification", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyLegendBlocksRevertIterator is returned from FilterBlocksRevert and is used to iterate over the raw logs and unpacked data for BlocksRevert events raised by the ZecreyLegend contract.
type ZecreyLegendBlocksRevertIterator struct {
	Event *ZecreyLegendBlocksRevert // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendBlocksRevertIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendBlocksRevert)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendBlocksRevert)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendBlocksRevertIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendBlocksRevertIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendBlocksRevert represents a BlocksRevert event raised by the ZecreyLegend contract.
type ZecreyLegendBlocksRevert struct {
	TotalBlocksVerified  uint32
	TotalBlocksCommitted uint32
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterBlocksRevert is a free log retrieval operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_ZecreyLegend *ZecreyLegendFilterer) FilterBlocksRevert(opts *bind.FilterOpts) (*ZecreyLegendBlocksRevertIterator, error) {

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "BlocksRevert")
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendBlocksRevertIterator{contract: _ZecreyLegend.contract, event: "BlocksRevert", logs: logs, sub: sub}, nil
}

// WatchBlocksRevert is a free log subscription operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_ZecreyLegend *ZecreyLegendFilterer) WatchBlocksRevert(opts *bind.WatchOpts, sink chan<- *ZecreyLegendBlocksRevert) (event.Subscription, error) {

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "BlocksRevert")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendBlocksRevert)
				if err := _ZecreyLegend.contract.UnpackLog(event, "BlocksRevert", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlocksRevert is a log parse operation binding the contract event 0x6f3a8259cce1ea2680115053d21c971aa1764295a45850f520525f2bfdf3c9d3.
//
// Solidity: event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)
func (_ZecreyLegend *ZecreyLegendFilterer) ParseBlocksRevert(log types.Log) (*ZecreyLegendBlocksRevert, error) {
	event := new(ZecreyLegendBlocksRevert)
	if err := _ZecreyLegend.contract.UnpackLog(event, "BlocksRevert", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyLegendDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the ZecreyLegend contract.
type ZecreyLegendDepositIterator struct {
	Event *ZecreyLegendDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendDeposit represents a Deposit event raised by the ZecreyLegend contract.
type ZecreyLegendDeposit struct {
	AssetId     uint16
	AccountName [32]byte
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xaa46d46658f805449ac7eaaf11d3eaebb6f508930128d276dfefcc8dc02a13c7.
//
// Solidity: event Deposit(uint16 assetId, bytes32 accountName, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) FilterDeposit(opts *bind.FilterOpts) (*ZecreyLegendDepositIterator, error) {

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendDepositIterator{contract: _ZecreyLegend.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xaa46d46658f805449ac7eaaf11d3eaebb6f508930128d276dfefcc8dc02a13c7.
//
// Solidity: event Deposit(uint16 assetId, bytes32 accountName, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *ZecreyLegendDeposit) (event.Subscription, error) {

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendDeposit)
				if err := _ZecreyLegend.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xaa46d46658f805449ac7eaaf11d3eaebb6f508930128d276dfefcc8dc02a13c7.
//
// Solidity: event Deposit(uint16 assetId, bytes32 accountName, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) ParseDeposit(log types.Log) (*ZecreyLegendDeposit, error) {
	event := new(ZecreyLegendDeposit)
	if err := _ZecreyLegend.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyLegendDepositCommitIterator is returned from FilterDepositCommit and is used to iterate over the raw logs and unpacked data for DepositCommit events raised by the ZecreyLegend contract.
type ZecreyLegendDepositCommitIterator struct {
	Event *ZecreyLegendDepositCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendDepositCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendDepositCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendDepositCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendDepositCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendDepositCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendDepositCommit represents a DepositCommit event raised by the ZecreyLegend contract.
type ZecreyLegendDepositCommit struct {
	ZecreyBlockNumber uint32
	AccountIndex      uint32
	AccountName       [32]byte
	AssetId           uint16
	Amount            *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterDepositCommit is a free log retrieval operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) FilterDepositCommit(opts *bind.FilterOpts, zecreyBlockNumber []uint32, accountIndex []uint32, assetId []uint16) (*ZecreyLegendDepositCommitIterator, error) {

	var zecreyBlockNumberRule []interface{}
	for _, zecreyBlockNumberItem := range zecreyBlockNumber {
		zecreyBlockNumberRule = append(zecreyBlockNumberRule, zecreyBlockNumberItem)
	}
	var accountIndexRule []interface{}
	for _, accountIndexItem := range accountIndex {
		accountIndexRule = append(accountIndexRule, accountIndexItem)
	}

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "DepositCommit", zecreyBlockNumberRule, accountIndexRule, assetIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendDepositCommitIterator{contract: _ZecreyLegend.contract, event: "DepositCommit", logs: logs, sub: sub}, nil
}

// WatchDepositCommit is a free log subscription operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) WatchDepositCommit(opts *bind.WatchOpts, sink chan<- *ZecreyLegendDepositCommit, zecreyBlockNumber []uint32, accountIndex []uint32, assetId []uint16) (event.Subscription, error) {

	var zecreyBlockNumberRule []interface{}
	for _, zecreyBlockNumberItem := range zecreyBlockNumber {
		zecreyBlockNumberRule = append(zecreyBlockNumberRule, zecreyBlockNumberItem)
	}
	var accountIndexRule []interface{}
	for _, accountIndexItem := range accountIndex {
		accountIndexRule = append(accountIndexRule, accountIndexItem)
	}

	var assetIdRule []interface{}
	for _, assetIdItem := range assetId {
		assetIdRule = append(assetIdRule, assetIdItem)
	}

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "DepositCommit", zecreyBlockNumberRule, accountIndexRule, assetIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendDepositCommit)
				if err := _ZecreyLegend.contract.UnpackLog(event, "DepositCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositCommit is a log parse operation binding the contract event 0x9b3e77f05cee61edb7f3e0e85d71a29e89cb18cb4236a8b8cc3e4d66640d8f71.
//
// Solidity: event DepositCommit(uint32 indexed zecreyBlockNumber, uint32 indexed accountIndex, bytes32 accountName, uint16 indexed assetId, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) ParseDepositCommit(log types.Log) (*ZecreyLegendDepositCommit, error) {
	event := new(ZecreyLegendDepositCommit)
	if err := _ZecreyLegend.contract.UnpackLog(event, "DepositCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyLegendDepositNFTIterator is returned from FilterDepositNFT and is used to iterate over the raw logs and unpacked data for DepositNFT events raised by the ZecreyLegend contract.
type ZecreyLegendDepositNFTIterator struct {
	Event *ZecreyLegendDepositNFT // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendDepositNFTIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendDepositNFT)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendDepositNFT)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendDepositNFTIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendDepositNFTIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendDepositNFT represents a DepositNFT event raised by the ZecreyLegend contract.
type ZecreyLegendDepositNFT struct {
	AccountNameHash [32]byte
	TokenAddress    common.Address
	NftType         uint8
	NftTokenId      *big.Int
	Amount          uint32
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDepositNFT is a free log retrieval operation binding the contract event 0xe3e733a7166bd1d00bf0b2de13986638d450cf81e56507e3e3365c9df77065c0.
//
// Solidity: event DepositNFT(bytes32 accountNameHash, address tokenAddress, uint8 nftType, uint256 nftTokenId, uint32 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) FilterDepositNFT(opts *bind.FilterOpts) (*ZecreyLegendDepositNFTIterator, error) {

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "DepositNFT")
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendDepositNFTIterator{contract: _ZecreyLegend.contract, event: "DepositNFT", logs: logs, sub: sub}, nil
}

// WatchDepositNFT is a free log subscription operation binding the contract event 0xe3e733a7166bd1d00bf0b2de13986638d450cf81e56507e3e3365c9df77065c0.
//
// Solidity: event DepositNFT(bytes32 accountNameHash, address tokenAddress, uint8 nftType, uint256 nftTokenId, uint32 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) WatchDepositNFT(opts *bind.WatchOpts, sink chan<- *ZecreyLegendDepositNFT) (event.Subscription, error) {

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "DepositNFT")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendDepositNFT)
				if err := _ZecreyLegend.contract.UnpackLog(event, "DepositNFT", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositNFT is a log parse operation binding the contract event 0xe3e733a7166bd1d00bf0b2de13986638d450cf81e56507e3e3365c9df77065c0.
//
// Solidity: event DepositNFT(bytes32 accountNameHash, address tokenAddress, uint8 nftType, uint256 nftTokenId, uint32 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) ParseDepositNFT(log types.Log) (*ZecreyLegendDepositNFT, error) {
	event := new(ZecreyLegendDepositNFT)
	if err := _ZecreyLegend.contract.UnpackLog(event, "DepositNFT", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyLegendDesertModeIterator is returned from FilterDesertMode and is used to iterate over the raw logs and unpacked data for DesertMode events raised by the ZecreyLegend contract.
type ZecreyLegendDesertModeIterator struct {
	Event *ZecreyLegendDesertMode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendDesertModeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendDesertMode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendDesertMode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendDesertModeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendDesertModeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendDesertMode represents a DesertMode event raised by the ZecreyLegend contract.
type ZecreyLegendDesertMode struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterDesertMode is a free log retrieval operation binding the contract event 0x9f7e400a81dddbf1c18b1c37f82aa303d166295ca4b577eb2a7c23d4b704ba89.
//
// Solidity: event DesertMode()
func (_ZecreyLegend *ZecreyLegendFilterer) FilterDesertMode(opts *bind.FilterOpts) (*ZecreyLegendDesertModeIterator, error) {

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "DesertMode")
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendDesertModeIterator{contract: _ZecreyLegend.contract, event: "DesertMode", logs: logs, sub: sub}, nil
}

// WatchDesertMode is a free log subscription operation binding the contract event 0x9f7e400a81dddbf1c18b1c37f82aa303d166295ca4b577eb2a7c23d4b704ba89.
//
// Solidity: event DesertMode()
func (_ZecreyLegend *ZecreyLegendFilterer) WatchDesertMode(opts *bind.WatchOpts, sink chan<- *ZecreyLegendDesertMode) (event.Subscription, error) {

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "DesertMode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendDesertMode)
				if err := _ZecreyLegend.contract.UnpackLog(event, "DesertMode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDesertMode is a log parse operation binding the contract event 0x9f7e400a81dddbf1c18b1c37f82aa303d166295ca4b577eb2a7c23d4b704ba89.
//
// Solidity: event DesertMode()
func (_ZecreyLegend *ZecreyLegendFilterer) ParseDesertMode(log types.Log) (*ZecreyLegendDesertMode, error) {
	event := new(ZecreyLegendDesertMode)
	if err := _ZecreyLegend.contract.UnpackLog(event, "DesertMode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyLegendFullExitCommitIterator is returned from FilterFullExitCommit and is used to iterate over the raw logs and unpacked data for FullExitCommit events raised by the ZecreyLegend contract.
type ZecreyLegendFullExitCommitIterator struct {
	Event *ZecreyLegendFullExitCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendFullExitCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendFullExitCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendFullExitCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendFullExitCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendFullExitCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendFullExitCommit represents a FullExitCommit event raised by the ZecreyLegend contract.
type ZecreyLegendFullExitCommit struct {
	ZecreyBlockId uint32
	AccountId     uint32
	Owner         common.Address
	TokenId       uint16
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterFullExitCommit is a free log retrieval operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) FilterFullExitCommit(opts *bind.FilterOpts, zecreyBlockId []uint32, accountId []uint32, tokenId []uint16) (*ZecreyLegendFullExitCommitIterator, error) {

	var zecreyBlockIdRule []interface{}
	for _, zecreyBlockIdItem := range zecreyBlockId {
		zecreyBlockIdRule = append(zecreyBlockIdRule, zecreyBlockIdItem)
	}
	var accountIdRule []interface{}
	for _, accountIdItem := range accountId {
		accountIdRule = append(accountIdRule, accountIdItem)
	}

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "FullExitCommit", zecreyBlockIdRule, accountIdRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendFullExitCommitIterator{contract: _ZecreyLegend.contract, event: "FullExitCommit", logs: logs, sub: sub}, nil
}

// WatchFullExitCommit is a free log subscription operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) WatchFullExitCommit(opts *bind.WatchOpts, sink chan<- *ZecreyLegendFullExitCommit, zecreyBlockId []uint32, accountId []uint32, tokenId []uint16) (event.Subscription, error) {

	var zecreyBlockIdRule []interface{}
	for _, zecreyBlockIdItem := range zecreyBlockId {
		zecreyBlockIdRule = append(zecreyBlockIdRule, zecreyBlockIdItem)
	}
	var accountIdRule []interface{}
	for _, accountIdItem := range accountId {
		accountIdRule = append(accountIdRule, accountIdItem)
	}

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "FullExitCommit", zecreyBlockIdRule, accountIdRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendFullExitCommit)
				if err := _ZecreyLegend.contract.UnpackLog(event, "FullExitCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFullExitCommit is a log parse operation binding the contract event 0x66fc63d751ecbefca61d4e2e7c534e4f29c61aed8ece23ed635277a7ea6f9bc4.
//
// Solidity: event FullExitCommit(uint32 indexed zecreyBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) ParseFullExitCommit(log types.Log) (*ZecreyLegendFullExitCommit, error) {
	event := new(ZecreyLegendFullExitCommit)
	if err := _ZecreyLegend.contract.UnpackLog(event, "FullExitCommit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyLegendNewPriorityRequestIterator is returned from FilterNewPriorityRequest and is used to iterate over the raw logs and unpacked data for NewPriorityRequest events raised by the ZecreyLegend contract.
type ZecreyLegendNewPriorityRequestIterator struct {
	Event *ZecreyLegendNewPriorityRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendNewPriorityRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendNewPriorityRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendNewPriorityRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendNewPriorityRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendNewPriorityRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendNewPriorityRequest represents a NewPriorityRequest event raised by the ZecreyLegend contract.
type ZecreyLegendNewPriorityRequest struct {
	Sender          common.Address
	SerialId        uint64
	TxType          uint8
	PubData         []byte
	ExpirationBlock *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNewPriorityRequest is a free log retrieval operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 txType, bytes pubData, uint256 expirationBlock)
func (_ZecreyLegend *ZecreyLegendFilterer) FilterNewPriorityRequest(opts *bind.FilterOpts) (*ZecreyLegendNewPriorityRequestIterator, error) {

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "NewPriorityRequest")
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendNewPriorityRequestIterator{contract: _ZecreyLegend.contract, event: "NewPriorityRequest", logs: logs, sub: sub}, nil
}

// WatchNewPriorityRequest is a free log subscription operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 txType, bytes pubData, uint256 expirationBlock)
func (_ZecreyLegend *ZecreyLegendFilterer) WatchNewPriorityRequest(opts *bind.WatchOpts, sink chan<- *ZecreyLegendNewPriorityRequest) (event.Subscription, error) {

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "NewPriorityRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendNewPriorityRequest)
				if err := _ZecreyLegend.contract.UnpackLog(event, "NewPriorityRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewPriorityRequest is a log parse operation binding the contract event 0xd0943372c08b438a88d4b39d77216901079eda9ca59d45349841c099083b6830.
//
// Solidity: event NewPriorityRequest(address sender, uint64 serialId, uint8 txType, bytes pubData, uint256 expirationBlock)
func (_ZecreyLegend *ZecreyLegendFilterer) ParseNewPriorityRequest(log types.Log) (*ZecreyLegendNewPriorityRequest, error) {
	event := new(ZecreyLegendNewPriorityRequest)
	if err := _ZecreyLegend.contract.UnpackLog(event, "NewPriorityRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyLegendNoticePeriodChangeIterator is returned from FilterNoticePeriodChange and is used to iterate over the raw logs and unpacked data for NoticePeriodChange events raised by the ZecreyLegend contract.
type ZecreyLegendNoticePeriodChangeIterator struct {
	Event *ZecreyLegendNoticePeriodChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendNoticePeriodChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendNoticePeriodChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendNoticePeriodChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendNoticePeriodChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendNoticePeriodChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendNoticePeriodChange represents a NoticePeriodChange event raised by the ZecreyLegend contract.
type ZecreyLegendNoticePeriodChange struct {
	NewNoticePeriod *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNoticePeriodChange is a free log retrieval operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_ZecreyLegend *ZecreyLegendFilterer) FilterNoticePeriodChange(opts *bind.FilterOpts) (*ZecreyLegendNoticePeriodChangeIterator, error) {

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "NoticePeriodChange")
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendNoticePeriodChangeIterator{contract: _ZecreyLegend.contract, event: "NoticePeriodChange", logs: logs, sub: sub}, nil
}

// WatchNoticePeriodChange is a free log subscription operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_ZecreyLegend *ZecreyLegendFilterer) WatchNoticePeriodChange(opts *bind.WatchOpts, sink chan<- *ZecreyLegendNoticePeriodChange) (event.Subscription, error) {

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "NoticePeriodChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendNoticePeriodChange)
				if err := _ZecreyLegend.contract.UnpackLog(event, "NoticePeriodChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNoticePeriodChange is a log parse operation binding the contract event 0xf2b18f8abbd8a0d0c1fb8245146eedf5304887b12f6395b548ca238e054a1483.
//
// Solidity: event NoticePeriodChange(uint256 newNoticePeriod)
func (_ZecreyLegend *ZecreyLegendFilterer) ParseNoticePeriodChange(log types.Log) (*ZecreyLegendNoticePeriodChange, error) {
	event := new(ZecreyLegendNoticePeriodChange)
	if err := _ZecreyLegend.contract.UnpackLog(event, "NoticePeriodChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyLegendRegisterZNSIterator is returned from FilterRegisterZNS and is used to iterate over the raw logs and unpacked data for RegisterZNS events raised by the ZecreyLegend contract.
type ZecreyLegendRegisterZNSIterator struct {
	Event *ZecreyLegendRegisterZNS // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendRegisterZNSIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendRegisterZNS)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendRegisterZNS)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendRegisterZNSIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendRegisterZNSIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendRegisterZNS represents a RegisterZNS event raised by the ZecreyLegend contract.
type ZecreyLegendRegisterZNS struct {
	Name         string
	NameHash     [32]byte
	Owner        common.Address
	ZecreyPubKey [32]byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRegisterZNS is a free log retrieval operation binding the contract event 0x8f3bddba5ebbeea69f799226d7c87c68ca4c0e45fe9131cf1c43fa29239be932.
//
// Solidity: event RegisterZNS(string name, bytes32 nameHash, address owner, bytes32 zecreyPubKey)
func (_ZecreyLegend *ZecreyLegendFilterer) FilterRegisterZNS(opts *bind.FilterOpts) (*ZecreyLegendRegisterZNSIterator, error) {

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "RegisterZNS")
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendRegisterZNSIterator{contract: _ZecreyLegend.contract, event: "RegisterZNS", logs: logs, sub: sub}, nil
}

// WatchRegisterZNS is a free log subscription operation binding the contract event 0x8f3bddba5ebbeea69f799226d7c87c68ca4c0e45fe9131cf1c43fa29239be932.
//
// Solidity: event RegisterZNS(string name, bytes32 nameHash, address owner, bytes32 zecreyPubKey)
func (_ZecreyLegend *ZecreyLegendFilterer) WatchRegisterZNS(opts *bind.WatchOpts, sink chan<- *ZecreyLegendRegisterZNS) (event.Subscription, error) {

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "RegisterZNS")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendRegisterZNS)
				if err := _ZecreyLegend.contract.UnpackLog(event, "RegisterZNS", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisterZNS is a log parse operation binding the contract event 0x8f3bddba5ebbeea69f799226d7c87c68ca4c0e45fe9131cf1c43fa29239be932.
//
// Solidity: event RegisterZNS(string name, bytes32 nameHash, address owner, bytes32 zecreyPubKey)
func (_ZecreyLegend *ZecreyLegendFilterer) ParseRegisterZNS(log types.Log) (*ZecreyLegendRegisterZNS, error) {
	event := new(ZecreyLegendRegisterZNS)
	if err := _ZecreyLegend.contract.UnpackLog(event, "RegisterZNS", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyLegendWithdrawNFTIterator is returned from FilterWithdrawNFT and is used to iterate over the raw logs and unpacked data for WithdrawNFT events raised by the ZecreyLegend contract.
type ZecreyLegendWithdrawNFTIterator struct {
	Event *ZecreyLegendWithdrawNFT // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendWithdrawNFTIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendWithdrawNFT)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendWithdrawNFT)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendWithdrawNFTIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendWithdrawNFTIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendWithdrawNFT represents a WithdrawNFT event raised by the ZecreyLegend contract.
type ZecreyLegendWithdrawNFT struct {
	AccountNameHash [32]byte
	TokenAddress    common.Address
	ToAddress       common.Address
	ProxyAddress    common.Address
	NftType         uint8
	NftTokenId      *big.Int
	Amount          *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterWithdrawNFT is a free log retrieval operation binding the contract event 0xbdfffb78607d94f197dcb7d6db768a952b833cec21822eaade053a657b0b84ef.
//
// Solidity: event WithdrawNFT(bytes32 accountNameHash, address tokenAddress, address toAddress, address proxyAddress, uint8 nftType, uint256 nftTokenId, uint256 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) FilterWithdrawNFT(opts *bind.FilterOpts) (*ZecreyLegendWithdrawNFTIterator, error) {

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "WithdrawNFT")
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendWithdrawNFTIterator{contract: _ZecreyLegend.contract, event: "WithdrawNFT", logs: logs, sub: sub}, nil
}

// WatchWithdrawNFT is a free log subscription operation binding the contract event 0xbdfffb78607d94f197dcb7d6db768a952b833cec21822eaade053a657b0b84ef.
//
// Solidity: event WithdrawNFT(bytes32 accountNameHash, address tokenAddress, address toAddress, address proxyAddress, uint8 nftType, uint256 nftTokenId, uint256 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) WatchWithdrawNFT(opts *bind.WatchOpts, sink chan<- *ZecreyLegendWithdrawNFT) (event.Subscription, error) {

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "WithdrawNFT")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendWithdrawNFT)
				if err := _ZecreyLegend.contract.UnpackLog(event, "WithdrawNFT", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawNFT is a log parse operation binding the contract event 0xbdfffb78607d94f197dcb7d6db768a952b833cec21822eaade053a657b0b84ef.
//
// Solidity: event WithdrawNFT(bytes32 accountNameHash, address tokenAddress, address toAddress, address proxyAddress, uint8 nftType, uint256 nftTokenId, uint256 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) ParseWithdrawNFT(log types.Log) (*ZecreyLegendWithdrawNFT, error) {
	event := new(ZecreyLegendWithdrawNFT)
	if err := _ZecreyLegend.contract.UnpackLog(event, "WithdrawNFT", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyLegendWithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the ZecreyLegend contract.
type ZecreyLegendWithdrawalIterator struct {
	Event *ZecreyLegendWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendWithdrawal represents a Withdrawal event raised by the ZecreyLegend contract.
type ZecreyLegendWithdrawal struct {
	AssetId uint16
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 assetId, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) FilterWithdrawal(opts *bind.FilterOpts) (*ZecreyLegendWithdrawalIterator, error) {

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "Withdrawal")
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendWithdrawalIterator{contract: _ZecreyLegend.contract, event: "Withdrawal", logs: logs, sub: sub}, nil
}

// WatchWithdrawal is a free log subscription operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 assetId, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *ZecreyLegendWithdrawal) (event.Subscription, error) {

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "Withdrawal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendWithdrawal)
				if err := _ZecreyLegend.contract.UnpackLog(event, "Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawal is a log parse operation binding the contract event 0xf4bf32c167ee6e782944cd1db8174729b46adcd3bc732e282cc4a80793933154.
//
// Solidity: event Withdrawal(uint16 assetId, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) ParseWithdrawal(log types.Log) (*ZecreyLegendWithdrawal, error) {
	event := new(ZecreyLegendWithdrawal)
	if err := _ZecreyLegend.contract.UnpackLog(event, "Withdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZecreyLegendWithdrawalPendingIterator is returned from FilterWithdrawalPending and is used to iterate over the raw logs and unpacked data for WithdrawalPending events raised by the ZecreyLegend contract.
type ZecreyLegendWithdrawalPendingIterator struct {
	Event *ZecreyLegendWithdrawalPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZecreyLegendWithdrawalPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZecreyLegendWithdrawalPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZecreyLegendWithdrawalPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZecreyLegendWithdrawalPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZecreyLegendWithdrawalPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZecreyLegendWithdrawalPending represents a WithdrawalPending event raised by the ZecreyLegend contract.
type ZecreyLegendWithdrawalPending struct {
	AssetId uint16
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalPending is a free log retrieval operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 assetId, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) FilterWithdrawalPending(opts *bind.FilterOpts) (*ZecreyLegendWithdrawalPendingIterator, error) {

	logs, sub, err := _ZecreyLegend.contract.FilterLogs(opts, "WithdrawalPending")
	if err != nil {
		return nil, err
	}
	return &ZecreyLegendWithdrawalPendingIterator{contract: _ZecreyLegend.contract, event: "WithdrawalPending", logs: logs, sub: sub}, nil
}

// WatchWithdrawalPending is a free log subscription operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 assetId, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) WatchWithdrawalPending(opts *bind.WatchOpts, sink chan<- *ZecreyLegendWithdrawalPending) (event.Subscription, error) {

	logs, sub, err := _ZecreyLegend.contract.WatchLogs(opts, "WithdrawalPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZecreyLegendWithdrawalPending)
				if err := _ZecreyLegend.contract.UnpackLog(event, "WithdrawalPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalPending is a log parse operation binding the contract event 0xd19cf67bbb6c320849f41b650b1179fb06a3f104451c75109c3b006a385c1688.
//
// Solidity: event WithdrawalPending(uint16 assetId, uint128 amount)
func (_ZecreyLegend *ZecreyLegendFilterer) ParseWithdrawalPending(log types.Log) (*ZecreyLegendWithdrawalPending, error) {
	event := new(ZecreyLegendWithdrawalPending)
	if err := _ZecreyLegend.contract.UnpackLog(event, "WithdrawalPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
