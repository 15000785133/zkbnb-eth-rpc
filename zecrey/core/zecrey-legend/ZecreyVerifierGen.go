// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package zecreyLegend

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// VerifierABI is the input ABI used to generate the binding from.
const VerifierABI = "[{\"inputs\":[],\"name\":\"ScalarField\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"upgradeParameters\",\"type\":\"bytes\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"in_proof\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proof_inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"num_proofs\",\"type\":\"uint256\"}],\"name\":\"verifyBatchProofs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"in_proof\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proof_inputs\",\"type\":\"uint256[]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// VerifierBin is the compiled bytecode used for deploying new contracts.
var VerifierBin = "0x608060405234801561001057600080fd5b50611e4d806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632539464514610051578063721ea4ac146100c1578063c50e8263146101f8578063daad1e631461031d575b600080fd5b6100bf6004803603602081101561006757600080fd5b810190602081018135600160201b81111561008157600080fd5b82018360208201111561009357600080fd5b803590602001918460018302840111600160201b831117156100b457600080fd5b509092509050610337565b005b6101e4600480360360408110156100d757600080fd5b810190602081018135600160201b8111156100f157600080fd5b82018360208201111561010357600080fd5b803590602001918460208302840111600160201b8311171561012457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561017357600080fd5b82018360208201111561018557600080fd5b803590602001918460208302840111600160201b831117156101a657600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061033b945050505050565b604080519115158252519081900360200190f35b6101e46004803603606081101561020e57600080fd5b810190602081018135600160201b81111561022857600080fd5b82018360208201111561023a57600080fd5b803590602001918460208302840111600160201b8311171561025b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102aa57600080fd5b8201836020820111156102bc57600080fd5b803590602001918460208302840111600160201b831117156102dd57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250610718915050565b610325610d62565b60408051918252519081900360200190f35b5050565b600080610346610d86565b90506000610352610fa7565b905083516001600283518161036357fe5b04031461036f57600080fd5b845160081461037d57600080fd5b610385611bb3565b61038d611bd1565b60008060029050846000815181106103a157fe5b6020026020010151836000600481106103b657fe5b60200201528451859060019081106103ca57fe5b6020026020010151836001600481106103df57fe5b60200201527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160005b895181101561052557818a828151811061041e57fe5b602002602001015110610468576040805162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b604482015290519081900360640190fd5b865160018401938891811061047957fe5b60200260200101518660006003811061048e57fe5b602002015286516001840193889181106104a457fe5b6020026020010151866001600381106104b957fe5b602002015289518a90829081106104cc57fe5b6020026020010151866002600381106104e157fe5b602002015260606040860160808860076107d05a03fa93508361050357600080fd5b60608560c08760066107d05a03fa93508361051d57600080fd5b600101610408565b5060006040518061030001604052808c60008151811061054157fe5b602002602001015181526020018c60018151811061055b57fe5b602002602001015181526020018c60028151811061057557fe5b602002602001015181526020018c60038151811061058f57fe5b602002602001015181526020018c6004815181106105a957fe5b602002602001015181526020018c6005815181106105c357fe5b60200260200101518152602001896000600e81106105dd57fe5b602002015181526020016106018a6001600e81106105f757fe5b6020020151611161565b815260408a81015160208301526060808c0151918301919091526080808c01519183019190915260a0808c01519183019190915287519082015260c0016106498760016105f7565b815260c08a0151602082015260e08a015160408201526101008a01516060820152608001896009602002015181526020018c60068151811061068757fe5b602002602001015181526020016106b18d6007815181106106a457fe5b6020026020010151611161565b81526101408a015160208201526101608a015160408201526101808a015160608201526101a08a015160809091015290506106ea611bef565b6020816103008460086107d05a03fa94508461070557600080fd5b516001149b9a5050505050505050505050565b600081600114156107345761072d848461033b565b9050610d5b565b600061073e610d86565b9050600061074a610fa7565b90508360080286511461078e5760405162461bcd60e51b8152600401808060200182810382526021815260200180611ccc6021913960400191505060405180910390fd5b8385518161079857fe5b06156107d55760405162461bcd60e51b8152600401808060200182810382526021815260200180611ced6021913960400191505060405180910390fd5b838551816107df57fe5b04600160028351816107ed57fe5b04031461082b5760405162461bcd60e51b815260040180806020018281038252602e815260200180611d0e602e913960400191505060405180910390fd5b60608061083988888861118b565b9092509050600061084b858584611865565b905060008760060260120167ffffffffffffffff8111801561086c57600080fd5b50604051908082528060200260200182016040528015610896578160200160208202803683370190505b50905060005b888110156109f5578481600202815181106108b357fe5b60200260200101518282600602815181106108ca57fe5b6020026020010181815250508481600202600101815181106108e857fe5b602002602001015182826006026001018151811061090257fe5b6020026020010181815250508a816008026002018151811061092057fe5b602002602001015182826006026002018151811061093a57fe5b6020026020010181815250508a816008026003018151811061095857fe5b602002602001015182826006026003018151811061097257fe5b6020026020010181815250508a816008026004018151811061099057fe5b60200260200101518282600602600401815181106109aa57fe5b6020026020010181815250508a81600802600501815181106109c857fe5b60200260200101518282600602600501815181106109e257fe5b602090810291909101015260010161089c565b5081518151829060068b02908110610a0957fe5b6020908102919091010152610a1f8260016105f7565b818960060260010181518110610a3157fe5b60209081029190910101528560026020020151818960060260020181518110610a5657fe5b60209081029190910101528560036020020151818960060260030181518110610a7b57fe5b60209081029190910101528560046020020151818960060260040181518110610aa057fe5b60209081029190910101528560056020020151818960060260050181518110610ac557fe5b60209081029190910101528160026020020151818960060260060181518110610aea57fe5b6020908102919091010152610b008260036105f7565b818960060260070181518110610b1257fe5b60209081029190910101528560066020020151818960060260080181518110610b3757fe5b60209081029190910101528560076020020151818960060260090181518110610b5c57fe5b602090810291909101015285600860200201518189600602600a0181518110610b8157fe5b602090810291909101015285600960200201518189600602600b0181518110610ba657fe5b602002602001018181525050838860020281518110610bc157fe5b60200260200101518189600602600c0181518110610bdb57fe5b602002602001018181525050610bfc8489600202600101815181106106a457fe5b8189600602600d0181518110610c0e57fe5b602090810291909101015285600a60200201518189600602600e0181518110610c3357fe5b602090810291909101015285600b60200201518189600602600f0181518110610c5857fe5b602090810291909101015285600c6020020151818960060260100181518110610c7d57fe5b602090810291909101015285600d6020020151818960060260110181518110610ca257fe5b602002602001018181525050600081516020029050610cbf611bef565b60c0820615610cff5760405162461bcd60e51b815260040180806020018281038252602d815260200180611d3c602d913960400191505060405180910390fd5b602081836020860160086107d05a03fa985088610d4d5760405162461bcd60e51b8152600401808060200182810382526021815260200180611c6e6021913960400191505060405180910390fd5b516001149750505050505050505b9392505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190565b610d8e611c0d565b7f07bd19abd9a5422fc22524b0ac0ea0227ba0c04edb42a01cf679f8d1d551819881527f0142c8a308ae47e1bab870f03e5e8e211b3bde8aa164c6952f327052dda8a44660208201527f29bb75b5585390e599beebaebdec28dbfd0896760923b94d3d8fdfdde8511d8360408201527f11e8f09720d76a7142cec1eaffc38a848beb645edc6bc20d9d2bdf738384c06760608201527e83a740e5ce59d8de63576ef1bef8b612f6868c07b240b512e1b8c7b6fd6ec760808201527f0b7e24f6c9dec39e65a2c88fea38c0b7ded8ce4770d2a909479112c34828fad660a08201527f1e6453dfcad15c5da9f227d28737ff4387891a71c17d50dadf10b2f6e77f5fd460c08201527f22d9f42348185b4fa9b21e38da80c7889d8f901737fb943b97cf45b14e896c1960e08201527f225c083a2f692792129d02defb6d5efdce1605b7e3669806ee26db8ce3fe6bd26101008201527f22878f7780dc4b0d21f9e739c8b5fd9513f3746acee1109ac1e41c6dbfb310726101208201527f0da66cc64db3d56bbaeeadc2047c4b935b1777d3ef99ad4c587f691176c25d026101408201527f2cf2c98146055fe6f4c0cce55deeab63ed089eb78bdf3b77baa0a32fc2ee11566101608201527f2def31b79bd4b59f68943233000d0dfcf06d9e64d4ddcd4d3628cbcf2c7cbd6c6101808201527f1808c0337fc4f830130194ec214c2c989ab2a6086bd0ae500ce2d5d35aecb2a46101a082015290565b604080516008808252610120820190925260609160208201610100803683370190505090507f2a298a6736ebe750d1e49c046c6371deae79a7569f561190105fd88c1b5711d781600081518110610ffa57fe5b6020026020010181815250507f2380a917198177b4cf9c57651af5875a69c9a79412eeab651ea4feefd54d815e8160018151811061103457fe5b6020026020010181815250507f2016f398b71cda407b1f1f24d62cc0f20db18774ed19e265a6efcf845a0b78ed8160028151811061106e57fe5b6020026020010181815250507f1afbfdbbd8761f6f6a6b035aebd46e76e6d6b5fca91f547b251d6bd106e42daf816003815181106110a857fe5b6020026020010181815250507f26fecca45ea0dcf6c5d4b668602c6c0e7e939c4ac4b8c3aa593339a67b3d04de816004815181106110e257fe5b6020026020010181815250507f097a7d1f561f415ea4a4a8a5d3f23a677a8a126edad67186431b58eb99dc1f888160058151811061111c57fe5b60200260200101818152505060008160068151811061113757fe5b60200260200101818152505060008160078151811061115257fe5b60200260200101818152505090565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790819006900390565b60608060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190506000848651816111bf57fe5b04905060008567ffffffffffffffff811180156111db57600080fd5b50604051908082528060200260200182016040528015611205578160200160208202803683370190505b5090508160010167ffffffffffffffff8111801561122257600080fd5b5060405190808252806020026020018201604052801561124c578160200160208202803683370190505b50935060005b86811015611447578061127e57600182828151811061126d57fe5b6020026020010181815250506112a2565b611289898983611a5f565b82828151811061129557fe5b6020026020010181815250505b8181815181106112ae57fe5b60200260200101516000141561130b576040805162461bcd60e51b815260206004820152601a60248201527f456e74726f70792073686f756c64206e6f74206265207a65726f000000000000604482015290519081900360640190fd5b838061131357fe5b848061131b57fe5b83838151811061132757fe5b60200260200101516001098660008151811061133f57fe5b6020026020010151088560008151811061135557fe5b60200260200101818152505060005b8381101561143e57848982868502018151811061137d57fe5b6020026020010151106113c7576040805162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b604482015290519081900360640190fd5b84806113cf57fe5b85806113d757fe5b8a8387860201815181106113e757fe5b60200260200101518585815181106113fb57fe5b60200260200101510987836001018151811061141357fe5b60200260200101510886826001018151811061142b57fe5b6020908102919091010152600101611364565b50600101611252565b50611450611bb3565b60008760020260020167ffffffffffffffff8111801561146f57600080fd5b50604051908082528060200260200182016040528015611499578160200160208202803683370190505b509650896000815181106114a957fe5b6020026020010151876000815181106114be57fe5b602002602001018181525050896001815181106114d757fe5b6020026020010151876001815181106114ec57fe5b602090810291909101015260015b8881101561168a578584828151811061150f57fe5b602002602001015110611559576040805162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b604482015290519081900360640190fd5b8a816008028151811061156857fe5b60200260200101518360006003811061157d57fe5b60200201528a518b906001600884020190811061159657fe5b6020026020010151836001600381106115ab57fe5b602002015283518490829081106115be57fe5b6020026020010151836002600381106115d357fe5b602002015260408360608160076107d05a03fa915082600060200201518882600202815181106115ff57fe5b6020908102919091010152826001602002015188826002026001018151811061162457fe5b60200260200101818152505081611682576040805162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f2063616c6c206120707265636f6d70696c650000000000604482015290519081900360640190fd5b6001016114fa565b50611693611bd1565b8a6006815181106116a057fe5b6020026020010151816000600481106116b557fe5b60200201528a518b9060079081106116c957fe5b6020026020010151816001600481106116de57fe5b602002015260015b89811015611812578b816008026006018151811061170057fe5b60200260200101518460006003811061171557fe5b60200201528b518c906007600884020190811061172e57fe5b60200260200101518460016003811061174357fe5b6020020152845185908290811061175657fe5b60200260200101518460026003811061176b57fe5b6020020152604082810160608660076107d05a03fa9250826117be5760405162461bcd60e51b815260040180806020018281038252603d815260200180611c8f603d913960400191505060405180910390fd5b60408260808460066107d05a03fa92508261180a5760405162461bcd60e51b8152600401808060200182810382526037815260200180611d696037913960400191505060405180910390fd5b6001016116e6565b5080518851899060028c0290811061182657fe5b60209081029190910101528060016020020151888a6002026001018151811061184b57fe5b602002602001018181525050505050505050935093915050565b61186d611bd1565b611875611bd1565b61187d611bb3565b6000805b85518110156119ab5786816002028151811061189957fe5b6020026020010151836000600381106118ae57fe5b602002015286518790600160028402019081106118c757fe5b6020026020010151836001600381106118dc57fe5b602002015285518690829081106118ef57fe5b60200260200101518360026003811061190457fe5b6020020152604084810160608560076107d05a03fa9150816119575760405162461bcd60e51b8152600401808060200182810382526047815260200180611dd16047913960600191505060405180910390fd5b60408460808660066107d05a03fa9150816119a35760405162461bcd60e51b8152600401808060200182810382526041815260200180611c2d6041913960600191505060405180910390fd5b600101611881565b5082516040850152602083015160608501526119c5611bb3565b8751815260208089015190820152855186906000906119e057fe5b6020026020010151816002600381106119f557fe5b602002015260408160608160076107d05a03fa915081611a465760405162461bcd60e51b8152600401808060200182810382526031815260200180611da06031913960400191505060405180910390fd5b8051855260209081015190850152509195945050505050565b60006003848360080260000181518110611a7557fe5b6020026020010151858460080260010181518110611a8f57fe5b6020026020010151868560080260020181518110611aa957fe5b6020026020010151878660080260030181518110611ac357fe5b6020026020010151888760080260040181518110611add57fe5b6020026020010151898860080260050181518110611af757fe5b60200260200101518a8960080260060181518110611b1157fe5b60200260200101518b8a60080260070181518110611b2b57fe5b60200260200101518b8b81518110611b3f57fe5b6020026020010151604051602001808a815260200189815260200188815260200187815260200186815260200185815260200184815260200183815260200182815260200199505050505050505050506040516020818303038152906040528051906020012060001c901c90509392505050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b604051806101c00160405280600e90602082028036833750919291505056fe4661696c656420746f2063616c6c206120707265636f6d70696c6520666f72204731206164646974696f6e20666f7220696e70757420616363756d756c61746f724661696c656420746f2063616c6c2070616972696e67732066756e6374696f6e734661696c656420746f2063616c6c206120707265636f6d70696c6520666f72204731206d756c7469706c69636174696f6e20666f722050726f6f662043496e76616c69642070726f6f6673206c656e67746820666f722061206261746368496e76616c696420696e70757473206c656e67746820666f7220612062617463684d69736d61746368696e67206e756d626572206f6620696e7075747320666f7220766572696679696e67206b6579496e70757473206c656e6774682073686f756c64206265206d756c7469706c65206f66203139322062797465734661696c656420746f2063616c6c206120707265636f6d70696c6520666f72204731206164646974696f6e20666f722050726f6f6620434661696c656420746f2063616c6c206120707265636f6d70696c6520666f72204731206d756c7469706c69636174696f6e4661696c656420746f2063616c6c206120707265636f6d70696c6520666f72204731206d756c7469706c69636174696f6e20666f7220696e70757420616363756d756c61746f72a2646970667358221220c775590f994c416db74a3104018102347297d61a6c4788644de52062fdf0167e64736f6c63430007060033"

// DeployVerifier deploys a new Ethereum contract, binding an instance of Verifier to it.
func DeployVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Verifier, error) {
	parsed, err := abi.JSON(strings.NewReader(VerifierABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(VerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// Verifier is an auto generated Go binding around an Ethereum contract.
type Verifier struct {
	VerifierCaller     // Read-only binding to the contract
	VerifierTransactor // Write-only binding to the contract
	VerifierFilterer   // Log filterer for contract events
}

// VerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type VerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VerifierSession struct {
	Contract     *Verifier         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VerifierCallerSession struct {
	Contract *VerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// VerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VerifierTransactorSession struct {
	Contract     *VerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// VerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type VerifierRaw struct {
	Contract *Verifier // Generic contract binding to access the raw methods on
}

// VerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VerifierCallerRaw struct {
	Contract *VerifierCaller // Generic read-only contract binding to access the raw methods on
}

// VerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VerifierTransactorRaw struct {
	Contract *VerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVerifier creates a new instance of Verifier, bound to a specific deployed contract.
func NewVerifier(address common.Address, backend bind.ContractBackend) (*Verifier, error) {
	contract, err := bindVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// NewVerifierCaller creates a new read-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierCaller(address common.Address, caller bind.ContractCaller) (*VerifierCaller, error) {
	contract, err := bindVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierCaller{contract: contract}, nil
}

// NewVerifierTransactor creates a new write-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*VerifierTransactor, error) {
	contract, err := bindVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierTransactor{contract: contract}, nil
}

// NewVerifierFilterer creates a new log filterer instance of Verifier, bound to a specific deployed contract.
func NewVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*VerifierFilterer, error) {
	contract, err := bindVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VerifierFilterer{contract: contract}, nil
}

// bindVerifier binds a generic wrapper to an already deployed contract.
func bindVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VerifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.VerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transact(opts, method, params...)
}

// ScalarField is a free data retrieval call binding the contract method 0xdaad1e63.
//
// Solidity: function ScalarField() pure returns(uint256)
func (_Verifier *VerifierCaller) ScalarField(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "ScalarField")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScalarField is a free data retrieval call binding the contract method 0xdaad1e63.
//
// Solidity: function ScalarField() pure returns(uint256)
func (_Verifier *VerifierSession) ScalarField() (*big.Int, error) {
	return _Verifier.Contract.ScalarField(&_Verifier.CallOpts)
}

// ScalarField is a free data retrieval call binding the contract method 0xdaad1e63.
//
// Solidity: function ScalarField() pure returns(uint256)
func (_Verifier *VerifierCallerSession) ScalarField() (*big.Int, error) {
	return _Verifier.Contract.ScalarField(&_Verifier.CallOpts)
}

// VerifyBatchProofs is a free data retrieval call binding the contract method 0xc50e8263.
//
// Solidity: function verifyBatchProofs(uint256[] in_proof, uint256[] proof_inputs, uint256 num_proofs) view returns(bool success)
func (_Verifier *VerifierCaller) VerifyBatchProofs(opts *bind.CallOpts, in_proof []*big.Int, proof_inputs []*big.Int, num_proofs *big.Int) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "verifyBatchProofs", in_proof, proof_inputs, num_proofs)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyBatchProofs is a free data retrieval call binding the contract method 0xc50e8263.
//
// Solidity: function verifyBatchProofs(uint256[] in_proof, uint256[] proof_inputs, uint256 num_proofs) view returns(bool success)
func (_Verifier *VerifierSession) VerifyBatchProofs(in_proof []*big.Int, proof_inputs []*big.Int, num_proofs *big.Int) (bool, error) {
	return _Verifier.Contract.VerifyBatchProofs(&_Verifier.CallOpts, in_proof, proof_inputs, num_proofs)
}

// VerifyBatchProofs is a free data retrieval call binding the contract method 0xc50e8263.
//
// Solidity: function verifyBatchProofs(uint256[] in_proof, uint256[] proof_inputs, uint256 num_proofs) view returns(bool success)
func (_Verifier *VerifierCallerSession) VerifyBatchProofs(in_proof []*big.Int, proof_inputs []*big.Int, num_proofs *big.Int) (bool, error) {
	return _Verifier.Contract.VerifyBatchProofs(&_Verifier.CallOpts, in_proof, proof_inputs, num_proofs)
}

// VerifyProof is a free data retrieval call binding the contract method 0x721ea4ac.
//
// Solidity: function verifyProof(uint256[] in_proof, uint256[] proof_inputs) view returns(bool)
func (_Verifier *VerifierCaller) VerifyProof(opts *bind.CallOpts, in_proof []*big.Int, proof_inputs []*big.Int) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "verifyProof", in_proof, proof_inputs)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyProof is a free data retrieval call binding the contract method 0x721ea4ac.
//
// Solidity: function verifyProof(uint256[] in_proof, uint256[] proof_inputs) view returns(bool)
func (_Verifier *VerifierSession) VerifyProof(in_proof []*big.Int, proof_inputs []*big.Int) (bool, error) {
	return _Verifier.Contract.VerifyProof(&_Verifier.CallOpts, in_proof, proof_inputs)
}

// VerifyProof is a free data retrieval call binding the contract method 0x721ea4ac.
//
// Solidity: function verifyProof(uint256[] in_proof, uint256[] proof_inputs) view returns(bool)
func (_Verifier *VerifierCallerSession) VerifyProof(in_proof []*big.Int, proof_inputs []*big.Int) (bool, error) {
	return _Verifier.Contract.VerifyProof(&_Verifier.CallOpts, in_proof, proof_inputs)
}

// Upgrade is a paid mutator transaction binding the contract method 0x25394645.
//
// Solidity: function upgrade(bytes upgradeParameters) returns()
func (_Verifier *VerifierTransactor) Upgrade(opts *bind.TransactOpts, upgradeParameters []byte) (*types.Transaction, error) {
	return _Verifier.contract.Transact(opts, "upgrade", upgradeParameters)
}

// Upgrade is a paid mutator transaction binding the contract method 0x25394645.
//
// Solidity: function upgrade(bytes upgradeParameters) returns()
func (_Verifier *VerifierSession) Upgrade(upgradeParameters []byte) (*types.Transaction, error) {
	return _Verifier.Contract.Upgrade(&_Verifier.TransactOpts, upgradeParameters)
}

// Upgrade is a paid mutator transaction binding the contract method 0x25394645.
//
// Solidity: function upgrade(bytes upgradeParameters) returns()
func (_Verifier *VerifierTransactorSession) Upgrade(upgradeParameters []byte) (*types.Transaction, error) {
	return _Verifier.Contract.Upgrade(&_Verifier.TransactOpts, upgradeParameters)
}
